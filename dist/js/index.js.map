{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 04a56999bc6abf12358a","webpack:///./src/js/app.js","webpack:///./src/js/main.js","webpack:///./~/three/build/three.js","webpack:///./src/js/libs/OrbitControls.js","webpack:///./src/js/libs/EffectComposer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","window","THREE","init","scene","Scene","camera","PerspectiveCamera","innerWidth","innerHeight","position","z","geometry","BoxGeometry","material","MeshBasicMaterial","color","wireframe","mesh","Mesh","add","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","animate","requestAnimationFrame","rotation","x","y","render","double","number","Promise","resolve","treble","dump","console","log","then","global","factory","this","EventDispatcher","Vector2","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","type","anisotropy","encoding","Object","defineProperty","value","TextureIdCount","uuid","_Math","generateUUID","name","sourceFile","undefined","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","offset","repeat","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","version","onUpdate","count","Vector4","w","WebGLRenderTarget","width","height","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","Quaternion","_x","_y","_z","_w","Vector3","Matrix4","elements","Float32Array","arguments","length","error","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","map","flatten","array","nBlocks","blockSize","firstElem","n","r","arrayCacheF32","toArray","i","allocTexUnits","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","gl","v","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","g","b","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","push","parseUniform","path","pathLength","RePathPart","lastIndex","match","exec","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","Color","set","setRGB","Box2","min","max","Infinity","LensFlarePlugin","flares","vertices","faces","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","state","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","join","fragmentShader","createProgram","attributes","vertex","getAttribLocation","uv","uniforms","renderType","occlusionMap","opacity","scale","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","context","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","disable","CULL_FACE","setDepthWrite","l","flare","matrixWorld","applyMatrix4","matrixWorldInverse","applyProjection","projectionMatrix","copy","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","enable","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","positionScreen","customUpdateCallback","updateLensFlares","j","jl","lensFlares","sprite","setBlending","blending","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","canvas","createElementNS","getContext","fillStyle","fillRect","needsUpdate","painterSortStable","a","renderOrder","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","near","far","isFogExp2","density","multiplyMatrices","sort","visible","decompose","setDepthTest","depthTest","depthWrite","Material","MaterialIdCount","lights","NormalBlending","side","FrontSide","shading","SmoothShading","vertexColors","NoColors","transparent","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","clippingPlanes","clipIntersection","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","count$1","ShaderMaterial","parameters","defines","linewidth","wireframeLinewidth","clipping","skinning","morphTargets","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","uv2","index0AttributeName","setValues","MeshDepthMaterial","depthPacking","BasicDepthPacking","alphaMap","displacementMap","displacementScale","displacementBias","Box3","Sphere","center","radius","Matrix3","Plane","normal","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_lights","_objects","capabilities","getDepthMaterial","object","isPointLight","lightPositionWorld","result","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","useSkinning","isSkinnedMesh","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","clone","scope","renderSingleSided","DoubleSide","renderReverseSided","BackSide","lightPos","projectObject","shadowCamera","layers","mask","isMesh","isLine","isPoints","castShadow","frustumCulled","_frustum","intersectsObject","_renderList","children","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","Array","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","depthMaterial","distanceMaterial","USE_SHADOWMAP","enabled","autoUpdate","PCFShadowMap","clearColor","setScissorTest","faceCount","il","light","shadow","mapSize","vpWidth","vpHeight","pars","NearestFilter","updateProjectionMatrix","isSpotLightShadow","update","shadowMap","shadowMatrix","matrix","setFromMatrixPosition","setRenderTarget","clear","face","up","lookAt","vpDimensions","target","updateMatrixWorld","getInverse","multiply","setFromMatrix","isMultiMaterial","groups","materials","k","kl","group","groupMaterial","materialIndex","renderBufferDirect","warn","getClearColor","clearAlpha","getClearAlpha","setClearColor","Ray","origin","direction","Euler","order","_order","DefaultOrder","Layers","Object3D","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","Object3DIdCount","parent","DefaultUp","onChange","defineProperties","enumerable","normalMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","receiveShadow","userData","onBeforeRender","onAfterRender","count$2","Line3","start","end","Triangle","Face3","isVector3","vertexNormals","isArray","isColor","aoMap","aoMapIntensity","specularMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframeLinecap","wireframeLinejoin","BufferAttribute","itemSize","normalized","TypeError","dynamic","updateRange","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","setDynamic","Geometry","GeometryIdCount","colors","faceVertexUvs","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","count$3","DirectGeometry","indices","normals","uvs","uvs2","BufferGeometry","index","drawRange","Math","random","drawMode","TrianglesDrawMode","updateMorphTargets","BoxBufferGeometry","depth","widthSegments","heightSegments","depthSegments","calculateVertexCount","h","d","calculateIndexCount","buildPlane","u","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","vector","iy","ix","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","addGroup","groupStart","floor","vertexCount","indexCount","setIndex","addAttribute","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","offset2","Camera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","OrthographicCamera","left","right","top","bottom","WebGLIndexedBufferRenderer","infoRender","setMode","mode","get","UNSIGNED_INT","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","isInterleavedBufferAttribute","data","drawArraysInstancedANGLE","WebGLLights","shadowBias","shadowRadius","shadowMapSize","distance","coneCos","penumbraCos","decay","skyColor","groundColor","addLineNumbers","string","lines","split","WebGLShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","Error","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","normalMap","flatShading","logarithmicDepthBuffer","filter","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","pattern","unrollLoops","snippet","unroll","parseInt","WebGLProgram","code","__webglShader","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","supportsVertexTextures","maxBones","lightMap","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","useFog","fogExp","numClipIntersection","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","floatVertexTextures","skeleton","nVertexUniforms","maxVertexUniforms","nVertexMatrices","bones","getTextureEncodingFromMap","gammaOverrideLinear","isTexture","isWebGLRenderTarget","programs","shaderIDs","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","nClipIntersection","shaderID","getMaxPrecision","currentRenderTarget","getCurrentRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","hemi","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","indexOf","pop","WebGLGeometries","properties","onGeometryDispose","event","buffergeometry","geometries","deleteAttribute","deleteAttributes","removeEventListener","property","delete","bufferproperty","memory","getAttributeBuffer","attribute","__webglBuffer","buffer","deleteBuffer","removeAttributeBuffer","addEventListener","_bufferGeometry","setFromObject","WebGLObjects","updateFromObject","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","DYNAMIC_DRAW","bufferSubData","BYTES_PER_ELEMENT","subarray","getWireframeAttribute","TypeArray","WebGLTextures","paramThreeToGL","clampToMaxSize","maxSize","drawImage","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","filterFallback","f","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","_infoMemory","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","dispose","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","complete","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","RGBFormat","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthStencilFormat","DEPTH_STENCIL","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","DepthFormat","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","setClear","equals","reset","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","setDepthFunc","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","currentBlending","currentPremultipledAlpha","AdditiveBlending","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","SubtractiveBlending","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","MultiplyBlending","SRC_COLOR","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setColorWrite","colorBuffer","setStencilTest","setStencilWrite","stencilWrite","setStencilFunc","setStencilOp","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","setLineWidth","currentLineWidth","lineWidth","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","apply","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_IMAGE_UNITS","buffers","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","numIntersection","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","glClearColor","_premultipliedAlpha","setDefaultGLState","_currentScissor","_scissor","multiplyScalar","_currentViewport","_viewport","_clearColor","_clearAlpha","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","setupVertexAttributes","startIndex","isInstancedBufferGeometry","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","SHORT","INT","BYTE","objects","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","absNumericalSort","abs","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","isObjectViewable","computeBoundingSphere","_sphere","isSphereViewable","isSpriteViewable","sphere","intersectsSphere","_clipping","_this","negRad","distanceToPoint","isLight","isSprite","isLensFlare","isImmediateRenderObject","sortObjects","renderObjects","renderList","overrideMaterial","setMaterial","setProgram","renderBufferImmediate","initMaterial","materialProperties","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","hash","ambientLightColor","ambient","directionalLights","spotLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshNormalMaterial","upload","diffuse","emissive","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","isCubeTexture","dashSize","totalSize","gapSize","_height","lightMapIntensity","specular","shininess","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","ll","intensity","directionalLength","pointLength","spotLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","sub","transformDirection","bias","isSpotLight","cos","angle","penumbra","negate","identity","setPosition","isHemisphereLight","normalize","textureUnit","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MaxEquation","MIN_EXT","MAX_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8_WEBGL","REVISION","_canvas","_context","_alpha","alpha","_depth","_stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","morphInfluences","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_width","_scissorTest","_infoRender","points","rangeMin","rangeMax","MaxIndex","bufferRenderer","indexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","spritePlugin","lensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","getPixelRatio","setPixelRatio","getSize","updateStyle","style","setViewport","setScissor","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","updateBuffers","geometryProgram","morphTargetInfluences","activeInfluences","influence","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","LINE_STRIP","POINTS","forceClear","isCamera","background","extractRotation","setFaceCulling","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","LensFlare","SpriteMaterial","Sprite","LOD","levels","DataTexture","Skeleton","boneInverses","identityMatrix","slice","sqrt","nextPowerOfTwo","ceil","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","Bone","skin","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","bone","gbone","fromArray","pos","rotq","scl","normalizeSkinWeights","bind","linecap","linejoin","Line","LineSegments","Points","Group","VideoTexture","video","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","sortFunction","edge","keys","numEdges","edges","key","toString","coords","o","ol","index2","getX","getY","getZ","numTris","index1","ParametricBufferGeometry","func","slices","stacks","sliceCount","computeVertexNormals","ParametricGeometry","fromBufferGeometry","mergeVertices","PolyhedronBufferGeometry","detail","subdivide","getVertexByIndex","subdivideFace","cols","pow","aj","lerp","bj","rows","pushVertex","appplyRadius","generateUVs","azimuth","PI","inclination","uvBuffer","correctUVs","correctSeam","x0","x1","x2","centroid","uvA","uvB","uvC","divideScalar","azi","correctUV","atan2","normalizeNormals","TetrahedronBufferGeometry","TetrahedronGeometry","OctahedronBufferGeometry","OctahedronGeometry","IcosahedronBufferGeometry","t","IcosahedronGeometry","DodecahedronBufferGeometry","DodecahedronGeometry","PolyhedronGeometry","TubeBufferGeometry","tubularSegments","radialSegments","closed","generateBufferData","generateSegment","generateIndices","P","getPointAt","N","frames","B","binormals","sin","computeFrenetFrames","tangents","TubeGeometry","taper","bufferGeometry","TorusKnotBufferGeometry","tube","q","calculatePositionOnCurve","cu","su","quOverP","cs","indexOffset","P1","P2","T","subVectors","addVectors","crossVectors","cx","cy","setXYZ","setXY","setX","TorusKnotGeometry","heightScale","TorusBufferGeometry","arc","TorusGeometry","ExtrudeGeometry","shapes","addShapeList","computeFaceNormals","TextGeometry","text","font","isFont","generateShapes","curveSegments","amount","bevelThickness","bevelSize","bevelEnabled","SphereBufferGeometry","phiStart","phiLength","thetaStart","thetaLength","thetaEnd","positions","verticesRow","px","py","pz","v1","v2","v3","v4","SphereGeometry","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","segment","radiusStep","thetaSegmentLevel","RingGeometry","PlaneGeometry","LatheBufferGeometry","segments","clamp","base","inverseSegments","phi","n1","n2","LatheGeometry","ShapeGeometry","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","vert1","vert2","face1","face2","dot","CylinderBufferGeometry","radiusTop","radiusBottom","openEnded","nbCap","generateTorso","slope","indexRow","theta","sinTheta","cosTheta","halfHeight","indexArray","i1","i2","i3","generateCap","centerIndexStart","centerIndexEnd","sign","CylinderGeometry","ConeGeometry","ConeBufferGeometry","CircleBufferGeometry","s","ii","CircleGeometry","ShadowMaterial","merge","UniformsLib","RawShaderMaterial","MultiMaterial","STANDARD","PHYSICAL","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","url","itemEnd","itemError","XHRLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","BinaryTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Light","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","constructor","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","times","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","Curve","LineCurve","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","v0","QuadraticBezierCurve","Shape","Path","holes","currentPoint","fromPoints","ShapePath","subPaths","currentPath","Font","FontLoader","getAudioContext","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","eyeSep","cameraL","cameraR","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","AudioListener","gain","createGain","connect","destination","Audio","listener","source","createBufferSource","onended","onEnded","getInput","autoplay","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","AnimationObjectGroup","var_args","prototype","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindings","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","LoopRepeat","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","params","threshold","PointCloud","ascSort","intersectObject","raycaster","intersects","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","running","Spline","interpolate","t2","t3","intPoint","w2","w3","pa","pb","pc","pd","initFromArray","getPoint","getControlPointsArray","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","distanceTo","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Spherical","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","hex","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","isBone","VertexColors","PointLightHelper","sphereSize","HemisphereLightHelper","rotateX","FaceColors","lightSphere","GridHelper","divisions","color1","color2","step","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","BoundingBoxHelper","box","BoxHelper","ArrowHelper","dir","headLength","headWidth","line","lineGeometry","coneGeometry","setDirection","setLength","AxisHelper","ClosedSplineCurve3","CatmullRomCurve3","ArcCurve","aRadius","Face4","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","EdgesHelper","WireframeHelper","Projector","projectVector","project","unprojectVector","unproject","pickingRay","CanvasRenderer","Number","EPSILON","Function","assign","output","nextKey","hasOwnProperty","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","BlendingMode","UVMapping","TextureMapping","TextureWrapping","TextureFilter","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","chars","rnd","euclideanModulo","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setY","setComponent","getComponent","addScalar","addScaledVector","subScalar","isFinite","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthSq","lengthManhattan","distanceToSquared","dx","dy","distanceToManhattan","lerpVectors","fromAttribute","rotateAround","toJSON","meta","getDataURL","toDataURL","metadata","generator","wrap","transformUv","isVector4","setZ","setW","e","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","create","onChangeCallback","euler","isEuler","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","EPS","vFrom","vTo","inverse","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","callback","qa","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","len","tDir","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","setFromSpherical","sinPhiRadius","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","copyPosition","me","extractBasis","xAxis","yAxis","zAxis","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","y2","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","applyToVector3Array","applyToBuffer","determinant","transpose","tmp","flattenToArrayOffset","getPosition","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","tan","ymin","xmin","xmax","makeOrthographic","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","setHex","setStyle","setHSL","hue2rgb","handleAlpha","parseFloat","charAt","ColorKeywords","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","addColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","basic","lambert","phong","standard","dashed","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","halfSize","isEmpty","getCenter","expandByVector","expandByScalar","containsBox","intersectsBox","clampPoint","clampedPoint","intersect","union","translate","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","traverse","closestPoint","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsSprite","negRadius","d1","d2","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","test","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","isRootObject","JSON","stringify","parse","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","triangle","area","midpoint","edgeList","projectedPoint","minDistance","isBufferAttribute","setArray","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXYZW","computeBoundingBox","obj","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","fl","vA","vB","vC","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","getIndex","getAttribute","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","setDrawMode","morphTargetDictionary","ml","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","tl","targets","uvs_f","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","isOrthographicCamera","zoomW","zoomH","scaleW","scaleH","vecX","vecY","wantedRotation","matrixPosition","guessSizeSq","level","addLevel","getObjectForDistance","pose","offsetMatrix","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","ShapeUtils","contour","triangulate","snip","verts","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","concat","failedCuts","hl","minShapeIndex","counter","h2","forEach","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","addShape","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","extractPoints","reverse","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","indexA","indexB","indexC","indexD","Geometries","freeze","isShadowMaterial","Materials","Cache","files","file","load","cached","setTimeout","dataUriRegex","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","toLowerCase","ArrayBuffer","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","open","status","overrideMimeType","send","setPath","setResponseType","setWithCredentials","loadTexture","loader","texDatas","mipmapCount","isCubemap","DataTextureLoader","texData","onload","URL","revokeObjectURL","src","onerror","blob","createObjectURL","setCrossOrigin","crossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","trim","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","TYPED_ARRAYS","typedArray","drawcalls","offsets","extractUrlBase","initMaterials","createMaterial","textureLoader","materialLoader","fullPath","Handlers","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","handlers","regex","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","getGeometry","getMaterial","isInteger","getUtoTmapping","getPoints","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","getPointFunc","isLineCurve","tangent","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","resolution","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","point0","point1","point2","point3","PathPrototype","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","createPaths","String","paths","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","action","ha","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","eyeSepOnProjection","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","setNodeSource","audioNode","setBuffer","play","pause","stop","currentTime","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetArray","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","subscribe_","firstValidIndex","bindings","isAnimationObjectGroup","re","matches","results","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","_nActiveBindings","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","_removeInactiveBinding","uncacheAction","bindingsByName","_addInactiveBinding","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","isInterleavedBuffer","setFromCamera","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","vector2","coneLength","coneWidth","boneList","matrixWorldInv","boneMatrix","setColors","lightPlane","targetLine","setPoint","setColor","CubicPoly","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","SplineCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","SceneUtils","createMultiMaterialObject","detach","attach","LineStrip","LinePieces","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CubeGeometry","MeshFaceMaterial","Particle","OrbitControls","getAutoRotationAngle","autoRotateSpeed","getZoomScale","zoomSpeed","rotateLeft","sphericalDelta","rotateUp","dollyIn","dollyScale","minZoom","maxZoom","zoomChanged","enableZoom","dollyOut","handleMouseDownRotate","rotateStart","clientX","clientY","handleMouseDownDolly","dollyStart","handleMouseDownPan","panStart","handleMouseMoveRotate","rotateEnd","rotateDelta","element","clientWidth","rotateSpeed","clientHeight","handleMouseMoveDolly","dollyEnd","dollyDelta","handleMouseMovePan","panEnd","panDelta","pan","handleMouseUp","handleMouseWheel","deltaY","handleKeyDown","keyCode","UP","keyPanSpeed","BOTTOM","handleTouchStartRotate","touches","pageX","pageY","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleTouchEnd","onMouseDown","button","mouseButtons","ORBIT","enableRotate","STATE","ROTATE","ZOOM","DOLLY","PAN","enablePan","NONE","onMouseMove","onMouseUp","startEvent","endEvent","onMouseWheel","stopPropagation","onKeyDown","enableKeys","onTouchStart","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","onTouchMove","onTouchEnd","onContextMenu","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","autoRotate","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","changeEvent","quat","quatInverse","lastPosition","lastQuaternion","panOffset","panLeft","objectMatrix","panUp","deltaX","targetDistance","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","EffectComposer","pixelRatio","renderTarget1","renderTarget2","writeBuffer","readBuffer","passes","CopyShader","copyPass","ShaderPass","swapBuffers","addPass","pass","insertPass","maskActive","needsSwap","MaskPass","ClearMaskPass"],"mappings":"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AA,IACAC,GAAA,IACApjC,GAAA,IACAC,GAAA,IACAojC,GAAA,IACAE,GAAA,IACAE,GAAA,IACAE,GAAA,IACAE,GAAA,IACAlY,GAAA,EACAE,GAAA,EACAE,GAAA,EACAxrB,GAAA,EACA2rB,GAAA,EACAE,GAAA,EACAE,GAAA,EACAE,GAAA,EACAve,GAAA,EACAoN,GAAA,EACAC,GAAA,EACAwB,GAAA,EACAzE,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACA86C,GAAA,IACAtjE,GAAA,IACA+qB,GAAA,IACAG,GAAA,IACAC,GAAA,IACAC,GAAA,IACAJ,GAAA,IACAC,GAAA,IACAs4C,IACAD,aACAtjE,yBACA+qB,yBACAG,oCACAC,oCACAC,8BACAJ,2BACAC,4BAEAimB,GAAA,IACA/zC,GAAA,KACAi0C,GAAA,KACAoyB,IACAtyB,kBACA/zC,uBACAi0C,2BAEA/3B,GAAA,KACAub,GAAA,KACAC,GAAA,KACAz3B,GAAA,KACAo0C,GAAA,KACAn0C,GAAA,KACAomE,IACApqD,iBACAub,8BACAC,6BACAz3B,gBACAo0C,6BACAn0C,6BAEAE,GAAA,KACA00C,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACA3a,GAAA,KACAC,GAAA,KACAga,GAAA,KACAE,GAAA,KACAE,GAAA,KACAsD,GAAA,KACA9C,GAAA,KACApb,GAAA,KACA75B,GAAA,KACAm1C,GAAA,KACAE,GAAA,KACA+wB,GAAApmE,GACAu8B,GAAA,KACArB,GAAA,KACAub,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAK,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAK,GAAA,KACA4uB,GAAA,KACA9K,GAAA,KACA+K,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACA/L,GAAA,KACAgM,GAAA,KACAC,GAAA,KACAxiD,GAAA,EACA44B,GAAA,EACAE,GAAA,EACAz8C,GAAA,IACAypB,GAAA,KACAK,GAAA,KACAJ,GAAA,KACA08C,GAAA,KACAz8C,G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BACAt3D,EAAAo3D,2BACAp3D,EAAAq3D,uBACAr3D,EAAAw3D,sBACAx3D,EAAAu3D,wBACAv3D,EAAAk9D,iBACAl9D,EAAA69D,mBACA79D,EAAAy3D,iBACAz3D,EAAA02D,kBACA12D,EAAAo+D,wBACAp+D,EAAAshE,kBACAthE,EAAA03D,iBACA13D,EAAA2hE,WACA3hE,EAAA4hE,2BACA5hE,EAAA+oB,kBACA/oB,EAAA0nB,mBACA1nB,EAAAynB,YACAznB,EAAA6hE,8BACA7hE,EAAAgiE,8BACAhiE,EAAA+hE,qBACA/hE,EAAAiiE,4BACAjiE,EAAAunB,0BACAvnB,EAAAqnB,oBACArnB,EAAAonB,oBACApnB,EAAAknB,mBACAlnB,EAAAinB,kBACAjnB,EAAAgnB;AACAhnB,EAAA8mB,kBACA9mB,EAAA4mB,yBACA5mB,EAAA0mB,kBACA1mB,EAAAwmB,iBACAxmB,EAAAkmB,mBACAlmB,EAAAmlB,SACAnlB,EAAAgkB,mBACAhkB,EAAA0jB,YACA1jB,EAAAkiE,aACAliE,EAAAyjB,UACAzjB,EAAAqD,kBACArD,EAAA6iE,SACA7iE,EAAAm3D,+BACAn3D,EAAAo2D,qBACAp2D,EAAAq2D,uBACAr2D,EAAA+1D,oBACA/1D,EAAAu1D,eACAv1D,EAAAklB,YACAllB,EAAAkjE,UACAljE,EAAAkpB,KAAA3kB,GACAvE,EAAAilE,aACAjlE,EAAA8a,SACA9a,EAAAib,WACAjb,EAAA0a,UACA1a,EAAAkjB,OACAljB,EAAAoH,UACApH,EAAA6a,WACA7a,EAAAya,QACAza,EAAAiO,OACAjO,EAAA+kB,SACA/kB,EAAAqjB,SACArjB,EAAA8F,UACA9F,EAAAmH,UACAnH,EAAAsD,UACAtD,EAAA8G,aACA9G,EAAAolF,iBACAplF,EAAA8N,QACA9N,EAAAklE,kBACAllE,EAAA2lE,yBACA3lE,EAAA6lE,uBACA7lE,EAAAimE,mBACAjmE,EAAAmmE,kBACAnmE,EAAAumE,oBACAvmE,EAAAymE,yBACAzmE,EAAA6mE,cACA7mE,EAAAknE,qBACAlnE,EAAAmnE,0BACAnnE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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar cats = __webpack_require__(1);\n\t\n\t//console.log(cats);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\twindow.THREE = __webpack_require__(2);\n\t__webpack_require__(3);\n\t__webpack_require__(4);\n\t\n\t(function () {\n\t  var scene, camera, renderer;\n\t  var geometry, material, mesh;\n\t\n\t  init();\n\t  animate();\n\t\n\t  function init() {\n\t\n\t    scene = new THREE.Scene();\n\t\n\t    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);\n\t    camera.position.z = 1000;\n\t\n\t    geometry = new THREE.BoxGeometry(200, 200, 200);\n\t    material = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: false });\n\t\n\t    mesh = new THREE.Mesh(geometry, material);\n\t    scene.add(mesh);\n\t\n\t    renderer = new THREE.WebGLRenderer();\n\t    renderer.setSize(window.innerWidth, window.innerHeight);\n\t\n\t    document.body.appendChild(renderer.domElement);\n\t  }\n\t\n\t  function animate() {\n\t\n\t    requestAnimationFrame(animate);\n\t\n\t    mesh.rotation.x += 0.01;\n\t    mesh.rotation.y += 0.02;\n\t\n\t    renderer.render(scene, camera);\n\t  }\n\t})();\n\t\n\t(function () {\n\t\n\t  var double = function double(number) {\n\t    return new Promise(function (resolve) {\n\t      resolve(number * 2);\n\t    });\n\t  };\n\t\n\t  /* 3倍にする */\n\t\n\t  var treble = function treble(number) {\n\t    return new Promise(function (resolve) {\n\t      resolve(number * 3);\n\t    });\n\t  };\n\t\n\t  /* 表示する */\n\t\n\t  // var dump = function(number) {\n\t  //   console.log(number);\n\t  //   return number;\n\t  // };\n\t\n\t  var dump = function dump(number) {\n\t    if (number > 119) {\n\t      console.log(number + ':120以上です!');\n\t    } else if (number <= 119) {\n\t      console.log(number + ':120以下です!');\n\t    }\n\t    return number;\n\t  };\n\t\n\t  /* 実行 */\n\t\n\t  double(10) // 10*2 -> 20\n\t  .then(dump) // コンソールに表示: 20\n\t  .then(treble) // 20*3 -> 60\n\t  .then(dump) // コンソールに表示: 60\n\t  .then(double) // 60*2 -> 120\n\t  .then(dump); // コンソールに表示: 120\n\t})();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t\t true ? factory(exports) :\n\t\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t\t(factory((global.THREE = global.THREE || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\t\t// Polyfills\n\t\n\t\tif ( Number.EPSILON === undefined ) {\n\t\n\t\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tif ( Math.sign === undefined ) {\n\t\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\n\t\t\tMath.sign = function ( x ) {\n\t\n\t\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tif ( Function.prototype.name === undefined ) {\n\t\n\t\t\t// Missing in IE9-11.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\n\t\t\tObject.defineProperty( Function.prototype, 'name', {\n\t\n\t\t\t\tget: function () {\n\t\n\t\t\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\t\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\tif ( Object.assign === undefined ) {\n\t\n\t\t\t// Missing in IE.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\n\t\t\t( function () {\n\t\n\t\t\t\tObject.assign = function ( target ) {\n\t\n\t\t\t\t\t'use strict';\n\t\n\t\t\t\t\tif ( target === undefined || target === null ) {\n\t\n\t\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar output = Object( target );\n\t\n\t\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\t\n\t\t\t\t\t\tvar source = arguments[ index ];\n\t\n\t\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\t\n\t\t\t\t\t\t\tfor ( var nextKey in source ) {\n\t\n\t\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\t\n\t\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn output;\n\t\n\t\t\t\t};\n\t\n\t\t\t} )();\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * https://github.com/mrdoob/eventdispatcher.js/\n\t\t */\n\t\n\t\tfunction EventDispatcher() {}\n\t\n\t\tObject.assign( EventDispatcher.prototype, {\n\t\n\t\t\taddEventListener: function ( type, listener ) {\n\t\n\t\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\t\n\t\t\t\tvar listeners = this._listeners;\n\t\n\t\t\t\tif ( listeners[ type ] === undefined ) {\n\t\n\t\t\t\t\tlisteners[ type ] = [];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t\n\t\t\t\t\tlisteners[ type ].push( listener );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\thasEventListener: function ( type, listener ) {\n\t\n\t\t\t\tif ( this._listeners === undefined ) return false;\n\t\n\t\t\t\tvar listeners = this._listeners;\n\t\n\t\t\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t},\n\t\n\t\t\tremoveEventListener: function ( type, listener ) {\n\t\n\t\t\t\tif ( this._listeners === undefined ) return;\n\t\n\t\t\t\tvar listeners = this._listeners;\n\t\t\t\tvar listenerArray = listeners[ type ];\n\t\n\t\t\t\tif ( listenerArray !== undefined ) {\n\t\n\t\t\t\t\tvar index = listenerArray.indexOf( listener );\n\t\n\t\t\t\t\tif ( index !== - 1 ) {\n\t\n\t\t\t\t\t\tlistenerArray.splice( index, 1 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tdispatchEvent: function ( event ) {\n\t\n\t\t\t\tif ( this._listeners === undefined ) return;\n\t\n\t\t\t\tvar listeners = this._listeners;\n\t\t\t\tvar listenerArray = listeners[ event.type ];\n\t\n\t\t\t\tif ( listenerArray !== undefined ) {\n\t\n\t\t\t\t\tevent.target = this;\n\t\n\t\t\t\t\tvar array = [], i = 0;\n\t\t\t\t\tvar length = listenerArray.length;\n\t\n\t\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t\t\t\t\t\tarray[ i ] = listenerArray[ i ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t\t\t\t\t\tarray[ i ].call( this, event );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\tvar REVISION = '82';\n\t\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\t\tvar CullFaceNone = 0;\n\t\tvar CullFaceBack = 1;\n\t\tvar CullFaceFront = 2;\n\t\tvar CullFaceFrontBack = 3;\n\t\tvar FrontFaceDirectionCW = 0;\n\t\tvar FrontFaceDirectionCCW = 1;\n\t\tvar BasicShadowMap = 0;\n\t\tvar PCFShadowMap = 1;\n\t\tvar PCFSoftShadowMap = 2;\n\t\tvar FrontSide = 0;\n\t\tvar BackSide = 1;\n\t\tvar DoubleSide = 2;\n\t\tvar FlatShading = 1;\n\t\tvar SmoothShading = 2;\n\t\tvar NoColors = 0;\n\t\tvar FaceColors = 1;\n\t\tvar VertexColors = 2;\n\t\tvar NoBlending = 0;\n\t\tvar NormalBlending = 1;\n\t\tvar AdditiveBlending = 2;\n\t\tvar SubtractiveBlending = 3;\n\t\tvar MultiplyBlending = 4;\n\t\tvar CustomBlending = 5;\n\t\tvar BlendingMode = {\n\t\t\tNoBlending: NoBlending,\n\t\t\tNormalBlending: NormalBlending,\n\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\tCustomBlending: CustomBlending\n\t\t};\n\t\tvar AddEquation = 100;\n\t\tvar SubtractEquation = 101;\n\t\tvar ReverseSubtractEquation = 102;\n\t\tvar MinEquation = 103;\n\t\tvar MaxEquation = 104;\n\t\tvar ZeroFactor = 200;\n\t\tvar OneFactor = 201;\n\t\tvar SrcColorFactor = 202;\n\t\tvar OneMinusSrcColorFactor = 203;\n\t\tvar SrcAlphaFactor = 204;\n\t\tvar OneMinusSrcAlphaFactor = 205;\n\t\tvar DstAlphaFactor = 206;\n\t\tvar OneMinusDstAlphaFactor = 207;\n\t\tvar DstColorFactor = 208;\n\t\tvar OneMinusDstColorFactor = 209;\n\t\tvar SrcAlphaSaturateFactor = 210;\n\t\tvar NeverDepth = 0;\n\t\tvar AlwaysDepth = 1;\n\t\tvar LessDepth = 2;\n\t\tvar LessEqualDepth = 3;\n\t\tvar EqualDepth = 4;\n\t\tvar GreaterEqualDepth = 5;\n\t\tvar GreaterDepth = 6;\n\t\tvar NotEqualDepth = 7;\n\t\tvar MultiplyOperation = 0;\n\t\tvar MixOperation = 1;\n\t\tvar AddOperation = 2;\n\t\tvar NoToneMapping = 0;\n\t\tvar LinearToneMapping = 1;\n\t\tvar ReinhardToneMapping = 2;\n\t\tvar Uncharted2ToneMapping = 3;\n\t\tvar CineonToneMapping = 4;\n\t\tvar UVMapping = 300;\n\t\tvar CubeReflectionMapping = 301;\n\t\tvar CubeRefractionMapping = 302;\n\t\tvar EquirectangularReflectionMapping = 303;\n\t\tvar EquirectangularRefractionMapping = 304;\n\t\tvar SphericalReflectionMapping = 305;\n\t\tvar CubeUVReflectionMapping = 306;\n\t\tvar CubeUVRefractionMapping = 307;\n\t\tvar TextureMapping = {\n\t\t\tUVMapping: UVMapping,\n\t\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t\t};\n\t\tvar RepeatWrapping = 1000;\n\t\tvar ClampToEdgeWrapping = 1001;\n\t\tvar MirroredRepeatWrapping = 1002;\n\t\tvar TextureWrapping = {\n\t\t\tRepeatWrapping: RepeatWrapping,\n\t\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t\t};\n\t\tvar NearestFilter = 1003;\n\t\tvar NearestMipMapNearestFilter = 1004;\n\t\tvar NearestMipMapLinearFilter = 1005;\n\t\tvar LinearFilter = 1006;\n\t\tvar LinearMipMapNearestFilter = 1007;\n\t\tvar LinearMipMapLinearFilter = 1008;\n\t\tvar TextureFilter = {\n\t\t\tNearestFilter: NearestFilter,\n\t\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\t\tLinearFilter: LinearFilter,\n\t\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t\t};\n\t\tvar UnsignedByteType = 1009;\n\t\tvar ByteType = 1010;\n\t\tvar ShortType = 1011;\n\t\tvar UnsignedShortType = 1012;\n\t\tvar IntType = 1013;\n\t\tvar UnsignedIntType = 1014;\n\t\tvar FloatType = 1015;\n\t\tvar HalfFloatType = 1016;\n\t\tvar UnsignedShort4444Type = 1017;\n\t\tvar UnsignedShort5551Type = 1018;\n\t\tvar UnsignedShort565Type = 1019;\n\t\tvar UnsignedInt248Type = 1020;\n\t\tvar AlphaFormat = 1021;\n\t\tvar RGBFormat = 1022;\n\t\tvar RGBAFormat = 1023;\n\t\tvar LuminanceFormat = 1024;\n\t\tvar LuminanceAlphaFormat = 1025;\n\t\tvar RGBEFormat = RGBAFormat;\n\t\tvar DepthFormat = 1026;\n\t\tvar DepthStencilFormat = 1027;\n\t\tvar RGB_S3TC_DXT1_Format = 2001;\n\t\tvar RGBA_S3TC_DXT1_Format = 2002;\n\t\tvar RGBA_S3TC_DXT3_Format = 2003;\n\t\tvar RGBA_S3TC_DXT5_Format = 2004;\n\t\tvar RGB_PVRTC_4BPPV1_Format = 2100;\n\t\tvar RGB_PVRTC_2BPPV1_Format = 2101;\n\t\tvar RGBA_PVRTC_4BPPV1_Format = 2102;\n\t\tvar RGBA_PVRTC_2BPPV1_Format = 2103;\n\t\tvar RGB_ETC1_Format = 2151;\n\t\tvar LoopOnce = 2200;\n\t\tvar LoopRepeat = 2201;\n\t\tvar LoopPingPong = 2202;\n\t\tvar InterpolateDiscrete = 2300;\n\t\tvar InterpolateLinear = 2301;\n\t\tvar InterpolateSmooth = 2302;\n\t\tvar ZeroCurvatureEnding = 2400;\n\t\tvar ZeroSlopeEnding = 2401;\n\t\tvar WrapAroundEnding = 2402;\n\t\tvar TrianglesDrawMode = 0;\n\t\tvar TriangleStripDrawMode = 1;\n\t\tvar TriangleFanDrawMode = 2;\n\t\tvar LinearEncoding = 3000;\n\t\tvar sRGBEncoding = 3001;\n\t\tvar GammaEncoding = 3007;\n\t\tvar RGBEEncoding = 3002;\n\t\tvar LogLuvEncoding = 3003;\n\t\tvar RGBM7Encoding = 3004;\n\t\tvar RGBM16Encoding = 3005;\n\t\tvar RGBDEncoding = 3006;\n\t\tvar BasicDepthPacking = 3200;\n\t\tvar RGBADepthPacking = 3201;\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tvar _Math = {\n\t\n\t\t\tDEG2RAD: Math.PI / 180,\n\t\t\tRAD2DEG: 180 / Math.PI,\n\t\n\t\t\tgenerateUUID: function () {\n\t\n\t\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\n\t\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\t\tvar uuid = new Array( 36 );\n\t\t\t\tvar rnd = 0, r;\n\t\n\t\t\t\treturn function generateUUID() {\n\t\n\t\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\t\n\t\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\t\n\t\t\t\t\t\t\tuuid[ i ] = '-';\n\t\n\t\t\t\t\t\t} else if ( i === 14 ) {\n\t\n\t\t\t\t\t\t\tuuid[ i ] = '4';\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn uuid.join( '' );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclamp: function ( value, min, max ) {\n\t\n\t\t\t\treturn Math.max( min, Math.min( max, value ) );\n\t\n\t\t\t},\n\t\n\t\t\t// compute euclidian modulo of m % n\n\t\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\n\t\t\teuclideanModulo: function ( n, m ) {\n\t\n\t\t\t\treturn ( ( n % m ) + m ) % m;\n\t\n\t\t\t},\n\t\n\t\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\n\t\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\t\n\t\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\t\n\t\t\t},\n\t\n\t\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\n\t\t\tlerp: function ( x, y, t ) {\n\t\n\t\t\t\treturn ( 1 - t ) * x + t * y;\n\t\n\t\t\t},\n\t\n\t\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\n\t\t\tsmoothstep: function ( x, min, max ) {\n\t\n\t\t\t\tif ( x <= min ) return 0;\n\t\t\t\tif ( x >= max ) return 1;\n\t\n\t\t\t\tx = ( x - min ) / ( max - min );\n\t\n\t\t\t\treturn x * x * ( 3 - 2 * x );\n\t\n\t\t\t},\n\t\n\t\t\tsmootherstep: function ( x, min, max ) {\n\t\n\t\t\t\tif ( x <= min ) return 0;\n\t\t\t\tif ( x >= max ) return 1;\n\t\n\t\t\t\tx = ( x - min ) / ( max - min );\n\t\n\t\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\t\n\t\t\t},\n\t\n\t\t\trandom16: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\t\t\treturn Math.random();\n\t\n\t\t\t},\n\t\n\t\t\t// Random integer from <low, high> interval\n\t\n\t\t\trandInt: function ( low, high ) {\n\t\n\t\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\t\n\t\t\t},\n\t\n\t\t\t// Random float from <low, high> interval\n\t\n\t\t\trandFloat: function ( low, high ) {\n\t\n\t\t\t\treturn low + Math.random() * ( high - low );\n\t\n\t\t\t},\n\t\n\t\t\t// Random float from <-range/2, range/2> interval\n\t\n\t\t\trandFloatSpread: function ( range ) {\n\t\n\t\t\t\treturn range * ( 0.5 - Math.random() );\n\t\n\t\t\t},\n\t\n\t\t\tdegToRad: function ( degrees ) {\n\t\n\t\t\t\treturn degrees * _Math.DEG2RAD;\n\t\n\t\t\t},\n\t\n\t\t\tradToDeg: function ( radians ) {\n\t\n\t\t\t\treturn radians * _Math.RAD2DEG;\n\t\n\t\t\t},\n\t\n\t\t\tisPowerOfTwo: function ( value ) {\n\t\n\t\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\t\n\t\t\t},\n\t\n\t\t\tnearestPowerOfTwo: function ( value ) {\n\t\n\t\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\t\n\t\t\t},\n\t\n\t\t\tnextPowerOfTwo: function ( value ) {\n\t\n\t\t\t\tvalue --;\n\t\t\t\tvalue |= value >> 1;\n\t\t\t\tvalue |= value >> 2;\n\t\t\t\tvalue |= value >> 4;\n\t\t\t\tvalue |= value >> 8;\n\t\t\t\tvalue |= value >> 16;\n\t\t\t\tvalue ++;\n\t\n\t\t\t\treturn value;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author philogb / http://blog.thejit.org/\n\t\t * @author egraether / http://egraether.com/\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t */\n\t\n\t\tfunction Vector2( x, y ) {\n\t\n\t\t\tthis.x = x || 0;\n\t\t\tthis.y = y || 0;\n\t\n\t\t}\n\t\n\t\tVector2.prototype = {\n\t\n\t\t\tconstructor: Vector2,\n\t\n\t\t\tisVector2: true,\n\t\n\t\t\tget width() {\n\t\n\t\t\t\treturn this.x;\n\t\n\t\t\t},\n\t\n\t\t\tset width( value ) {\n\t\n\t\t\t\tthis.x = value;\n\t\n\t\t\t},\n\t\n\t\t\tget height() {\n\t\n\t\t\t\treturn this.y;\n\t\n\t\t\t},\n\t\n\t\t\tset height( value ) {\n\t\n\t\t\t\tthis.y = value;\n\t\n\t\t\t},\n\t\n\t\t\t//\n\t\n\t\t\tset: function ( x, y ) {\n\t\n\t\t\t\tthis.x = x;\n\t\t\t\tthis.y = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\t\tthis.x = scalar;\n\t\t\t\tthis.y = scalar;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetX: function ( x ) {\n\t\n\t\t\t\tthis.x = x;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetY: function ( y ) {\n\t\n\t\t\t\tthis.y = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetComponent: function ( index, value ) {\n\t\n\t\t\t\tswitch ( index ) {\n\t\n\t\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetComponent: function ( index ) {\n\t\n\t\t\t\tswitch ( index ) {\n\t\n\t\t\t\t\tcase 0: return this.x;\n\t\t\t\t\tcase 1: return this.y;\n\t\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.x, this.y );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( v ) {\n\t\n\t\t\t\tthis.x = v.x;\n\t\t\t\tthis.y = v.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tadd: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.addVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x += v.x;\n\t\t\t\tthis.y += v.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScalar: function ( s ) {\n\t\n\t\t\t\tthis.x += s;\n\t\t\t\tthis.y += s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x + b.x;\n\t\t\t\tthis.y = a.y + b.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScaledVector: function ( v, s ) {\n\t\n\t\t\t\tthis.x += v.x * s;\n\t\t\t\tthis.y += v.y * s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsub: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.subVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x -= v.x;\n\t\t\t\tthis.y -= v.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsubScalar: function ( s ) {\n\t\n\t\t\t\tthis.x -= s;\n\t\t\t\tthis.y -= s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsubVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x - b.x;\n\t\t\t\tthis.y = a.y - b.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiply: function ( v ) {\n\t\n\t\t\t\tthis.x *= v.x;\n\t\t\t\tthis.y *= v.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyScalar: function ( scalar ) {\n\t\n\t\t\t\tif ( isFinite( scalar ) ) {\n\t\n\t\t\t\t\tthis.x *= scalar;\n\t\t\t\t\tthis.y *= scalar;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.x = 0;\n\t\t\t\t\tthis.y = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdivide: function ( v ) {\n\t\n\t\t\t\tthis.x /= v.x;\n\t\t\t\tthis.y /= v.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdivideScalar: function ( scalar ) {\n\t\n\t\t\t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t\t\t},\n\t\n\t\t\tmin: function ( v ) {\n\t\n\t\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\t\tthis.y = Math.min( this.y, v.y );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmax: function ( v ) {\n\t\n\t\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\t\tthis.y = Math.max( this.y, v.y );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclamp: function ( min, max ) {\n\t\n\t\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclampScalar: function () {\n\t\n\t\t\t\tvar min, max;\n\t\n\t\t\t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t\t\t\t\tif ( min === undefined ) {\n\t\n\t\t\t\t\t\tmin = new Vector2();\n\t\t\t\t\t\tmax = new Vector2();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\t\tmax.set( maxVal, maxVal );\n\t\n\t\t\t\t\treturn this.clamp( min, max );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclampLength: function ( min, max ) {\n\t\n\t\t\t\tvar length = this.length();\n\t\n\t\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t\t\t},\n\t\n\t\t\tfloor: function () {\n\t\n\t\t\t\tthis.x = Math.floor( this.x );\n\t\t\t\tthis.y = Math.floor( this.y );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tceil: function () {\n\t\n\t\t\t\tthis.x = Math.ceil( this.x );\n\t\t\t\tthis.y = Math.ceil( this.y );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tround: function () {\n\t\n\t\t\t\tthis.x = Math.round( this.x );\n\t\t\t\tthis.y = Math.round( this.y );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\troundToZero: function () {\n\t\n\t\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tnegate: function () {\n\t\n\t\t\t\tthis.x = - this.x;\n\t\t\t\tthis.y = - this.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdot: function ( v ) {\n\t\n\t\t\t\treturn this.x * v.x + this.y * v.y;\n\t\n\t\t\t},\n\t\n\t\t\tlengthSq: function () {\n\t\n\t\t\t\treturn this.x * this.x + this.y * this.y;\n\t\n\t\t\t},\n\t\n\t\t\tlength: function () {\n\t\n\t\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\t\n\t\t\t},\n\t\n\t\t\tlengthManhattan: function() {\n\t\n\t\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\t\n\t\t\t},\n\t\n\t\t\tnormalize: function () {\n\t\n\t\t\t\treturn this.divideScalar( this.length() );\n\t\n\t\t\t},\n\t\n\t\t\tangle: function () {\n\t\n\t\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\n\t\t\t\tvar angle = Math.atan2( this.y, this.x );\n\t\n\t\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\t\n\t\t\t\treturn angle;\n\t\n\t\t\t},\n\t\n\t\t\tdistanceTo: function ( v ) {\n\t\n\t\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToSquared: function ( v ) {\n\t\n\t\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\t\treturn dx * dx + dy * dy;\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToManhattan: function ( v ) {\n\t\n\t\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\t\n\t\t\t},\n\t\n\t\t\tsetLength: function ( length ) {\n\t\n\t\t\t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t\t\t},\n\t\n\t\t\tlerp: function ( v, alpha ) {\n\t\n\t\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( v ) {\n\t\n\t\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis.x = array[ offset ];\n\t\t\t\tthis.y = array[ offset + 1 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tarray[ offset ] = this.x;\n\t\t\t\tarray[ offset + 1 ] = this.y;\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tindex = index * attribute.itemSize + offset;\n\t\n\t\t\t\tthis.x = attribute.array[ index ];\n\t\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\trotateAround: function ( center, angle ) {\n\t\n\t\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\t\n\t\t\t\tvar x = this.x - center.x;\n\t\t\t\tvar y = this.y - center.y;\n\t\n\t\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\t\tthis.y = x * s + y * c + center.y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author szimek / https://github.com/szimek/\n\t\t */\n\t\n\t\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t\t\tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.name = '';\n\t\t\tthis.sourceFile = '';\n\t\n\t\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\t\tthis.mipmaps = [];\n\t\n\t\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\t\n\t\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\t\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\t\n\t\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\n\t\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\t\n\t\t\tthis.offset = new Vector2( 0, 0 );\n\t\t\tthis.repeat = new Vector2( 1, 1 );\n\t\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\n\t\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\t\tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\t\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\n\t\t}\n\t\n\t\tTexture.DEFAULT_IMAGE = undefined;\n\t\tTexture.DEFAULT_MAPPING = UVMapping;\n\t\n\t\tTexture.prototype = {\n\t\n\t\t\tconstructor: Texture,\n\t\n\t\t\tisTexture: true,\n\t\n\t\t\tset needsUpdate( value ) {\n\t\n\t\t\t\tif ( value === true ) this.version ++;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.image = source.image;\n\t\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\t\n\t\t\t\tthis.mapping = source.mapping;\n\t\n\t\t\t\tthis.wrapS = source.wrapS;\n\t\t\t\tthis.wrapT = source.wrapT;\n\t\n\t\t\t\tthis.magFilter = source.magFilter;\n\t\t\t\tthis.minFilter = source.minFilter;\n\t\n\t\t\t\tthis.anisotropy = source.anisotropy;\n\t\n\t\t\t\tthis.format = source.format;\n\t\t\t\tthis.type = source.type;\n\t\n\t\t\t\tthis.offset.copy( source.offset );\n\t\t\t\tthis.repeat.copy( source.repeat );\n\t\n\t\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\t\tthis.flipY = source.flipY;\n\t\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\t\tthis.encoding = source.encoding;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\t\n\t\t\t\t\treturn meta.textures[ this.uuid ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction getDataURL( image ) {\n\t\n\t\t\t\t\tvar canvas;\n\t\n\t\t\t\t\tif ( image.toDataURL !== undefined ) {\n\t\n\t\t\t\t\t\tcanvas = image;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\t\tcanvas.height = image.height;\n\t\n\t\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\t\n\t\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar output = {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tversion: 4.4,\n\t\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t\t},\n\t\n\t\t\t\t\tuuid: this.uuid,\n\t\t\t\t\tname: this.name,\n\t\n\t\t\t\t\tmapping: this.mapping,\n\t\n\t\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\t\n\t\t\t\t\tminFilter: this.minFilter,\n\t\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\t\tanisotropy: this.anisotropy,\n\t\n\t\t\t\t\tflipY: this.flipY\n\t\t\t\t};\n\t\n\t\t\t\tif ( this.image !== undefined ) {\n\t\n\t\t\t\t\t// TODO: Move to THREE.Image\n\t\n\t\t\t\t\tvar image = this.image;\n\t\n\t\t\t\t\tif ( image.uuid === undefined ) {\n\t\n\t\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\t\n\t\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\toutput.image = image.uuid;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\t\n\t\t\t\treturn output;\n\t\n\t\t\t},\n\t\n\t\t\tdispose: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t\t},\n\t\n\t\t\ttransformUv: function ( uv ) {\n\t\n\t\t\t\tif ( this.mapping !== UVMapping )  return;\n\t\n\t\t\t\tuv.multiply( this.repeat );\n\t\t\t\tuv.add( this.offset );\n\t\n\t\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\t\n\t\t\t\t\tswitch ( this.wrapS ) {\n\t\n\t\t\t\t\t\tcase RepeatWrapping:\n\t\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\t\n\t\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\t\n\t\t\t\t\tswitch ( this.wrapT ) {\n\t\n\t\t\t\t\t\tcase RepeatWrapping:\n\t\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\t\n\t\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.flipY ) {\n\t\n\t\t\t\t\tuv.y = 1 - uv.y;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tObject.assign( Texture.prototype, EventDispatcher.prototype );\n\t\n\t\tvar count = 0;\n\t\tfunction TextureIdCount() { return count++; }\n\t\n\t\t/**\n\t\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t\t * @author philogb / http://blog.thejit.org/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author egraether / http://egraether.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\tfunction Vector4( x, y, z, w ) {\n\t\n\t\t\tthis.x = x || 0;\n\t\t\tthis.y = y || 0;\n\t\t\tthis.z = z || 0;\n\t\t\tthis.w = ( w !== undefined ) ? w : 1;\n\t\n\t\t}\n\t\n\t\tVector4.prototype = {\n\t\n\t\t\tconstructor: Vector4,\n\t\n\t\t\tisVector4: true,\n\t\n\t\t\tset: function ( x, y, z, w ) {\n\t\n\t\t\t\tthis.x = x;\n\t\t\t\tthis.y = y;\n\t\t\t\tthis.z = z;\n\t\t\t\tthis.w = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\t\tthis.x = scalar;\n\t\t\t\tthis.y = scalar;\n\t\t\t\tthis.z = scalar;\n\t\t\t\tthis.w = scalar;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetX: function ( x ) {\n\t\n\t\t\t\tthis.x = x;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetY: function ( y ) {\n\t\n\t\t\t\tthis.y = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetZ: function ( z ) {\n\t\n\t\t\t\tthis.z = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetW: function ( w ) {\n\t\n\t\t\t\tthis.w = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetComponent: function ( index, value ) {\n\t\n\t\t\t\tswitch ( index ) {\n\t\n\t\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetComponent: function ( index ) {\n\t\n\t\t\t\tswitch ( index ) {\n\t\n\t\t\t\t\tcase 0: return this.x;\n\t\t\t\t\tcase 1: return this.y;\n\t\t\t\t\tcase 2: return this.z;\n\t\t\t\t\tcase 3: return this.w;\n\t\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( v ) {\n\t\n\t\t\t\tthis.x = v.x;\n\t\t\t\tthis.y = v.y;\n\t\t\t\tthis.z = v.z;\n\t\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tadd: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.addVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x += v.x;\n\t\t\t\tthis.y += v.y;\n\t\t\t\tthis.z += v.z;\n\t\t\t\tthis.w += v.w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScalar: function ( s ) {\n\t\n\t\t\t\tthis.x += s;\n\t\t\t\tthis.y += s;\n\t\t\t\tthis.z += s;\n\t\t\t\tthis.w += s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x + b.x;\n\t\t\t\tthis.y = a.y + b.y;\n\t\t\t\tthis.z = a.z + b.z;\n\t\t\t\tthis.w = a.w + b.w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScaledVector: function ( v, s ) {\n\t\n\t\t\t\tthis.x += v.x * s;\n\t\t\t\tthis.y += v.y * s;\n\t\t\t\tthis.z += v.z * s;\n\t\t\t\tthis.w += v.w * s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsub: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.subVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x -= v.x;\n\t\t\t\tthis.y -= v.y;\n\t\t\t\tthis.z -= v.z;\n\t\t\t\tthis.w -= v.w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsubScalar: function ( s ) {\n\t\n\t\t\t\tthis.x -= s;\n\t\t\t\tthis.y -= s;\n\t\t\t\tthis.z -= s;\n\t\t\t\tthis.w -= s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsubVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x - b.x;\n\t\t\t\tthis.y = a.y - b.y;\n\t\t\t\tthis.z = a.z - b.z;\n\t\t\t\tthis.w = a.w - b.w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyScalar: function ( scalar ) {\n\t\n\t\t\t\tif ( isFinite( scalar ) ) {\n\t\n\t\t\t\t\tthis.x *= scalar;\n\t\t\t\t\tthis.y *= scalar;\n\t\t\t\t\tthis.z *= scalar;\n\t\t\t\t\tthis.w *= scalar;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.x = 0;\n\t\t\t\t\tthis.y = 0;\n\t\t\t\t\tthis.z = 0;\n\t\t\t\t\tthis.w = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix4: function ( m ) {\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\t\tvar e = m.elements;\n\t\n\t\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdivideScalar: function ( scalar ) {\n\t\n\t\t\t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t\t\t},\n\t\n\t\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\t\n\t\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\n\t\t\t\t// q is assumed to be normalized\n\t\n\t\t\t\tthis.w = 2 * Math.acos( q.w );\n\t\n\t\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\t\n\t\t\t\tif ( s < 0.0001 ) {\n\t\n\t\t\t\t\t this.x = 1;\n\t\t\t\t\t this.y = 0;\n\t\t\t\t\t this.z = 0;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t this.x = q.x / s;\n\t\t\t\t\t this.y = q.y / s;\n\t\t\t\t\t this.z = q.z / s;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\t\n\t\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\n\t\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\t\n\t\t\t\t\tte = m.elements,\n\t\n\t\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\t\n\t\t\t\t\t// singularity found\n\t\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t\t// in leading diagonal and zero in other terms\n\t\n\t\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\t\n\t\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\n\t\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\t\n\t\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// otherwise this singularity is angle = 180\n\t\n\t\t\t\t\tangle = Math.PI;\n\t\n\t\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\t\n\t\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\t\n\t\t\t\t\t\t// m11 is the largest diagonal term\n\t\n\t\t\t\t\t\tif ( xx < epsilon ) {\n\t\n\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\t\tz = 0.707106781;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\t\tz = xz / x;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( yy > zz ) {\n\t\n\t\t\t\t\t\t// m22 is the largest diagonal term\n\t\n\t\t\t\t\t\tif ( yy < epsilon ) {\n\t\n\t\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\tz = 0.707106781;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\t\tz = yz / y;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\n\t\t\t\t\t\tif ( zz < epsilon ) {\n\t\n\t\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\t\tz = 0;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\t\ty = yz / z;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.set( x, y, z, angle );\n\t\n\t\t\t\t\treturn this; // return 180 deg rotation\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// as we have reached here there are no singularities so we can handle normally\n\t\n\t\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\t\n\t\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\t\n\t\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t\t// caught by singularity test above, but I've left it in just in case\n\t\n\t\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmin: function ( v ) {\n\t\n\t\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\t\tthis.w = Math.min( this.w, v.w );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmax: function ( v ) {\n\t\n\t\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\t\tthis.w = Math.max( this.w, v.w );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclamp: function ( min, max ) {\n\t\n\t\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclampScalar: function () {\n\t\n\t\t\t\tvar min, max;\n\t\n\t\t\t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t\t\t\t\tif ( min === undefined ) {\n\t\n\t\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\t\tmax = new Vector4();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\t\n\t\t\t\t\treturn this.clamp( min, max );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tfloor: function () {\n\t\n\t\t\t\tthis.x = Math.floor( this.x );\n\t\t\t\tthis.y = Math.floor( this.y );\n\t\t\t\tthis.z = Math.floor( this.z );\n\t\t\t\tthis.w = Math.floor( this.w );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tceil: function () {\n\t\n\t\t\t\tthis.x = Math.ceil( this.x );\n\t\t\t\tthis.y = Math.ceil( this.y );\n\t\t\t\tthis.z = Math.ceil( this.z );\n\t\t\t\tthis.w = Math.ceil( this.w );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tround: function () {\n\t\n\t\t\t\tthis.x = Math.round( this.x );\n\t\t\t\tthis.y = Math.round( this.y );\n\t\t\t\tthis.z = Math.round( this.z );\n\t\t\t\tthis.w = Math.round( this.w );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\troundToZero: function () {\n\t\n\t\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tnegate: function () {\n\t\n\t\t\t\tthis.x = - this.x;\n\t\t\t\tthis.y = - this.y;\n\t\t\t\tthis.z = - this.z;\n\t\t\t\tthis.w = - this.w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdot: function ( v ) {\n\t\n\t\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\n\t\t\t},\n\t\n\t\t\tlengthSq: function () {\n\t\n\t\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\n\t\t\t},\n\t\n\t\t\tlength: function () {\n\t\n\t\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\t\n\t\t\t},\n\t\n\t\t\tlengthManhattan: function () {\n\t\n\t\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\t\n\t\t\t},\n\t\n\t\t\tnormalize: function () {\n\t\n\t\t\t\treturn this.divideScalar( this.length() );\n\t\n\t\t\t},\n\t\n\t\t\tsetLength: function ( length ) {\n\t\n\t\t\t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t\t\t},\n\t\n\t\t\tlerp: function ( v, alpha ) {\n\t\n\t\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( v ) {\n\t\n\t\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis.x = array[ offset ];\n\t\t\t\tthis.y = array[ offset + 1 ];\n\t\t\t\tthis.z = array[ offset + 2 ];\n\t\t\t\tthis.w = array[ offset + 3 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tarray[ offset ] = this.x;\n\t\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\t\tarray[ offset + 3 ] = this.w;\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tindex = index * attribute.itemSize + offset;\n\t\n\t\t\t\tthis.x = attribute.array[ index ];\n\t\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\t\tthis.z = attribute.array[ index + 2 ];\n\t\t\t\tthis.w = attribute.array[ index + 3 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author szimek / https://github.com/szimek/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author Marius Kintel / https://github.com/kintel\n\t\t */\n\t\n\t\t/*\n\t\t In options, we can specify:\n\t\t * Texture parameters for an auto-generated target texture\n\t\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t\t*/\n\t\tfunction WebGLRenderTarget( width, height, options ) {\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\n\t\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\t\tthis.scissorTest = false;\n\t\n\t\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\t\n\t\t\toptions = options || {};\n\t\n\t\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\t\n\t\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\n\t\t}\n\t\n\t\tObject.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\t\n\t\t\tisWebGLRenderTarget: true,\n\t\n\t\t\tsetSize: function ( width, height ) {\n\t\n\t\t\t\tif ( this.width !== width || this.height !== height ) {\n\t\n\t\t\t\t\tthis.width = width;\n\t\t\t\t\tthis.height = height;\n\t\n\t\t\t\t\tthis.dispose();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\t\tthis.scissor.set( 0, 0, width, height );\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.width = source.width;\n\t\t\t\tthis.height = source.height;\n\t\n\t\t\t\tthis.viewport.copy( source.viewport );\n\t\n\t\t\t\tthis.texture = source.texture.clone();\n\t\n\t\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\t\tthis.depthTexture = source.depthTexture;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdispose: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com\n\t\t */\n\t\n\t\tfunction WebGLRenderTargetCube( width, height, options ) {\n\t\n\t\t\tWebGLRenderTarget.call( this, width, height, options );\n\t\n\t\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\t\tthis.activeMipMapLevel = 0;\n\t\n\t\t}\n\t\n\t\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\t\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\t\n\t\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Quaternion( x, y, z, w ) {\n\t\n\t\t\tthis._x = x || 0;\n\t\t\tthis._y = y || 0;\n\t\t\tthis._z = z || 0;\n\t\t\tthis._w = ( w !== undefined ) ? w : 1;\n\t\n\t\t}\n\t\n\t\tQuaternion.prototype = {\n\t\n\t\t\tconstructor: Quaternion,\n\t\n\t\t\tget x () {\n\t\n\t\t\t\treturn this._x;\n\t\n\t\t\t},\n\t\n\t\t\tset x ( value ) {\n\t\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tget y () {\n\t\n\t\t\t\treturn this._y;\n\t\n\t\t\t},\n\t\n\t\t\tset y ( value ) {\n\t\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tget z () {\n\t\n\t\t\t\treturn this._z;\n\t\n\t\t\t},\n\t\n\t\t\tset z ( value ) {\n\t\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tget w () {\n\t\n\t\t\t\treturn this._w;\n\t\n\t\t\t},\n\t\n\t\t\tset w ( value ) {\n\t\n\t\t\t\tthis._w = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( x, y, z, w ) {\n\t\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\tthis._w = w;\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( quaternion ) {\n\t\n\t\t\t\tthis._x = quaternion.x;\n\t\t\t\tthis._y = quaternion.y;\n\t\t\t\tthis._z = quaternion.z;\n\t\t\t\tthis._w = quaternion.w;\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromEuler: function ( euler, update ) {\n\t\n\t\t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t\t//\tcontent/SpinCalc.m\n\t\n\t\t\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\t\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\t\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\t\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\t\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\t\t\tvar s3 = Math.sin( euler._z / 2 );\n\t\n\t\t\t\tvar order = euler.order;\n\t\n\t\t\t\tif ( order === 'XYZ' ) {\n\t\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t\t\t\t} else if ( order === 'YXZ' ) {\n\t\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t\t\t\t} else if ( order === 'ZXY' ) {\n\t\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t\t\t\t} else if ( order === 'ZYX' ) {\n\t\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t\t\t\t} else if ( order === 'YZX' ) {\n\t\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t\t\t\t} else if ( order === 'XZY' ) {\n\t\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromAxisAngle: function ( axis, angle ) {\n\t\n\t\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\n\t\t\t\t// assumes axis is normalized\n\t\n\t\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\t\n\t\t\t\tthis._x = axis.x * s;\n\t\t\t\tthis._y = axis.y * s;\n\t\t\t\tthis._z = axis.z * s;\n\t\t\t\tthis._w = Math.cos( halfAngle );\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromRotationMatrix: function ( m ) {\n\t\n\t\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\n\t\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\t\tvar te = m.elements,\n\t\n\t\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\t\n\t\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\t\ts;\n\t\n\t\t\t\tif ( trace > 0 ) {\n\t\n\t\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\t\n\t\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\t\n\t\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\t\n\t\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\t\n\t\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\t\n\t\t\t\t} else if ( m22 > m33 ) {\n\t\n\t\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\t\n\t\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\t\n\t\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\t\tthis._z = 0.25 * s;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromUnitVectors: function () {\n\t\n\t\t\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\t\n\t\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\n\t\t\t\tvar v1, r;\n\t\n\t\t\t\tvar EPS = 0.000001;\n\t\n\t\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\t\n\t\t\t\t\tif ( r < EPS ) {\n\t\n\t\t\t\t\t\tr = 0;\n\t\n\t\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\t\n\t\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis._x = v1.x;\n\t\t\t\t\tthis._y = v1.y;\n\t\t\t\t\tthis._z = v1.z;\n\t\t\t\t\tthis._w = r;\n\t\n\t\t\t\t\treturn this.normalize();\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tinverse: function () {\n\t\n\t\t\t\treturn this.conjugate().normalize();\n\t\n\t\t\t},\n\t\n\t\t\tconjugate: function () {\n\t\n\t\t\t\tthis._x *= - 1;\n\t\t\t\tthis._y *= - 1;\n\t\t\t\tthis._z *= - 1;\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdot: function ( v ) {\n\t\n\t\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\n\t\t\t},\n\t\n\t\t\tlengthSq: function () {\n\t\n\t\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\n\t\t\t},\n\t\n\t\t\tlength: function () {\n\t\n\t\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\t\n\t\t\t},\n\t\n\t\t\tnormalize: function () {\n\t\n\t\t\t\tvar l = this.length();\n\t\n\t\t\t\tif ( l === 0 ) {\n\t\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = 1;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tl = 1 / l;\n\t\n\t\t\t\t\tthis._x = this._x * l;\n\t\t\t\t\tthis._y = this._y * l;\n\t\t\t\t\tthis._z = this._z * l;\n\t\t\t\t\tthis._w = this._w * l;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiply: function ( q, p ) {\n\t\n\t\t\t\tif ( p !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\t\treturn this.multiplyQuaternions( q, p );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.multiplyQuaternions( this, q );\n\t\n\t\t\t},\n\t\n\t\t\tpremultiply: function ( q ) {\n\t\n\t\t\t\treturn this.multiplyQuaternions( q, this );\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyQuaternions: function ( a, b ) {\n\t\n\t\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\n\t\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\t\n\t\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tslerp: function ( qb, t ) {\n\t\n\t\t\t\tif ( t === 0 ) return this;\n\t\t\t\tif ( t === 1 ) return this.copy( qb );\n\t\n\t\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\t\n\t\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\t\n\t\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\t\n\t\t\t\tif ( cosHalfTheta < 0 ) {\n\t\n\t\t\t\t\tthis._w = - qb._w;\n\t\t\t\t\tthis._x = - qb._x;\n\t\t\t\t\tthis._y = - qb._y;\n\t\t\t\t\tthis._z = - qb._z;\n\t\n\t\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.copy( qb );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\t\n\t\t\t\t\tthis._w = w;\n\t\t\t\t\tthis._x = x;\n\t\t\t\t\tthis._y = y;\n\t\t\t\t\tthis._z = z;\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\t\n\t\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\t\n\t\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\t\n\t\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( quaternion ) {\n\t\n\t\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis._x = array[ offset ];\n\t\t\t\tthis._y = array[ offset + 1 ];\n\t\t\t\tthis._z = array[ offset + 2 ];\n\t\t\t\tthis._w = array[ offset + 3 ];\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tarray[ offset ] = this._x;\n\t\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\t\tarray[ offset + 3 ] = this._w;\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\tonChange: function ( callback ) {\n\t\n\t\t\t\tthis.onChangeCallback = callback;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tonChangeCallback: function () {}\n\t\n\t\t};\n\t\n\t\tObject.assign( Quaternion, {\n\t\n\t\t\tslerp: function( qa, qb, qm, t ) {\n\t\n\t\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\t\n\t\t\t},\n\t\n\t\t\tslerpFlat: function(\n\t\t\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\t\n\t\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\n\t\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\t\n\t\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\t\n\t\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\t\n\t\t\t\t\tvar s = 1 - t,\n\t\n\t\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\n\t\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\t\tsqrSin = 1 - cos * cos;\n\t\n\t\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\t\n\t\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\t\n\t\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar tDir = t * dir;\n\t\n\t\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\t\tw0 = w0 * s + w1 * tDir;\n\t\n\t\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\t\tif ( s === 1 - t ) {\n\t\n\t\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\t\n\t\t\t\t\t\tx0 *= f;\n\t\t\t\t\t\ty0 *= f;\n\t\t\t\t\t\tz0 *= f;\n\t\t\t\t\t\tw0 *= f;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdst[ dstOffset ] = x0;\n\t\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author *kile / http://kile.stravaganza.org/\n\t\t * @author philogb / http://blog.thejit.org/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author egraether / http://egraether.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\tfunction Vector3( x, y, z ) {\n\t\n\t\t\tthis.x = x || 0;\n\t\t\tthis.y = y || 0;\n\t\t\tthis.z = z || 0;\n\t\n\t\t}\n\t\n\t\tVector3.prototype = {\n\t\n\t\t\tconstructor: Vector3,\n\t\n\t\t\tisVector3: true,\n\t\n\t\t\tset: function ( x, y, z ) {\n\t\n\t\t\t\tthis.x = x;\n\t\t\t\tthis.y = y;\n\t\t\t\tthis.z = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\t\tthis.x = scalar;\n\t\t\t\tthis.y = scalar;\n\t\t\t\tthis.z = scalar;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetX: function ( x ) {\n\t\n\t\t\t\tthis.x = x;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetY: function ( y ) {\n\t\n\t\t\t\tthis.y = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetZ: function ( z ) {\n\t\n\t\t\t\tthis.z = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetComponent: function ( index, value ) {\n\t\n\t\t\t\tswitch ( index ) {\n\t\n\t\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetComponent: function ( index ) {\n\t\n\t\t\t\tswitch ( index ) {\n\t\n\t\t\t\t\tcase 0: return this.x;\n\t\t\t\t\tcase 1: return this.y;\n\t\t\t\t\tcase 2: return this.z;\n\t\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( v ) {\n\t\n\t\t\t\tthis.x = v.x;\n\t\t\t\tthis.y = v.y;\n\t\t\t\tthis.z = v.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tadd: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.addVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x += v.x;\n\t\t\t\tthis.y += v.y;\n\t\t\t\tthis.z += v.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScalar: function ( s ) {\n\t\n\t\t\t\tthis.x += s;\n\t\t\t\tthis.y += s;\n\t\t\t\tthis.z += s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x + b.x;\n\t\t\t\tthis.y = a.y + b.y;\n\t\t\t\tthis.z = a.z + b.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScaledVector: function ( v, s ) {\n\t\n\t\t\t\tthis.x += v.x * s;\n\t\t\t\tthis.y += v.y * s;\n\t\t\t\tthis.z += v.z * s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsub: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.subVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x -= v.x;\n\t\t\t\tthis.y -= v.y;\n\t\t\t\tthis.z -= v.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsubScalar: function ( s ) {\n\t\n\t\t\t\tthis.x -= s;\n\t\t\t\tthis.y -= s;\n\t\t\t\tthis.z -= s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsubVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x - b.x;\n\t\t\t\tthis.y = a.y - b.y;\n\t\t\t\tthis.z = a.z - b.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiply: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.multiplyVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.x *= v.x;\n\t\t\t\tthis.y *= v.y;\n\t\t\t\tthis.z *= v.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyScalar: function ( scalar ) {\n\t\n\t\t\t\tif ( isFinite( scalar ) ) {\n\t\n\t\t\t\t\tthis.x *= scalar;\n\t\t\t\t\tthis.y *= scalar;\n\t\t\t\t\tthis.z *= scalar;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.x = 0;\n\t\t\t\t\tthis.y = 0;\n\t\t\t\t\tthis.z = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyVectors: function ( a, b ) {\n\t\n\t\t\t\tthis.x = a.x * b.x;\n\t\t\t\tthis.y = a.y * b.y;\n\t\t\t\tthis.z = a.z * b.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyEuler: function () {\n\t\n\t\t\t\tvar quaternion;\n\t\n\t\t\t\treturn function applyEuler( euler ) {\n\t\n\t\t\t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tapplyAxisAngle: function () {\n\t\n\t\t\t\tvar quaternion;\n\t\n\t\t\t\treturn function applyAxisAngle( axis, angle ) {\n\t\n\t\t\t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tapplyMatrix3: function ( m ) {\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\t\tvar e = m.elements;\n\t\n\t\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix4: function ( m ) {\n\t\n\t\t\t\t// input: THREE.Matrix4 affine matrix\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\t\tvar e = m.elements;\n\t\n\t\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyProjection: function ( m ) {\n\t\n\t\t\t\t// input: THREE.Matrix4 projection matrix\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\t\tvar e = m.elements;\n\t\t\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\t\n\t\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyQuaternion: function ( q ) {\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\t\n\t\t\t\t// calculate quat * vector\n\t\n\t\t\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\t\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\t\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\t\n\t\t\t\t// calculate result * inverse quat\n\t\n\t\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tproject: function () {\n\t\n\t\t\t\tvar matrix;\n\t\n\t\t\t\treturn function project( camera ) {\n\t\n\t\t\t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\t\treturn this.applyProjection( matrix );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tunproject: function () {\n\t\n\t\t\t\tvar matrix;\n\t\n\t\t\t\treturn function unproject( camera ) {\n\t\n\t\t\t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\t\treturn this.applyProjection( matrix );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttransformDirection: function ( m ) {\n\t\n\t\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t\t// vector interpreted as a direction\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\t\tvar e = m.elements;\n\t\n\t\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\t\n\t\t\t\treturn this.normalize();\n\t\n\t\t\t},\n\t\n\t\t\tdivide: function ( v ) {\n\t\n\t\t\t\tthis.x /= v.x;\n\t\t\t\tthis.y /= v.y;\n\t\t\t\tthis.z /= v.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdivideScalar: function ( scalar ) {\n\t\n\t\t\t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t\t\t},\n\t\n\t\t\tmin: function ( v ) {\n\t\n\t\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\t\tthis.z = Math.min( this.z, v.z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmax: function ( v ) {\n\t\n\t\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\t\tthis.z = Math.max( this.z, v.z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclamp: function ( min, max ) {\n\t\n\t\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclampScalar: function () {\n\t\n\t\t\t\tvar min, max;\n\t\n\t\t\t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t\t\t\t\tif ( min === undefined ) {\n\t\n\t\t\t\t\t\tmin = new Vector3();\n\t\t\t\t\t\tmax = new Vector3();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\t\n\t\t\t\t\treturn this.clamp( min, max );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclampLength: function ( min, max ) {\n\t\n\t\t\t\tvar length = this.length();\n\t\n\t\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t\t\t},\n\t\n\t\t\tfloor: function () {\n\t\n\t\t\t\tthis.x = Math.floor( this.x );\n\t\t\t\tthis.y = Math.floor( this.y );\n\t\t\t\tthis.z = Math.floor( this.z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tceil: function () {\n\t\n\t\t\t\tthis.x = Math.ceil( this.x );\n\t\t\t\tthis.y = Math.ceil( this.y );\n\t\t\t\tthis.z = Math.ceil( this.z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tround: function () {\n\t\n\t\t\t\tthis.x = Math.round( this.x );\n\t\t\t\tthis.y = Math.round( this.y );\n\t\t\t\tthis.z = Math.round( this.z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\troundToZero: function () {\n\t\n\t\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tnegate: function () {\n\t\n\t\t\t\tthis.x = - this.x;\n\t\t\t\tthis.y = - this.y;\n\t\t\t\tthis.z = - this.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdot: function ( v ) {\n\t\n\t\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\n\t\t\t},\n\t\n\t\t\tlengthSq: function () {\n\t\n\t\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\n\t\t\t},\n\t\n\t\t\tlength: function () {\n\t\n\t\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\t\n\t\t\t},\n\t\n\t\t\tlengthManhattan: function () {\n\t\n\t\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\t\n\t\t\t},\n\t\n\t\t\tnormalize: function () {\n\t\n\t\t\t\treturn this.divideScalar( this.length() );\n\t\n\t\t\t},\n\t\n\t\t\tsetLength: function ( length ) {\n\t\n\t\t\t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t\t\t},\n\t\n\t\t\tlerp: function ( v, alpha ) {\n\t\n\t\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t\t\t},\n\t\n\t\t\tcross: function ( v, w ) {\n\t\n\t\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\t\treturn this.crossVectors( v, w );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\n\t\t\t\tthis.x = y * v.z - z * v.y;\n\t\t\t\tthis.y = z * v.x - x * v.z;\n\t\t\t\tthis.z = x * v.y - y * v.x;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcrossVectors: function ( a, b ) {\n\t\n\t\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\t\n\t\t\t\tthis.x = ay * bz - az * by;\n\t\t\t\tthis.y = az * bx - ax * bz;\n\t\t\t\tthis.z = ax * by - ay * bx;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tprojectOnVector: function ( vector ) {\n\t\n\t\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t\t\t},\n\t\n\t\t\tprojectOnPlane: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function projectOnPlane( planeNormal ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\t\n\t\t\t\t\treturn this.sub( v1 );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\treflect: function () {\n\t\n\t\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t\t// normal is assumed to have unit length\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function reflect( normal ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tangleTo: function ( v ) {\n\t\n\t\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\t\n\t\t\t\t// clamp, to handle numerical problems\n\t\n\t\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceTo: function ( v ) {\n\t\n\t\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToSquared: function ( v ) {\n\t\n\t\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\t\n\t\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToManhattan: function ( v ) {\n\t\n\t\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\t\n\t\t\t},\n\t\n\t\t\tsetFromSpherical: function( s ) {\n\t\n\t\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\t\n\t\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromMatrixPosition: function ( m ) {\n\t\n\t\t\t\treturn this.setFromMatrixColumn( m, 3 );\n\t\n\t\t\t},\n\t\n\t\t\tsetFromMatrixScale: function ( m ) {\n\t\n\t\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\t\n\t\t\t\tthis.x = sx;\n\t\t\t\tthis.y = sy;\n\t\t\t\tthis.z = sz;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromMatrixColumn: function ( m, index ) {\n\t\n\t\t\t\tif ( typeof m === 'number' ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\t\t\tvar temp = m;\n\t\t\t\t\tm = index;\n\t\t\t\t\tindex = temp;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.fromArray( m.elements, index * 4 );\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( v ) {\n\t\n\t\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis.x = array[ offset ];\n\t\t\t\tthis.y = array[ offset + 1 ];\n\t\t\t\tthis.z = array[ offset + 2 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tarray[ offset ] = this.x;\n\t\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\t\tarray[ offset + 2 ] = this.z;\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tindex = index * attribute.itemSize + offset;\n\t\n\t\t\t\tthis.x = attribute.array[ index ];\n\t\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\t\tthis.z = attribute.array[ index + 2 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t\t * @author philogb / http://blog.thejit.org/\n\t\t * @author jordi_ros / http://plattsoft.com\n\t\t * @author D1plo1d / http://github.com/D1plo1d\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author timknip / http://www.floorplanner.com/\n\t\t * @author bhouston / http://clara.io\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\tfunction Matrix4() {\n\t\n\t\t\tthis.elements = new Float32Array( [\n\t\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t] );\n\t\n\t\t\tif ( arguments.length > 0 ) {\n\t\n\t\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tMatrix4.prototype = {\n\t\n\t\t\tconstructor: Matrix4,\n\t\n\t\t\tisMatrix4: true,\n\t\n\t\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tidentity: function () {\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\t1, 0, 0, 0,\n\t\t\t\t\t0, 1, 0, 0,\n\t\t\t\t\t0, 0, 1, 0,\n\t\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new Matrix4().fromArray( this.elements );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( m ) {\n\t\n\t\t\t\tthis.elements.set( m.elements );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyPosition: function ( m ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\t\n\t\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\t\tte[ 14 ] = me[ 14 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t\t\t\tthis.set(\n\t\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t\t0,       0,       0,       1\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\textractRotation: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function extractRotation( m ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t\t\t\t\tvar te = this.elements;\n\t\t\t\t\tvar me = m.elements;\n\t\n\t\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\t\n\t\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\n\t\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\n\t\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tmakeRotationFromEuler: function ( euler ) {\n\t\n\t\t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\t\n\t\t\t\tif ( euler.order === 'XYZ' ) {\n\t\n\t\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\t\tte[ 8 ] = d;\n\t\n\t\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\t\tte[ 9 ] = - b * c;\n\t\n\t\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t\t} else if ( euler.order === 'YXZ' ) {\n\t\n\t\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\t\tte[ 8 ] = a * d;\n\t\n\t\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\t\tte[ 9 ] = - b;\n\t\n\t\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t\t} else if ( euler.order === 'ZXY' ) {\n\t\n\t\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\t\tte[ 8 ] = de + cf * b;\n\t\n\t\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\t\tte[ 9 ] = df - ce * b;\n\t\n\t\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\t\tte[ 6 ] = b;\n\t\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t\t} else if ( euler.order === 'ZYX' ) {\n\t\n\t\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\t\tte[ 8 ] = ae * d + bf;\n\t\n\t\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\t\tte[ 9 ] = af * d - be;\n\t\n\t\t\t\t\tte[ 2 ] = - d;\n\t\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t\t} else if ( euler.order === 'YZX' ) {\n\t\n\t\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\t\tte[ 8 ] = bc * f + ad;\n\t\n\t\t\t\t\tte[ 1 ] = f;\n\t\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\t\tte[ 9 ] = - b * e;\n\t\n\t\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\t\tte[ 10 ] = ac - bd * f;\n\t\n\t\t\t\t} else if ( euler.order === 'XZY' ) {\n\t\n\t\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\t\tte[ 4 ] = - f;\n\t\t\t\t\tte[ 8 ] = d * e;\n\t\n\t\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\t\tte[ 9 ] = ad * f - bc;\n\t\n\t\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\t\tte[ 10 ] = bd * f + ac;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// last column\n\t\t\t\tte[ 3 ] = 0;\n\t\t\t\tte[ 7 ] = 0;\n\t\t\t\tte[ 11 ] = 0;\n\t\n\t\t\t\t// bottom row\n\t\t\t\tte[ 12 ] = 0;\n\t\t\t\tte[ 13 ] = 0;\n\t\t\t\tte[ 14 ] = 0;\n\t\t\t\tte[ 15 ] = 1;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeRotationFromQuaternion: function ( q ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\t\n\t\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\t\tte[ 4 ] = xy - wz;\n\t\t\t\tte[ 8 ] = xz + wy;\n\t\n\t\t\t\tte[ 1 ] = xy + wz;\n\t\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\t\tte[ 9 ] = yz - wx;\n\t\n\t\t\t\tte[ 2 ] = xz - wy;\n\t\t\t\tte[ 6 ] = yz + wx;\n\t\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\t\n\t\t\t\t// last column\n\t\t\t\tte[ 3 ] = 0;\n\t\t\t\tte[ 7 ] = 0;\n\t\t\t\tte[ 11 ] = 0;\n\t\n\t\t\t\t// bottom row\n\t\t\t\tte[ 12 ] = 0;\n\t\t\t\tte[ 13 ] = 0;\n\t\t\t\tte[ 14 ] = 0;\n\t\t\t\tte[ 15 ] = 1;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tlookAt: function () {\n\t\n\t\t\t\tvar x, y, z;\n\t\n\t\t\t\treturn function lookAt( eye, target, up ) {\n\t\n\t\t\t\t\tif ( x === undefined ) {\n\t\n\t\t\t\t\t\tx = new Vector3();\n\t\t\t\t\t\ty = new Vector3();\n\t\t\t\t\t\tz = new Vector3();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\t\tz.subVectors( eye, target ).normalize();\n\t\n\t\t\t\t\tif ( z.lengthSq() === 0 ) {\n\t\n\t\t\t\t\t\tz.z = 1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t\t\t\t\tif ( x.lengthSq() === 0 ) {\n\t\n\t\t\t\t\t\tz.z += 0.0001;\n\t\t\t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ty.crossVectors( z, x );\n\t\n\t\n\t\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tmultiply: function ( m, n ) {\n\t\n\t\t\t\tif ( n !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\t\treturn this.multiplyMatrices( m, n );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.multiplyMatrices( this, m );\n\t\n\t\t\t},\n\t\n\t\t\tpremultiply: function ( m ) {\n\t\n\t\t\t\treturn this.multiplyMatrices( m, this );\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyMatrices: function ( a, b ) {\n\t\n\t\t\t\tvar ae = a.elements;\n\t\t\t\tvar be = b.elements;\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\t\n\t\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\t\n\t\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\n\t\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\n\t\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\n\t\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyToArray: function ( a, b, r ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tthis.multiplyMatrices( a, b );\n\t\n\t\t\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\t\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\t\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\t\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyScalar: function ( s ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyToVector3Array: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\t\tif ( length === undefined ) length = array.length;\n\t\n\t\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\t\t\tv1.toArray( array, j );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn array;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tapplyToBuffer: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t\t\t\t\t\tv1.applyMatrix4( this );\n\t\n\t\t\t\t\t\tbuffer.setXYZ( j, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn buffer;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tdeterminant: function () {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\t\n\t\t\t\t//TODO: make this more efficient\n\t\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\t\n\t\t\t\treturn (\n\t\t\t\t\tn41 * (\n\t\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t\t) +\n\t\t\t\t\tn42 * (\n\t\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t\t) +\n\t\t\t\t\tn43 * (\n\t\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t\t) +\n\t\t\t\t\tn44 * (\n\t\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t\t)\n\t\n\t\t\t\t);\n\t\n\t\t\t},\n\t\n\t\t\ttranspose: function () {\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar tmp;\n\t\n\t\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\t\n\t\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t\t\t\treturn this.toArray( array, offset );\n\t\n\t\t\t},\n\t\n\t\t\tgetPosition: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function getPosition() {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\n\t\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tsetPosition: function ( v ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tte[ 12 ] = v.x;\n\t\t\t\tte[ 13 ] = v.y;\n\t\t\t\tte[ 14 ] = v.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\t\n\t\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements,\n\t\n\t\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\t\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\n\t\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\n\t\t\t\tif ( det === 0 ) {\n\t\n\t\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t\t\t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t\t\t\t\t\tthrow new Error( msg );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tconsole.warn( msg );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn this.identity();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar detInv = 1 / det;\n\t\n\t\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\t\n\t\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\t\n\t\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\t\n\t\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tscale: function ( v ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar x = v.x, y = v.y, z = v.z;\n\t\n\t\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetMaxScaleOnAxis: function () {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\t\n\t\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\t\n\t\t\t},\n\t\n\t\t\tmakeTranslation: function ( x, y, z ) {\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\t1, 0, 0, x,\n\t\t\t\t\t0, 1, 0, y,\n\t\t\t\t\t0, 0, 1, z,\n\t\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeRotationX: function ( theta ) {\n\t\n\t\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\t1, 0,  0, 0,\n\t\t\t\t\t0, c, - s, 0,\n\t\t\t\t\t0, s,  c, 0,\n\t\t\t\t\t0, 0,  0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeRotationY: function ( theta ) {\n\t\n\t\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\t c, 0, s, 0,\n\t\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t\t- s, 0, c, 0,\n\t\t\t\t\t 0, 0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeRotationZ: function ( theta ) {\n\t\n\t\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\tc, - s, 0, 0,\n\t\t\t\t\ts,  c, 0, 0,\n\t\t\t\t\t0,  0, 1, 0,\n\t\t\t\t\t0,  0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeRotationAxis: function ( axis, angle ) {\n\t\n\t\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\n\t\t\t\tvar c = Math.cos( angle );\n\t\t\t\tvar s = Math.sin( angle );\n\t\t\t\tvar t = 1 - c;\n\t\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\t\tvar tx = t * x, ty = t * y;\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\t return this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeScale: function ( x, y, z ) {\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\tx, 0, 0, 0,\n\t\t\t\t\t0, y, 0, 0,\n\t\t\t\t\t0, 0, z, 0,\n\t\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcompose: function ( position, quaternion, scale ) {\n\t\n\t\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\t\tthis.scale( scale );\n\t\t\t\tthis.setPosition( position );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdecompose: function () {\n\t\n\t\t\t\tvar vector, matrix;\n\t\n\t\t\t\treturn function decompose( position, quaternion, scale ) {\n\t\n\t\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\t\tvector = new Vector3();\n\t\t\t\t\t\tmatrix = new Matrix4();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\t\n\t\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\t\tvar det = this.determinant();\n\t\t\t\t\tif ( det < 0 ) {\n\t\n\t\t\t\t\t\tsx = - sx;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\t\tposition.z = te[ 14 ];\n\t\n\t\t\t\t\t// scale the rotation part\n\t\n\t\t\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\t\n\t\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\t\tvar invSZ = 1 / sz;\n\t\n\t\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\t\n\t\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\t\n\t\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\t\n\t\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\t\n\t\t\t\t\tscale.x = sx;\n\t\t\t\t\tscale.y = sy;\n\t\t\t\t\tscale.z = sz;\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar x = 2 * near / ( right - left );\n\t\t\t\tvar y = 2 * near / ( top - bottom );\n\t\n\t\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\t\tvar d = - 2 * far * near / ( far - near );\n\t\n\t\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakePerspective: function ( fov, aspect, near, far ) {\n\t\n\t\t\t\tvar ymax = near * Math.tan( _Math.DEG2RAD * fov * 0.5 );\n\t\t\t\tvar ymin = - ymax;\n\t\t\t\tvar xmin = ymin * aspect;\n\t\t\t\tvar xmax = ymax * aspect;\n\t\n\t\t\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\t\n\t\t\t},\n\t\n\t\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar w = 1.0 / ( right - left );\n\t\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\t\tvar p = 1.0 / ( far - near );\n\t\n\t\t\t\tvar x = ( right + left ) * w;\n\t\t\t\tvar y = ( top + bottom ) * h;\n\t\t\t\tvar z = ( far + near ) * p;\n\t\n\t\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( matrix ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = matrix.elements;\n\t\n\t\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\t\n\t\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tfor( var i = 0; i < 16; i ++ ) {\n\t\n\t\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\n\t\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\n\t\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\t\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\t\n\t\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\n\t\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t\t\tthis.flipY = false;\n\t\n\t\t}\n\t\n\t\tCubeTexture.prototype = Object.create( Texture.prototype );\n\t\tCubeTexture.prototype.constructor = CubeTexture;\n\t\n\t\tCubeTexture.prototype.isCubeTexture = true;\n\t\n\t\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\treturn this.image;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tthis.image = value;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author tschw\n\t\t *\n\t\t * Uniforms of a program.\n\t\t * Those form a tree structure with a special top-level container for the root,\n\t\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t\t *\n\t\t *\n\t\t * Properties of inner nodes including the top-level container:\n\t\t *\n\t\t * .seq - array of nested uniforms\n\t\t * .map - nested uniforms by name\n\t\t *\n\t\t *\n\t\t * Methods of all nodes except the top-level container:\n\t\t *\n\t\t * .setValue( gl, value, [renderer] )\n\t\t *\n\t\t * \t\tuploads a uniform value(s)\n\t\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t\t *\n\t\t *\n\t\t * Static methods of the top-level container (renderer factorizations):\n\t\t *\n\t\t * .upload( gl, seq, values, renderer )\n\t\t *\n\t\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t\t *\n\t\t * .seqWithValue( seq, values ) : filteredSeq\n\t\t *\n\t\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t\t *\n\t\t *\n\t\t * Methods of the top-level container (renderer factorizations):\n\t\t *\n\t\t * .setValue( gl, name, value )\n\t\t *\n\t\t * \t\tsets uniform with  name 'name' to 'value'\n\t\t *\n\t\t * .set( gl, obj, prop )\n\t\t *\n\t\t * \t\tsets uniform from object and property with same name than uniform\n\t\t *\n\t\t * .setOptional( gl, obj, prop )\n\t\t *\n\t\t * \t\tlike .set for an optional property of the object\n\t\t *\n\t\t */\n\t\n\t\tvar emptyTexture = new Texture();\n\t\tvar emptyCubeTexture = new CubeTexture();\n\t\n\t\t// --- Base for inner nodes (including the root) ---\n\t\n\t\tfunction UniformContainer() {\n\t\n\t\t\tthis.seq = [];\n\t\t\tthis.map = {};\n\t\n\t\t}\n\t\n\t\t// --- Utilities ---\n\t\n\t\t// Array Caches (provide typed arrays for temporary by size)\n\t\n\t\tvar arrayCacheF32 = [];\n\t\tvar arrayCacheI32 = [];\n\t\n\t\t// Flattening for arrays of vectors and matrices\n\t\n\t\tfunction flatten( array, nBlocks, blockSize ) {\n\t\n\t\t\tvar firstElem = array[ 0 ];\n\t\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t// see http://jacksondunstan.com/articles/983\n\t\n\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\tr = arrayCacheF32[ n ];\n\t\n\t\t\tif ( r === undefined ) {\n\t\n\t\t\t\tr = new Float32Array( n );\n\t\t\t\tarrayCacheF32[ n ] = r;\n\t\n\t\t\t}\n\t\n\t\t\tif ( nBlocks !== 0 ) {\n\t\n\t\t\t\tfirstElem.toArray( r, 0 );\n\t\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\t\n\t\t\t\t\toffset += blockSize;\n\t\t\t\t\tarray[ i ].toArray( r, offset );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn r;\n\t\n\t\t}\n\t\n\t\t// Texture unit allocation\n\t\n\t\tfunction allocTexUnits( renderer, n ) {\n\t\n\t\t\tvar r = arrayCacheI32[ n ];\n\t\n\t\t\tif ( r === undefined ) {\n\t\n\t\t\t\tr = new Int32Array( n );\n\t\t\t\tarrayCacheI32[ n ] = r;\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\t\n\t\t\treturn r;\n\t\n\t\t}\n\t\n\t\t// --- Setters ---\n\t\n\t\t// Note: Defining these methods externally, because they come in a bunch\n\t\t// and this way their names minify.\n\t\n\t\t// Single scalar\n\t\n\t\tfunction setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\t\tfunction setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\t\n\t\t// Single float vector (from flat array or THREE.VectorN)\n\t\n\t\tfunction setValue2fv( gl, v ) {\n\t\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\t\n\t\t}\n\t\n\t\tfunction setValue3fv( gl, v ) {\n\t\n\t\t\tif ( v.x !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\telse if ( v.r !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\telse\n\t\t\t\tgl.uniform3fv( this.addr, v );\n\t\n\t\t}\n\t\n\t\tfunction setValue4fv( gl, v ) {\n\t\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\t\n\t\t}\n\t\n\t\t// Single matrix (from flat array or MatrixN)\n\t\n\t\tfunction setValue2fm( gl, v ) {\n\t\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\t\n\t\t}\n\t\n\t\tfunction setValue3fm( gl, v ) {\n\t\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\t\n\t\t}\n\t\n\t\tfunction setValue4fm( gl, v ) {\n\t\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\t\n\t\t}\n\t\n\t\t// Single texture (2D / Cube)\n\t\n\t\tfunction setValueT1( gl, v, renderer ) {\n\t\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\t\n\t\t}\n\t\n\t\tfunction setValueT6( gl, v, renderer ) {\n\t\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\t\n\t\t}\n\t\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\t\n\t\tfunction setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\t\tfunction setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\t\tfunction setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\t\n\t\t// Helper to pick the right setter for the singular case\n\t\n\t\tfunction getSingularSetter( type ) {\n\t\n\t\t\tswitch ( type ) {\n\t\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\t\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\t\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Array of scalars\n\t\n\t\tfunction setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\t\tfunction setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\t\n\t\t// Array of vectors (flat or from THREE classes)\n\t\n\t\tfunction setValueV2a( gl, v ) {\n\t\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\t\n\t\t}\n\t\n\t\tfunction setValueV3a( gl, v ) {\n\t\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\t\n\t\t}\n\t\n\t\tfunction setValueV4a( gl, v ) {\n\t\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\t\n\t\t}\n\t\n\t\t// Array of matrices (flat or from THREE clases)\n\t\n\t\tfunction setValueM2a( gl, v ) {\n\t\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\t\n\t\t}\n\t\n\t\tfunction setValueM3a( gl, v ) {\n\t\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\t\n\t\t}\n\t\n\t\tfunction setValueM4a( gl, v ) {\n\t\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\t\n\t\t}\n\t\n\t\t// Array of textures (2D / Cube)\n\t\n\t\tfunction setValueT1a( gl, v, renderer ) {\n\t\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\t\n\t\t\tgl.uniform1iv( this.addr, units );\n\t\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setValueT6a( gl, v, renderer ) {\n\t\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\t\n\t\t\tgl.uniform1iv( this.addr, units );\n\t\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\t\n\t\tfunction getPureArraySetter( type ) {\n\t\n\t\t\tswitch ( type ) {\n\t\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\t\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\t\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\t\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// --- Uniform Classes ---\n\t\n\t\tfunction SingleUniform( id, activeInfo, addr ) {\n\t\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\t\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\t\n\t\t}\n\t\n\t\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\t\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.size = activeInfo.size;\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\t\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\t\n\t\t}\n\t\n\t\tfunction StructuredUniform( id ) {\n\t\n\t\t\tthis.id = id;\n\t\n\t\t\tUniformContainer.call( this ); // mix-in\n\t\n\t\t}\n\t\n\t\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\t\n\t\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t\t// are not allowed in structured uniforms.\n\t\n\t\t\tvar seq = this.seq;\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ];\n\t\t\t\tu.setValue( gl, value[ u.id ] );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// --- Top-level ---\n\t\n\t\t// Parser - builds up the property tree from the path strings\n\t\n\t\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\t\n\t\t// extracts\n\t\t// \t- the identifier (member name or array index)\n\t\t//  - followed by an optional right bracket (found when array index)\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t//\n\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t// in the uniform names.\n\t\n\t\tfunction addUniform( container, uniformObject ) {\n\t\n\t\t\tcontainer.seq.push( uniformObject );\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\t\n\t\t}\n\t\n\t\tfunction parseUniform( activeInfo, addr, container ) {\n\t\n\t\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length;\n\t\n\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\tRePathPart.lastIndex = 0;\n\t\n\t\t\tfor (; ;) {\n\t\n\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\t\n\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\tsubscript = match[ 3 ];\n\t\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\t\n\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\n\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t} else {\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\n\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\tnext = map[ id ];\n\t\n\t\t\t\t\tif ( next === undefined ) {\n\t\n\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\taddUniform( container, next );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcontainer = next;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Root Container\n\t\n\t\tfunction WebGLUniforms( gl, program, renderer ) {\n\t\n\t\t\tUniformContainer.call( this );\n\t\n\t\t\tthis.renderer = renderer;\n\t\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\t\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\tpath = info.name,\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\t\n\t\t\t\tparseUniform( info, addr, this );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\t\n\t\t\tvar u = this.map[ name ];\n\t\n\t\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\t\n\t\t\tvar u = this.map[ name ];\n\t\n\t\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\t\n\t\t\tvar v = object[ name ];\n\t\n\t\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\t\n\t\t};\n\t\n\t\n\t\t// Static interface\n\t\n\t\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ],\n\t\t\t\t\tv = values[ u.id ];\n\t\n\t\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\n\t\t\t\t\tu.setValue( gl, v.value, renderer );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\t\n\t\t\tvar r = [];\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ];\n\t\t\t\tif ( u.id in values ) r.push( u );\n\t\n\t\t\t}\n\t\n\t\t\treturn r;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * Uniform Utilities\n\t\t */\n\t\n\t\tvar UniformsUtils = {\n\t\n\t\t\tmerge: function ( uniforms ) {\n\t\n\t\t\t\tvar merged = {};\n\t\n\t\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\t\n\t\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\t\n\t\t\t\t\tfor ( var p in tmp ) {\n\t\n\t\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn merged;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function ( uniforms_src ) {\n\t\n\t\t\t\tvar uniforms_dst = {};\n\t\n\t\t\t\tfor ( var u in uniforms_src ) {\n\t\n\t\t\t\t\tuniforms_dst[ u ] = {};\n\t\n\t\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\t\n\t\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\t\n\t\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\t\n\t\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\t\n\t\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\t\n\t\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn uniforms_dst;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\t\n\t\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\t\n\t\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\t\n\t\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\t\n\t\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\t\n\t\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\t\n\t\tvar bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\t\n\t\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\t\n\t\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\t\n\t\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\t\n\t\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\t\n\t\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\t\n\t\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\t\n\t\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\t\n\t\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\t\n\t\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\t\n\t\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\t\n\t\tvar defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\t\n\t\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\t\n\t\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\t\n\t\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\t\n\t\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\t\n\t\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\t\n\t\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\t\n\t\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\t\n\t\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\t\n\t\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\t\n\t\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\t\n\t\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t\tvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\t\n\t\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\t\n\t\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\t\n\t\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\t\n\t\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\t\n\t\tvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\t\n\t\tvar logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\t\n\t\tvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\t\n\t\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\t\n\t\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\t\n\t\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\t\n\t\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\t\n\t\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\t\n\t\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\t\n\t\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\t\n\t\tvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\t\n\t\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\t\n\t\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\t\n\t\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\t\n\t\tvar project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\t\n\t\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\t\n\t\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\t\n\t\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\t\n\t\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\t\n\t\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\t\n\t\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\t\n\t\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\t\n\t\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\t\n\t\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\t\n\t\tvar tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\t\n\t\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\t\n\t\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\t\n\t\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\t\n\t\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\t\n\t\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\t\n\t\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\t\n\t\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\t\n\t\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t\tvar distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\t\n\t\tvar distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\t\n\t\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\t\n\t\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\t\n\t\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t\tvar normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\t\n\t\tvar normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t\tvar shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\t\n\t\tvar shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t\tvar ShaderChunk = {\n\t\t\talphamap_fragment: alphamap_fragment,\n\t\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\t\talphatest_fragment: alphatest_fragment,\n\t\t\taomap_fragment: aomap_fragment,\n\t\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\t\tbegin_vertex: begin_vertex,\n\t\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\t\tbsdfs: bsdfs,\n\t\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\t\tcolor_fragment: color_fragment,\n\t\t\tcolor_pars_fragment: color_pars_fragment,\n\t\t\tcolor_pars_vertex: color_pars_vertex,\n\t\t\tcolor_vertex: color_vertex,\n\t\t\tcommon: common,\n\t\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\t\temissivemap_fragment: emissivemap_fragment,\n\t\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\t\tencodings_fragment: encodings_fragment,\n\t\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\t\tenvmap_fragment: envmap_fragment,\n\t\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\t\tenvmap_vertex: envmap_vertex,\n\t\t\tfog_fragment: fog_fragment,\n\t\t\tfog_pars_fragment: fog_pars_fragment,\n\t\t\tlightmap_fragment: lightmap_fragment,\n\t\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\t\tlights_pars: lights_pars,\n\t\t\tlights_phong_fragment: lights_phong_fragment,\n\t\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\t\tlights_physical_fragment: lights_physical_fragment,\n\t\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\t\tlights_template: lights_template,\n\t\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\t\tmap_fragment: map_fragment,\n\t\t\tmap_pars_fragment: map_pars_fragment,\n\t\t\tmap_particle_fragment: map_particle_fragment,\n\t\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\t\tnormal_flip: normal_flip,\n\t\t\tnormal_fragment: normal_fragment,\n\t\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\t\tpacking: packing,\n\t\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\t\tproject_vertex: project_vertex,\n\t\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\t\tshadowmap_vertex: shadowmap_vertex,\n\t\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\t\tskinbase_vertex: skinbase_vertex,\n\t\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\t\tskinning_vertex: skinning_vertex,\n\t\t\tskinnormal_vertex: skinnormal_vertex,\n\t\t\tspecularmap_fragment: specularmap_fragment,\n\t\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\t\ttonemapping_fragment: tonemapping_fragment,\n\t\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\t\tuv_pars_fragment: uv_pars_fragment,\n\t\t\tuv_pars_vertex: uv_pars_vertex,\n\t\t\tuv_vertex: uv_vertex,\n\t\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\t\tuv2_vertex: uv2_vertex,\n\t\t\tworldpos_vertex: worldpos_vertex,\n\t\n\t\t\tcube_frag: cube_frag,\n\t\t\tcube_vert: cube_vert,\n\t\t\tdepth_frag: depth_frag,\n\t\t\tdepth_vert: depth_vert,\n\t\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\t\tequirect_frag: equirect_frag,\n\t\t\tequirect_vert: equirect_vert,\n\t\t\tlinedashed_frag: linedashed_frag,\n\t\t\tlinedashed_vert: linedashed_vert,\n\t\t\tmeshbasic_frag: meshbasic_frag,\n\t\t\tmeshbasic_vert: meshbasic_vert,\n\t\t\tmeshlambert_frag: meshlambert_frag,\n\t\t\tmeshlambert_vert: meshlambert_vert,\n\t\t\tmeshphong_frag: meshphong_frag,\n\t\t\tmeshphong_vert: meshphong_vert,\n\t\t\tmeshphysical_frag: meshphysical_frag,\n\t\t\tmeshphysical_vert: meshphysical_vert,\n\t\t\tnormal_frag: normal_frag,\n\t\t\tnormal_vert: normal_vert,\n\t\t\tpoints_frag: points_frag,\n\t\t\tpoints_vert: points_vert,\n\t\t\tshadow_frag: shadow_frag,\n\t\t\tshadow_vert: shadow_vert\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Color( r, g, b ) {\n\t\n\t\t\tif ( g === undefined && b === undefined ) {\n\t\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set( r );\n\t\n\t\t\t}\n\t\n\t\t\treturn this.setRGB( r, g, b );\n\t\n\t\t}\n\t\n\t\tColor.prototype = {\n\t\n\t\t\tconstructor: Color,\n\t\n\t\t\tisColor: true,\n\t\n\t\t\tr: 1, g: 1, b: 1,\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tif ( (value && value.isColor) ) {\n\t\n\t\t\t\t\tthis.copy( value );\n\t\n\t\t\t\t} else if ( typeof value === 'number' ) {\n\t\n\t\t\t\t\tthis.setHex( value );\n\t\n\t\t\t\t} else if ( typeof value === 'string' ) {\n\t\n\t\t\t\t\tthis.setStyle( value );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\t\tthis.r = scalar;\n\t\t\t\tthis.g = scalar;\n\t\t\t\tthis.b = scalar;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetHex: function ( hex ) {\n\t\n\t\t\t\thex = Math.floor( hex );\n\t\n\t\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\t\tthis.b = ( hex & 255 ) / 255;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetRGB: function ( r, g, b ) {\n\t\n\t\t\t\tthis.r = r;\n\t\t\t\tthis.g = g;\n\t\t\t\tthis.b = b;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetHSL: function () {\n\t\n\t\t\t\tfunction hue2rgb( p, q, t ) {\n\t\n\t\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\t\treturn p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn function setHSL( h, s, l ) {\n\t\n\t\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\t\n\t\t\t\t\tif ( s === 0 ) {\n\t\n\t\t\t\t\t\tthis.r = this.g = this.b = l;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\t\tvar q = ( 2 * l ) - p;\n\t\n\t\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tsetStyle: function ( style ) {\n\t\n\t\t\t\tfunction handleAlpha( string ) {\n\t\n\t\t\t\t\tif ( string === undefined ) return;\n\t\n\t\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\tvar m;\n\t\n\t\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\t\n\t\t\t\t\t// rgb / hsl\n\t\n\t\t\t\t\tvar color;\n\t\t\t\t\tvar name = m[ 1 ];\n\t\t\t\t\tvar components = m[ 2 ];\n\t\n\t\t\t\t\tswitch ( name ) {\n\t\n\t\t\t\t\t\tcase 'rgb':\n\t\t\t\t\t\tcase 'rgba':\n\t\n\t\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\t\n\t\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t\t\t\t\t\t\t\treturn this;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\t\n\t\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t\t\t\t\t\t\t\treturn this;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'hsl':\n\t\t\t\t\t\tcase 'hsla':\n\t\n\t\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\t\n\t\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\t\n\t\t\t\t\t// hex color\n\t\n\t\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\t\tvar size = hex.length;\n\t\n\t\t\t\t\tif ( size === 3 ) {\n\t\n\t\t\t\t\t\t// #ff0\n\t\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\t\n\t\t\t\t\t\treturn this;\n\t\n\t\t\t\t\t} else if ( size === 6 ) {\n\t\n\t\t\t\t\t\t// #ff0000\n\t\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\t\n\t\t\t\t\t\treturn this;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( style && style.length > 0 ) {\n\t\n\t\t\t\t\t// color keywords\n\t\t\t\t\tvar hex = ColorKeywords[ style ];\n\t\n\t\t\t\t\tif ( hex !== undefined ) {\n\t\n\t\t\t\t\t\t// red\n\t\t\t\t\t\tthis.setHex( hex );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// unknown color\n\t\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( color ) {\n\t\n\t\t\t\tthis.r = color.r;\n\t\t\t\tthis.g = color.g;\n\t\t\t\tthis.b = color.b;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\t\n\t\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\t\n\t\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\t\n\t\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tconvertGammaToLinear: function () {\n\t\n\t\t\t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t\t\t\tthis.r = r * r;\n\t\t\t\tthis.g = g * g;\n\t\t\t\tthis.b = b * b;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tconvertLinearToGamma: function () {\n\t\n\t\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\t\tthis.b = Math.sqrt( this.b );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetHex: function () {\n\t\n\t\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\t\n\t\t\t},\n\t\n\t\t\tgetHexString: function () {\n\t\n\t\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\t\n\t\t\t},\n\t\n\t\t\tgetHSL: function ( optionalTarget ) {\n\t\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\n\t\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\t\n\t\t\t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t\t\t\tvar max = Math.max( r, g, b );\n\t\t\t\tvar min = Math.min( r, g, b );\n\t\n\t\t\t\tvar hue, saturation;\n\t\t\t\tvar lightness = ( min + max ) / 2.0;\n\t\n\t\t\t\tif ( min === max ) {\n\t\n\t\t\t\t\thue = 0;\n\t\t\t\t\tsaturation = 0;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar delta = max - min;\n\t\n\t\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\t\n\t\t\t\t\tswitch ( max ) {\n\t\n\t\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\thue /= 6;\n\t\n\t\t\t\t}\n\t\n\t\t\t\thsl.h = hue;\n\t\t\t\thsl.s = saturation;\n\t\t\t\thsl.l = lightness;\n\t\n\t\t\t\treturn hsl;\n\t\n\t\t\t},\n\t\n\t\t\tgetStyle: function () {\n\t\n\t\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\t\n\t\t\t},\n\t\n\t\t\toffsetHSL: function ( h, s, l ) {\n\t\n\t\t\t\tvar hsl = this.getHSL();\n\t\n\t\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\t\n\t\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tadd: function ( color ) {\n\t\n\t\t\t\tthis.r += color.r;\n\t\t\t\tthis.g += color.g;\n\t\t\t\tthis.b += color.b;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddColors: function ( color1, color2 ) {\n\t\n\t\t\t\tthis.r = color1.r + color2.r;\n\t\t\t\tthis.g = color1.g + color2.g;\n\t\t\t\tthis.b = color1.b + color2.b;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddScalar: function ( s ) {\n\t\n\t\t\t\tthis.r += s;\n\t\t\t\tthis.g += s;\n\t\t\t\tthis.b += s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsub: function( color ) {\n\t\n\t\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiply: function ( color ) {\n\t\n\t\t\t\tthis.r *= color.r;\n\t\t\t\tthis.g *= color.g;\n\t\t\t\tthis.b *= color.b;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmultiplyScalar: function ( s ) {\n\t\n\t\t\t\tthis.r *= s;\n\t\t\t\tthis.g *= s;\n\t\t\t\tthis.b *= s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tlerp: function ( color, alpha ) {\n\t\n\t\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( c ) {\n\t\n\t\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis.r = array[ offset ];\n\t\t\t\tthis.g = array[ offset + 1 ];\n\t\t\t\tthis.b = array[ offset + 2 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tarray[ offset ] = this.r;\n\t\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\t\tarray[ offset + 2 ] = this.b;\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function () {\n\t\n\t\t\t\treturn this.getHex();\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\t\n\t\t/**\n\t\t * Uniforms library for shared webgl shaders\n\t\t */\n\t\n\t\tvar UniformsLib = {\n\t\n\t\t\tcommon: {\n\t\n\t\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\t\topacity: { value: 1.0 },\n\t\n\t\t\t\tmap: { value: null },\n\t\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\t\n\t\t\t\tspecularMap: { value: null },\n\t\t\t\talphaMap: { value: null },\n\t\n\t\t\t\tenvMap: { value: null },\n\t\t\t\tflipEnvMap: { value: - 1 },\n\t\t\t\treflectivity: { value: 1.0 },\n\t\t\t\trefractionRatio: { value: 0.98 }\n\t\n\t\t\t},\n\t\n\t\t\taomap: {\n\t\n\t\t\t\taoMap: { value: null },\n\t\t\t\taoMapIntensity: { value: 1 }\n\t\n\t\t\t},\n\t\n\t\t\tlightmap: {\n\t\n\t\t\t\tlightMap: { value: null },\n\t\t\t\tlightMapIntensity: { value: 1 }\n\t\n\t\t\t},\n\t\n\t\t\temissivemap: {\n\t\n\t\t\t\temissiveMap: { value: null }\n\t\n\t\t\t},\n\t\n\t\t\tbumpmap: {\n\t\n\t\t\t\tbumpMap: { value: null },\n\t\t\t\tbumpScale: { value: 1 }\n\t\n\t\t\t},\n\t\n\t\t\tnormalmap: {\n\t\n\t\t\t\tnormalMap: { value: null },\n\t\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\t\n\t\t\t},\n\t\n\t\t\tdisplacementmap: {\n\t\n\t\t\t\tdisplacementMap: { value: null },\n\t\t\t\tdisplacementScale: { value: 1 },\n\t\t\t\tdisplacementBias: { value: 0 }\n\t\n\t\t\t},\n\t\n\t\t\troughnessmap: {\n\t\n\t\t\t\troughnessMap: { value: null }\n\t\n\t\t\t},\n\t\n\t\t\tmetalnessmap: {\n\t\n\t\t\t\tmetalnessMap: { value: null }\n\t\n\t\t\t},\n\t\n\t\t\tfog: {\n\t\n\t\t\t\tfogDensity: { value: 0.00025 },\n\t\t\t\tfogNear: { value: 1 },\n\t\t\t\tfogFar: { value: 2000 },\n\t\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\t\n\t\t\t},\n\t\n\t\t\tlights: {\n\t\n\t\t\t\tambientLightColor: { value: [] },\n\t\n\t\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {},\n\t\n\t\t\t\t\tshadow: {},\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t} },\n\t\n\t\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\t\tdirectionalShadowMatrix: { value: [] },\n\t\n\t\t\t\tspotLights: { value: [], properties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {},\n\t\n\t\t\t\t\tshadow: {},\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t} },\n\t\n\t\t\t\tspotShadowMap: { value: [] },\n\t\t\t\tspotShadowMatrix: { value: [] },\n\t\n\t\t\t\tpointLights: { value: [], properties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {},\n\t\n\t\t\t\t\tshadow: {},\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t} },\n\t\n\t\t\t\tpointShadowMap: { value: [] },\n\t\t\t\tpointShadowMatrix: { value: [] },\n\t\n\t\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t} }\n\t\n\t\t\t},\n\t\n\t\t\tpoints: {\n\t\n\t\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\t\topacity: { value: 1.0 },\n\t\t\t\tsize: { value: 1.0 },\n\t\t\t\tscale: { value: 1.0 },\n\t\t\t\tmap: { value: null },\n\t\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t */\n\t\n\t\tvar ShaderLib = {\n\t\n\t\t\tbasic: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.common,\n\t\t\t\t\tUniformsLib.aomap,\n\t\t\t\t\tUniformsLib.fog\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\n\t\t\t},\n\t\n\t\t\tlambert: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.common,\n\t\t\t\t\tUniformsLib.aomap,\n\t\t\t\t\tUniformsLib.lightmap,\n\t\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\t\tUniformsLib.fog,\n\t\t\t\t\tUniformsLib.lights,\n\t\n\t\t\t\t\t{\n\t\t\t\t\t\temissive : { value: new Color( 0x000000 ) }\n\t\t\t\t\t}\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\n\t\t\t},\n\t\n\t\t\tphong: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.common,\n\t\t\t\t\tUniformsLib.aomap,\n\t\t\t\t\tUniformsLib.lightmap,\n\t\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\t\tUniformsLib.normalmap,\n\t\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t\tUniformsLib.fog,\n\t\t\t\t\tUniformsLib.lights,\n\t\n\t\t\t\t\t{\n\t\t\t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t\t\t\t\t\tspecular : { value: new Color( 0x111111 ) },\n\t\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t\t}\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\n\t\t\t},\n\t\n\t\t\tstandard: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.common,\n\t\t\t\t\tUniformsLib.aomap,\n\t\t\t\t\tUniformsLib.lightmap,\n\t\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\t\tUniformsLib.normalmap,\n\t\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\t\tUniformsLib.fog,\n\t\t\t\t\tUniformsLib.lights,\n\t\n\t\t\t\t\t{\n\t\t\t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\t\tmetalness: { value: 0 },\n\t\t\t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n\t\t\t\t\t}\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t\t\t},\n\t\n\t\t\tpoints: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.points,\n\t\t\t\t\tUniformsLib.fog\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\n\t\t\t},\n\t\n\t\t\tdashed: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.common,\n\t\t\t\t\tUniformsLib.fog,\n\t\n\t\t\t\t\t{\n\t\t\t\t\t\tscale    : { value: 1 },\n\t\t\t\t\t\tdashSize : { value: 1 },\n\t\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t\t}\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\n\t\t\t},\n\t\n\t\t\tdepth: {\n\t\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\t\tUniformsLib.common,\n\t\t\t\t\tUniformsLib.displacementmap\n\t\n\t\t\t\t] ),\n\t\n\t\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\n\t\t\t},\n\t\n\t\t\tnormal: {\n\t\n\t\t\t\tuniforms: {\n\t\n\t\t\t\t\topacity : { value: 1.0 }\n\t\n\t\t\t\t},\n\t\n\t\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\n\t\t\t},\n\t\n\t\t\t/* -------------------------------------------------------------------------\n\t\t\t//\tCube map shader\n\t\t\t ------------------------------------------------------------------------- */\n\t\n\t\t\tcube: {\n\t\n\t\t\t\tuniforms: {\n\t\t\t\t\ttCube: { value: null },\n\t\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t},\n\t\n\t\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\n\t\t\t},\n\t\n\t\t\t/* -------------------------------------------------------------------------\n\t\t\t//\tCube map shader\n\t\t\t ------------------------------------------------------------------------- */\n\t\n\t\t\tequirect: {\n\t\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: { value: null },\n\t\t\t\t\ttFlip: { value: - 1 }\n\t\t\t\t},\n\t\n\t\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\n\t\t\t},\n\t\n\t\t\tdistanceRGBA: {\n\t\n\t\t\t\tuniforms: {\n\t\n\t\t\t\t\tlightPos: { value: new Vector3() }\n\t\n\t\t\t\t},\n\t\n\t\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tShaderLib.physical = {\n\t\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\n\t\t\t\tShaderLib.standard.uniforms,\n\t\n\t\t\t\t{\n\t\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t\t}\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Box2( min, max ) {\n\t\n\t\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\t\n\t\t}\n\t\n\t\tBox2.prototype = {\n\t\n\t\t\tconstructor: Box2,\n\t\n\t\t\tset: function ( min, max ) {\n\t\n\t\t\t\tthis.min.copy( min );\n\t\t\t\tthis.max.copy( max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromPoints: function ( points ) {\n\t\n\t\t\t\tthis.makeEmpty();\n\t\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromCenterAndSize: function () {\n\t\n\t\t\t\tvar v1 = new Vector2();\n\t\n\t\t\t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( box ) {\n\t\n\t\t\t\tthis.min.copy( box.min );\n\t\t\t\tthis.max.copy( box.max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeEmpty: function () {\n\t\n\t\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\t\tthis.max.x = this.max.y = - Infinity;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tisEmpty: function () {\n\t\n\t\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\t\n\t\t\t},\n\t\n\t\t\tgetCenter: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t\t\t},\n\t\n\t\t\tgetSize: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t\t\t},\n\t\n\t\t\texpandByPoint: function ( point ) {\n\t\n\t\t\t\tthis.min.min( point );\n\t\t\t\tthis.max.max( point );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\texpandByVector: function ( vector ) {\n\t\n\t\t\t\tthis.min.sub( vector );\n\t\t\t\tthis.max.add( vector );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\texpandByScalar: function ( scalar ) {\n\t\n\t\t\t\tthis.min.addScalar( - scalar );\n\t\t\t\tthis.max.addScalar( scalar );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t},\n\t\n\t\t\tcontainsBox: function ( box ) {\n\t\n\t\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t},\n\t\n\t\t\tgetParameter: function ( point, optionalTarget ) {\n\t\n\t\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t\t// has a size dimension of 0.\n\t\n\t\t\t\tvar result = optionalTarget || new Vector2();\n\t\n\t\t\t\treturn result.set(\n\t\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t\t);\n\t\n\t\t\t},\n\t\n\t\t\tintersectsBox: function ( box ) {\n\t\n\t\t\t\t// using 6 splitting planes to rule out intersections.\n\t\n\t\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t},\n\t\n\t\t\tclampPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToPoint: function () {\n\t\n\t\t\t\tvar v1 = new Vector2();\n\t\n\t\t\t\treturn function distanceToPoint( point ) {\n\t\n\t\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersect: function ( box ) {\n\t\n\t\t\t\tthis.min.max( box.min );\n\t\t\t\tthis.max.min( box.max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tunion: function ( box ) {\n\t\n\t\t\t\tthis.min.min( box.min );\n\t\t\t\tthis.max.max( box.max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttranslate: function ( offset ) {\n\t\n\t\t\t\tthis.min.add( offset );\n\t\t\t\tthis.max.add( offset );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( box ) {\n\t\n\t\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction LensFlarePlugin( renderer, flares ) {\n\t\n\t\t\tvar gl = renderer.context;\n\t\t\tvar state = renderer.state;\n\t\n\t\t\tvar vertexBuffer, elementBuffer;\n\t\t\tvar shader, program, attributes, uniforms;\n\t\n\t\t\tvar tempTexture, occlusionTexture;\n\t\n\t\t\tfunction init() {\n\t\n\t\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t\t- 1, - 1,  0, 0,\n\t\t\t\t\t 1, - 1,  1, 0,\n\t\t\t\t\t 1,  1,  1, 1,\n\t\t\t\t\t- 1,  1,  0, 1\n\t\t\t\t] );\n\t\n\t\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t0, 2, 3\n\t\t\t\t] );\n\t\n\t\t\t\t// buffers\n\t\n\t\t\t\tvertexBuffer     = gl.createBuffer();\n\t\t\t\telementBuffer    = gl.createBuffer();\n\t\n\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t\t\t\t// textures\n\t\n\t\t\t\ttempTexture      = gl.createTexture();\n\t\t\t\tocclusionTexture = gl.createTexture();\n\t\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t\t\t\tshader = {\n\t\n\t\t\t\t\tvertexShader: [\n\t\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\t\"uniform float rotation;\",\n\t\n\t\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\n\t\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\t\"attribute vec2 uv;\",\n\t\n\t\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\t\"varying float vVisibility;\",\n\t\n\t\t\t\t\t\t\"void main() {\",\n\t\n\t\t\t\t\t\t\t\"vUV = uv;\",\n\t\n\t\t\t\t\t\t\t\"vec2 pos = position;\",\n\t\n\t\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\t\n\t\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\t\n\t\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\t\n\t\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\t\n\t\t\t\t\t\t\t\"}\",\n\t\n\t\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\t\n\t\t\t\t\t\t\"}\"\n\t\n\t\t\t\t\t].join( \"\\n\" ),\n\t\n\t\t\t\t\tfragmentShader: [\n\t\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\t\"uniform vec3 color;\",\n\t\n\t\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\t\"varying float vVisibility;\",\n\t\n\t\t\t\t\t\t\"void main() {\",\n\t\n\t\t\t\t\t\t\t// pink square\n\t\n\t\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\t\n\t\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\t\n\t\t\t\t\t\t\t// restore\n\t\n\t\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\t\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\t\n\t\t\t\t\t\t\t// flare\n\t\n\t\t\t\t\t\t\t\"} else {\",\n\t\n\t\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\t\n\t\t\t\t\t\t\t\"}\",\n\t\n\t\t\t\t\t\t\"}\"\n\t\n\t\t\t\t\t].join( \"\\n\" )\n\t\n\t\t\t\t};\n\t\n\t\t\t\tprogram = createProgram( shader );\n\t\n\t\t\t\tattributes = {\n\t\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t\t\t};\n\t\n\t\t\t\tuniforms = {\n\t\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\t * Render lens flares\n\t\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t\t *         reads these back and calculates occlusion.\n\t\t\t */\n\t\n\t\t\tthis.render = function ( scene, camera, viewport ) {\n\t\n\t\t\t\tif ( flares.length === 0 ) return;\n\t\n\t\t\t\tvar tempPosition = new Vector3();\n\t\n\t\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\t\n\t\t\t\tvar size = 16 / viewport.w,\n\t\t\t\t\tscale = new Vector2( size * invAspect, size );\n\t\n\t\t\t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t\t\t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\t\n\t\t\t\tvar validArea = new Box2();\n\t\n\t\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\t\n\t\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\t\tinit();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgl.useProgram( program );\n\t\n\t\t\t\tstate.initAttributes();\n\t\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t\t// setup gl and common used attribs/uniforms\n\t\n\t\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\t\tgl.uniform1i( uniforms.map, 1 );\n\t\n\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\t\tstate.setDepthWrite( false );\n\t\n\t\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\t\tscale.set( size * invAspect, size );\n\t\n\t\t\t\t\t// calc object screen position\n\t\n\t\t\t\t\tvar flare = flares[ i ];\n\t\n\t\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\t\n\t\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\t\n\t\t\t\t\t// setup arrays for gl programs\n\t\n\t\t\t\t\tscreenPosition.copy( tempPosition );\n\t\n\t\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\t\n\t\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\t\n\t\t\t\t\t// screen cull\n\t\n\t\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\t\n\t\t\t\t\t\t// save current RGB to temp texture\n\t\n\t\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t\t\t\t\t\t// render pink quad\n\t\n\t\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\n\t\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t\t\t\t\t\t// copy result to occlusionMap\n\t\n\t\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t\t\t\t\t\t// restore graphics\n\t\n\t\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t\t\t\t\t\t// update object positions\n\t\n\t\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\t\n\t\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\t\n\t\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tflare.updateLensFlares();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// render flares\n\t\n\t\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\t\tstate.enable( gl.BLEND );\n\t\n\t\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\t\n\t\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\t\n\t\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\t\n\t\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\t\n\t\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\t\tscale.y = size;\n\t\n\t\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\t\n\t\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\t\n\t\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\t\n\t\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// restore gl\n\t\n\t\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\t\tstate.setDepthWrite( true );\n\t\n\t\t\t\trenderer.resetGLState();\n\t\n\t\t\t};\n\t\n\t\t\tfunction createProgram( shader ) {\n\t\n\t\t\t\tvar program = gl.createProgram();\n\t\n\t\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\n\t\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\t\n\t\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\t\n\t\t\t\tgl.compileShader( fragmentShader );\n\t\t\t\tgl.compileShader( vertexShader );\n\t\n\t\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\t\tgl.attachShader( program, vertexShader );\n\t\n\t\t\t\tgl.linkProgram( program );\n\t\n\t\t\t\treturn program;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction SpritePlugin( renderer, sprites ) {\n\t\n\t\t\tvar gl = renderer.context;\n\t\t\tvar state = renderer.state;\n\t\n\t\t\tvar vertexBuffer, elementBuffer;\n\t\t\tvar program, attributes, uniforms;\n\t\n\t\t\tvar texture;\n\t\n\t\t\t// decompose matrixWorld\n\t\n\t\t\tvar spritePosition = new Vector3();\n\t\t\tvar spriteRotation = new Quaternion();\n\t\t\tvar spriteScale = new Vector3();\n\t\n\t\t\tfunction init() {\n\t\n\t\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t\t\t- 0.5,   0.5,  0, 1\n\t\t\t\t] );\n\t\n\t\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t0, 2, 3\n\t\t\t\t] );\n\t\n\t\t\t\tvertexBuffer  = gl.createBuffer();\n\t\t\t\telementBuffer = gl.createBuffer();\n\t\n\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t\t\t\tprogram = createProgram();\n\t\n\t\t\t\tattributes = {\n\t\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t\t\t};\n\t\n\t\t\t\tuniforms = {\n\t\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\t\n\t\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\t\n\t\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\t\n\t\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\t\n\t\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\t\n\t\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t\t\t};\n\t\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = 8;\n\t\t\t\tcanvas.height = 8;\n\t\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.fillStyle = 'white';\n\t\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\t\n\t\t\t\ttexture = new Texture( canvas );\n\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\t\tif ( sprites.length === 0 ) return;\n\t\n\t\t\t\t// setup gl\n\t\n\t\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\t\tinit();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgl.useProgram( program );\n\t\n\t\t\t\tstate.initAttributes();\n\t\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\t\tstate.enable( gl.BLEND );\n\t\n\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\t\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tgl.uniform1i( uniforms.map, 0 );\n\t\n\t\t\t\tvar oldFogType = 0;\n\t\t\t\tvar sceneFogType = 0;\n\t\t\t\tvar fog = scene.fog;\n\t\n\t\t\t\tif ( fog ) {\n\t\n\t\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\t\n\t\t\t\t\tif ( (fog && fog.isFog) ) {\n\t\n\t\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\t\n\t\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\t\toldFogType = 1;\n\t\t\t\t\t\tsceneFogType = 1;\n\t\n\t\t\t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\t\n\t\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\t\n\t\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\t\toldFogType = 2;\n\t\t\t\t\t\tsceneFogType = 2;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\t\toldFogType = 0;\n\t\t\t\t\tsceneFogType = 0;\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\t// update positions and sort\n\t\n\t\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar sprite = sprites[ i ];\n\t\n\t\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tsprites.sort( painterSortStable );\n\t\n\t\t\t\t// render all sprites\n\t\n\t\t\t\tvar scale = [];\n\t\n\t\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\t\tvar material = sprite.material;\n\t\n\t\t\t\t\tif ( material.visible === false ) continue;\n\t\n\t\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\t\n\t\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\t\n\t\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\t\tscale[ 1 ] = spriteScale.y;\n\t\n\t\t\t\t\tvar fogType = 0;\n\t\n\t\t\t\t\tif ( scene.fog && material.fog ) {\n\t\n\t\t\t\t\t\tfogType = sceneFogType;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( oldFogType !== fogType ) {\n\t\n\t\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\t\toldFogType = fogType;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\t\n\t\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\t\n\t\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\t\t\tstate.setDepthWrite( material.depthWrite );\n\t\n\t\t\t\t\tif ( material.map ) {\n\t\n\t\t\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\trenderer.setTexture2D( texture, 0 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// restore gl\n\t\n\t\t\t\tstate.enable( gl.CULL_FACE );\n\t\n\t\t\t\trenderer.resetGLState();\n\t\n\t\t\t};\n\t\n\t\t\tfunction createProgram() {\n\t\n\t\t\t\tvar program = gl.createProgram();\n\t\n\t\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\n\t\t\t\tgl.shaderSource( vertexShader, [\n\t\n\t\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t'uniform float rotation;',\n\t\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t\t'uniform vec2 uvScale;',\n\t\n\t\t\t\t\t'attribute vec2 position;',\n\t\t\t\t\t'attribute vec2 uv;',\n\t\n\t\t\t\t\t'varying vec2 vUV;',\n\t\n\t\t\t\t\t'void main() {',\n\t\n\t\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\t\n\t\t\t\t\t\t'vec2 alignedPosition = position * scale;',\n\t\n\t\t\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\t\n\t\t\t\t\t\t'vec4 finalPosition;',\n\t\n\t\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\t\n\t\t\t\t\t\t'gl_Position = finalPosition;',\n\t\n\t\t\t\t\t'}'\n\t\n\t\t\t\t].join( '\\n' ) );\n\t\n\t\t\t\tgl.shaderSource( fragmentShader, [\n\t\n\t\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t\t\t\t\t'uniform vec3 color;',\n\t\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t\t'uniform float opacity;',\n\t\n\t\t\t\t\t'uniform int fogType;',\n\t\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t\t'uniform float fogNear;',\n\t\t\t\t\t'uniform float fogFar;',\n\t\t\t\t\t'uniform float alphaTest;',\n\t\n\t\t\t\t\t'varying vec2 vUV;',\n\t\n\t\t\t\t\t'void main() {',\n\t\n\t\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\t\n\t\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\t\n\t\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\t\n\t\t\t\t\t\t'if ( fogType > 0 ) {',\n\t\n\t\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t\t\t'float fogFactor = 0.0;',\n\t\n\t\t\t\t\t\t\t'if ( fogType == 1 ) {',\n\t\n\t\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\t\n\t\t\t\t\t\t\t'} else {',\n\t\n\t\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\t\n\t\t\t\t\t\t\t'}',\n\t\n\t\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\t\n\t\t\t\t\t\t'}',\n\t\n\t\t\t\t\t'}'\n\t\n\t\t\t\t].join( '\\n' ) );\n\t\n\t\t\t\tgl.compileShader( vertexShader );\n\t\t\t\tgl.compileShader( fragmentShader );\n\t\n\t\t\t\tgl.attachShader( program, vertexShader );\n\t\t\t\tgl.attachShader( program, fragmentShader );\n\t\n\t\t\t\tgl.linkProgram( program );\n\t\n\t\t\t\treturn program;\n\t\n\t\t\t}\n\t\n\t\t\tfunction painterSortStable( a, b ) {\n\t\n\t\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t\t\t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn b.id - a.id;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Material() {\n\t\n\t\t\tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\n\t\t\tthis.fog = true;\n\t\t\tthis.lights = true;\n\t\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\t\n\t\t\tthis.opacity = 1;\n\t\t\tthis.transparent = false;\n\t\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\n\t\t\tthis.colorWrite = true;\n\t\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\t\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\n\t\t\tthis.alphaTest = 0;\n\t\t\tthis.premultipliedAlpha = false;\n\t\n\t\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\t\n\t\t\tthis.visible = true;\n\t\n\t\t\tthis._needsUpdate = true;\n\t\n\t\t}\n\t\n\t\tMaterial.prototype = {\n\t\n\t\t\tconstructor: Material,\n\t\n\t\t\tisMaterial: true,\n\t\n\t\t\tget needsUpdate() {\n\t\n\t\t\t\treturn this._needsUpdate;\n\t\n\t\t\t},\n\t\n\t\t\tset needsUpdate( value ) {\n\t\n\t\t\t\tif ( value === true ) this.update();\n\t\t\t\tthis._needsUpdate = value;\n\t\n\t\t\t},\n\t\n\t\t\tsetValues: function ( values ) {\n\t\n\t\t\t\tif ( values === undefined ) return;\n\t\n\t\t\t\tfor ( var key in values ) {\n\t\n\t\t\t\t\tvar newValue = values[ key ];\n\t\n\t\t\t\t\tif ( newValue === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar currentValue = this[ key ];\n\t\n\t\t\t\t\tif ( currentValue === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( (currentValue && currentValue.isColor) ) {\n\t\n\t\t\t\t\t\tcurrentValue.set( newValue );\n\t\n\t\t\t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\t\n\t\t\t\t\t\tcurrentValue.copy( newValue );\n\t\n\t\t\t\t\t} else if ( key === 'overdraw' ) {\n\t\n\t\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\t\tthis[ key ] = Number( newValue );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis[ key ] = newValue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tvar isRoot = meta === undefined;\n\t\n\t\t\t\tif ( isRoot ) {\n\t\n\t\t\t\t\tmeta = {\n\t\t\t\t\t\ttextures: {},\n\t\t\t\t\t\timages: {}\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar data = {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tversion: 4.4,\n\t\t\t\t\t\ttype: 'Material',\n\t\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\t// standard Material serialization\n\t\t\t\tdata.uuid = this.uuid;\n\t\t\t\tdata.type = this.type;\n\t\n\t\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t\t\t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\t\n\t\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\t\n\t\t\t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n\t\t\t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n\t\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\n\t\t\t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\t\n\t\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\n\t\t\t\t}\n\t\t\t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\t\n\t\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\n\t\t\t\t}\n\t\t\t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\t\n\t\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\n\t\t\t\t}\n\t\t\t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\t\n\t\t\t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\n\t\t\t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\t\n\t\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\t\n\t\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\t\n\t\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\n\t\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\t\tdata.depthTest = this.depthTest;\n\t\t\t\tdata.depthWrite = this.depthWrite;\n\t\n\t\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\t\n\t\t\t\tdata.skinning = this.skinning;\n\t\t\t\tdata.morphTargets = this.morphTargets;\n\t\n\t\t\t\t// TODO: Copied from Object3D.toJSON\n\t\n\t\t\t\tfunction extractFromCache( cache ) {\n\t\n\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\tfor ( var key in cache ) {\n\t\n\t\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\t\tvalues.push( data );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn values;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( isRoot ) {\n\t\n\t\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\t\tvar images = extractFromCache( meta.images );\n\t\n\t\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\t\tif ( images.length > 0 ) data.images = images;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.name = source.name;\n\t\n\t\t\t\tthis.fog = source.fog;\n\t\t\t\tthis.lights = source.lights;\n\t\n\t\t\t\tthis.blending = source.blending;\n\t\t\t\tthis.side = source.side;\n\t\t\t\tthis.shading = source.shading;\n\t\t\t\tthis.vertexColors = source.vertexColors;\n\t\n\t\t\t\tthis.opacity = source.opacity;\n\t\t\t\tthis.transparent = source.transparent;\n\t\n\t\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\t\tthis.blendDst = source.blendDst;\n\t\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\n\t\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\t\tthis.depthTest = source.depthTest;\n\t\t\t\tthis.depthWrite = source.depthWrite;\n\t\n\t\t\t\tthis.colorWrite = source.colorWrite;\n\t\n\t\t\t\tthis.precision = source.precision;\n\t\n\t\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\n\t\t\t\tthis.alphaTest = source.alphaTest;\n\t\n\t\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\n\t\t\t\tthis.overdraw = source.overdraw;\n\t\n\t\t\t\tthis.visible = source.visible;\n\t\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\n\t\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\t\tdstPlanes = null;\n\t\n\t\t\t\tif ( srcPlanes !== null ) {\n\t\n\t\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\t\tdstPlanes = new Array( n );\n\t\n\t\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.clippingPlanes = dstPlanes;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tupdate: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'update' } );\n\t\n\t\t\t},\n\t\n\t\t\tdispose: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tObject.assign( Material.prototype, EventDispatcher.prototype );\n\t\n\t\tvar count$1 = 0;\n\t\tfunction MaterialIdCount() { return count$1++; }\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  defines: { \"label\" : \"value\" },\n\t\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t\t *\n\t\t *  fragmentShader: <string>,\n\t\t *  vertexShader: <string>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>,\n\t\t *\n\t\t *  lights: <bool>,\n\t\t *\n\t\t *  skinning: <bool>,\n\t\t *  morphTargets: <bool>,\n\t\t *  morphNormals: <bool>\n\t\t * }\n\t\t */\n\t\n\t\tfunction ShaderMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'ShaderMaterial';\n\t\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\n\t\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\t\n\t\t\tthis.linewidth = 1;\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\n\t\t\tthis.fog = false; // set to use scene fog\n\t\t\tthis.lights = false; // set to use scene lights\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\t\n\t\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\t\tthis.morphTargets = false; // set to use morph targets\n\t\t\tthis.morphNormals = false; // set to use morph normals\n\t\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false, // set to use derivatives\n\t\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t\t};\n\t\n\t\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t\t'uv': [ 0, 0 ],\n\t\t\t\t'uv2': [ 0, 0 ]\n\t\t\t};\n\t\n\t\t\tthis.index0AttributeName = undefined;\n\t\n\t\t\tif ( parameters !== undefined ) {\n\t\n\t\t\t\tif ( parameters.attributes !== undefined ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.setValues( parameters );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tShaderMaterial.prototype = Object.create( Material.prototype );\n\t\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\t\n\t\tShaderMaterial.prototype.isShaderMaterial = true;\n\t\n\t\tShaderMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\n\t\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\t\n\t\t\tthis.defines = source.defines;\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\n\t\t\tthis.skinning = source.skinning;\n\t\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\t\tthis.extensions = source.extensions;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\t\n\t\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\t\n\t\t\tdata.uniforms = this.uniforms;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\n\t\t\treturn data;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author bhouston / https://clara.io\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t *\n\t\t * parameters = {\n\t\t *\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  alphaMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  displacementMap: new THREE.Texture( <Image> ),\n\t\t *  displacementScale: <float>,\n\t\t *  displacementBias: <float>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshDepthMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.alphaMap = null;\n\t\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\n\t\t\tthis.fog = false;\n\t\t\tthis.lights = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\t\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\t\n\t\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\t\n\t\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\tfunction Box3( min, max ) {\n\t\n\t\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\t\n\t\t}\n\t\n\t\tBox3.prototype = {\n\t\n\t\t\tconstructor: Box3,\n\t\n\t\t\tisBox3: true,\n\t\n\t\t\tset: function ( min, max ) {\n\t\n\t\t\t\tthis.min.copy( min );\n\t\t\t\tthis.max.copy( max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromArray: function ( array ) {\n\t\n\t\t\t\tvar minX = + Infinity;\n\t\t\t\tvar minY = + Infinity;\n\t\t\t\tvar minZ = + Infinity;\n\t\n\t\t\t\tvar maxX = - Infinity;\n\t\t\t\tvar maxY = - Infinity;\n\t\t\t\tvar maxZ = - Infinity;\n\t\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\tvar x = array[ i ];\n\t\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\t\tvar z = array[ i + 2 ];\n\t\n\t\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\t\tif ( z < minZ ) minZ = z;\n\t\n\t\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\t\tif ( z > maxZ ) maxZ = z;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\t\tthis.max.set( maxX, maxY, maxZ );\n\t\n\t\t\t},\n\t\n\t\t\tsetFromPoints: function ( points ) {\n\t\n\t\t\t\tthis.makeEmpty();\n\t\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromCenterAndSize: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\n\t\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tsetFromObject: function () {\n\t\n\t\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t\t// accounting for both the object's, and children's, world transforms\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function setFromObject( object ) {\n\t\n\t\t\t\t\tvar scope = this;\n\t\n\t\t\t\t\tobject.updateMatrixWorld( true );\n\t\n\t\t\t\t\tthis.makeEmpty();\n\t\n\t\t\t\t\tobject.traverse( function ( node ) {\n\t\n\t\t\t\t\t\tvar geometry = node.geometry;\n\t\n\t\t\t\t\t\tif ( geometry !== undefined ) {\n\t\n\t\t\t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t\t\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\t\n\t\t\t\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\t\t\t\tvar array, offset, stride;\n\t\n\t\t\t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\t\n\t\t\t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t\t\t\t\t\t\t\t\t\toffset = attribute.offset;\n\t\t\t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\t\n\t\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t\tarray = attribute.array;\n\t\t\t\t\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\t\t\t\t\tstride = 3;\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\t\n\t\t\t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t\t\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( box ) {\n\t\n\t\t\t\tthis.min.copy( box.min );\n\t\t\t\tthis.max.copy( box.max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tmakeEmpty: function () {\n\t\n\t\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tisEmpty: function () {\n\t\n\t\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\t\n\t\t\t},\n\t\n\t\t\tgetCenter: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t\t\t},\n\t\n\t\t\tgetSize: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t\t\t},\n\t\n\t\t\texpandByPoint: function ( point ) {\n\t\n\t\t\t\tthis.min.min( point );\n\t\t\t\tthis.max.max( point );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\texpandByVector: function ( vector ) {\n\t\n\t\t\t\tthis.min.sub( vector );\n\t\t\t\tthis.max.add( vector );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\texpandByScalar: function ( scalar ) {\n\t\n\t\t\t\tthis.min.addScalar( - scalar );\n\t\t\t\tthis.max.addScalar( scalar );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t},\n\t\n\t\t\tcontainsBox: function ( box ) {\n\t\n\t\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t},\n\t\n\t\t\tgetParameter: function ( point, optionalTarget ) {\n\t\n\t\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t\t// has a size dimension of 0.\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\treturn result.set(\n\t\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t\t);\n\t\n\t\t\t},\n\t\n\t\t\tintersectsBox: function ( box ) {\n\t\n\t\t\t\t// using 6 splitting planes to rule out intersections.\n\t\n\t\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t},\n\t\n\t\t\tintersectsSphere: ( function () {\n\t\n\t\t\t\tvar closestPoint;\n\t\n\t\t\t\treturn function intersectsSphere( sphere ) {\n\t\n\t\t\t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\t\n\t\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\t\n\t\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )(),\n\t\n\t\t\tintersectsPlane: function ( plane ) {\n\t\n\t\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\n\t\t\t\tvar min, max;\n\t\n\t\t\t\tif ( plane.normal.x > 0 ) {\n\t\n\t\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( plane.normal.y > 0 ) {\n\t\n\t\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( plane.normal.z > 0 ) {\n\t\n\t\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\t\n\t\t\t},\n\t\n\t\t\tclampPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToPoint: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function distanceToPoint( point ) {\n\t\n\t\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tgetBoundingSphere: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\t\n\t\t\t\t\tvar result = optionalTarget || new Sphere();\n\t\n\t\t\t\t\tthis.getCenter( result.center );\n\t\n\t\t\t\t\tresult.radius = this.getSize( v1 ).length() * 0.5;\n\t\n\t\t\t\t\treturn result;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersect: function ( box ) {\n\t\n\t\t\t\tthis.min.max( box.min );\n\t\t\t\tthis.max.min( box.max );\n\t\n\t\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\t\tif( this.isEmpty() ) this.makeEmpty();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tunion: function ( box ) {\n\t\n\t\t\t\tthis.min.min( box.min );\n\t\t\t\tthis.max.max( box.max );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix4: function () {\n\t\n\t\t\t\tvar points = [\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3(),\n\t\t\t\t\tnew Vector3()\n\t\t\t\t];\n\t\n\t\t\t\treturn function applyMatrix4( matrix ) {\n\t\n\t\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\t\tif( this.isEmpty() ) return this;\n\t\n\t\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\t\n\t\t\t\t\tthis.setFromPoints( points );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslate: function ( offset ) {\n\t\n\t\t\t\tthis.min.add( offset );\n\t\t\t\tthis.max.add( offset );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( box ) {\n\t\n\t\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Sphere( center, radius ) {\n\t\n\t\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\t\n\t\t}\n\t\n\t\tSphere.prototype = {\n\t\n\t\t\tconstructor: Sphere,\n\t\n\t\t\tset: function ( center, radius ) {\n\t\n\t\t\t\tthis.center.copy( center );\n\t\t\t\tthis.radius = radius;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromPoints: function () {\n\t\n\t\t\t\tvar box = new Box3();\n\t\n\t\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\t\n\t\t\t\t\tvar center = this.center;\n\t\n\t\t\t\t\tif ( optionalCenter !== undefined ) {\n\t\n\t\t\t\t\t\tcenter.copy( optionalCenter );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar maxRadiusSq = 0;\n\t\n\t\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( sphere ) {\n\t\n\t\t\t\tthis.center.copy( sphere.center );\n\t\t\t\tthis.radius = sphere.radius;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tempty: function () {\n\t\n\t\t\t\treturn ( this.radius <= 0 );\n\t\n\t\t\t},\n\t\n\t\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToPoint: function ( point ) {\n\t\n\t\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\t\n\t\t\t},\n\t\n\t\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\n\t\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\t\n\t\t\t},\n\t\n\t\t\tintersectsBox: function ( box ) {\n\t\n\t\t\t\treturn box.intersectsSphere( this );\n\t\n\t\t\t},\n\t\n\t\t\tintersectsPlane: function ( plane ) {\n\t\n\t\t\t\t// We use the following equation to compute the signed distance from\n\t\t\t\t// the center of the sphere to the plane.\n\t\t\t\t//\n\t\t\t\t// distance = q * n - d\n\t\t\t\t//\n\t\t\t\t// If this distance is greater than the radius of the sphere,\n\t\t\t\t// then there is no intersection.\n\t\n\t\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\t\n\t\t\t},\n\t\n\t\t\tclampPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\tresult.copy( point );\n\t\n\t\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\t\n\t\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t},\n\t\n\t\t\tgetBoundingBox: function ( optionalTarget ) {\n\t\n\t\t\t\tvar box = optionalTarget || new Box3();\n\t\n\t\t\t\tbox.set( this.center, this.center );\n\t\t\t\tbox.expandByScalar( this.radius );\n\t\n\t\t\t\treturn box;\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix4: function ( matrix ) {\n\t\n\t\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttranslate: function ( offset ) {\n\t\n\t\t\t\tthis.center.add( offset );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( sphere ) {\n\t\n\t\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t * @author bhouston / http://clara.io\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction Matrix3() {\n\t\n\t\t\tthis.elements = new Float32Array( [\n\t\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\t\n\t\t\t] );\n\t\n\t\t\tif ( arguments.length > 0 ) {\n\t\n\t\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tMatrix3.prototype = {\n\t\n\t\t\tconstructor: Matrix3,\n\t\n\t\t\tisMatrix3: true,\n\t\n\t\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tidentity: function () {\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\t1, 0, 0,\n\t\t\t\t\t0, 1, 0,\n\t\t\t\t\t0, 0, 1\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().fromArray( this.elements );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( m ) {\n\t\n\t\t\t\tvar me = m.elements;\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromMatrix4: function( m ) {\n\t\n\t\t\t\tvar me = m.elements;\n\t\n\t\t\t\tthis.set(\n\t\n\t\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\t\n\t\t\t\t);\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tapplyToVector3Array: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\t\tif ( length === undefined ) length = array.length;\n\t\n\t\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\t\t\tv1.toArray( array, j );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn array;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tapplyToBuffer: function () {\n\t\n\t\t\t\tvar v1;\n\t\n\t\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t\t\t\t\t\tv1.applyMatrix3( this );\n\t\n\t\t\t\t\t\tbuffer.setXYZ( j, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn buffer;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tmultiplyScalar: function ( s ) {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdeterminant: function () {\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\t\n\t\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\n\t\t\t},\n\t\n\t\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\t\n\t\t\t\tif ( (matrix && matrix.isMatrix4) ) {\n\t\n\t\t\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar me = matrix.elements,\n\t\t\t\t\tte = this.elements,\n\t\n\t\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\t\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\n\t\t\t\tif ( det === 0 ) {\n\t\n\t\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t\t\t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t\t\t\t\t\tthrow new Error( msg );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tconsole.warn( msg );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn this.identity();\n\t\t\t\t}\n\t\n\t\t\t\tvar detInv = 1 / det;\n\t\n\t\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\t\n\t\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\t\n\t\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttranspose: function () {\n\t\n\t\t\t\tvar tmp, m = this.elements;\n\t\n\t\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t\t\t\treturn this.toArray( array, offset );\n\t\n\t\t\t},\n\t\n\t\t\tgetNormalMatrix: function ( matrix4 ) {\n\t\n\t\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\t\n\t\t\t},\n\t\n\t\t\ttransposeIntoArray: function ( r ) {\n\t\n\t\t\t\tvar m = this.elements;\n\t\n\t\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\t\tr[ 8 ] = m[ 8 ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tfor( var i = 0; i < 9; i ++ ) {\n\t\n\t\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\n\t\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\n\t\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Plane( normal, constant ) {\n\t\n\t\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\t\n\t\t}\n\t\n\t\tPlane.prototype = {\n\t\n\t\t\tconstructor: Plane,\n\t\n\t\t\tset: function ( normal, constant ) {\n\t\n\t\t\t\tthis.normal.copy( normal );\n\t\t\t\tthis.constant = constant;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetComponents: function ( x, y, z, w ) {\n\t\n\t\t\t\tthis.normal.set( x, y, z );\n\t\t\t\tthis.constant = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\t\n\t\t\t\tthis.normal.copy( normal );\n\t\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromCoplanarPoints: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\t\t\tvar v2 = new Vector3();\n\t\n\t\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\t\n\t\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\t\n\t\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\t\n\t\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( plane ) {\n\t\n\t\t\t\tthis.normal.copy( plane.normal );\n\t\t\t\tthis.constant = plane.constant;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tnormalize: function () {\n\t\n\t\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\n\t\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\t\tthis.constant *= inverseNormalLength;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tnegate: function () {\n\t\n\t\t\t\tthis.constant *= - 1;\n\t\t\t\tthis.normal.negate();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToPoint: function ( point ) {\n\t\n\t\t\t\treturn this.normal.dot( point ) + this.constant;\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToSphere: function ( sphere ) {\n\t\n\t\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\t\n\t\t\t},\n\t\n\t\t\tprojectPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\t\n\t\t\t},\n\t\n\t\t\torthoPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\t\n\t\t\t},\n\t\n\t\t\tintersectLine: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function intersectLine( line, optionalTarget ) {\n\t\n\t\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\t\tvar direction = line.delta( v1 );\n\t\n\t\t\t\t\tvar denominator = this.normal.dot( direction );\n\t\n\t\t\t\t\tif ( denominator === 0 ) {\n\t\n\t\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\t\n\t\t\t\t\t\t\treturn result.copy( line.start );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\t\treturn undefined;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\t\n\t\t\t\t\tif ( t < 0 || t > 1 ) {\n\t\n\t\t\t\t\t\treturn undefined;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersectsLine: function ( line ) {\n\t\n\t\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\n\t\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\t\tvar endSign = this.distanceToPoint( line.end );\n\t\n\t\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\t\n\t\t\t},\n\t\n\t\t\tintersectsBox: function ( box ) {\n\t\n\t\t\t\treturn box.intersectsPlane( this );\n\t\n\t\t\t},\n\t\n\t\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\t\treturn sphere.intersectsPlane( this );\n\t\n\t\t\t},\n\t\n\t\t\tcoplanarPoint: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix4: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\t\t\tvar m1 = new Matrix3();\n\t\n\t\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\t\n\t\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\t\n\t\t\t\t\t// transform normal based on theory here:\n\t\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslate: function ( offset ) {\n\t\n\t\t\t\tthis.constant = this.constant - offset.dot( this.normal );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( plane ) {\n\t\n\t\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t\t\tthis.planes = [\n\t\n\t\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\t\n\t\t\t];\n\t\n\t\t}\n\t\n\t\tFrustum.prototype = {\n\t\n\t\t\tconstructor: Frustum,\n\t\n\t\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t\t\t\tvar planes = this.planes;\n\t\n\t\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\t\tplanes[ 5 ].copy( p5 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( frustum ) {\n\t\n\t\t\t\tvar planes = this.planes;\n\t\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromMatrix: function ( m ) {\n\t\n\t\t\t\tvar planes = this.planes;\n\t\t\t\tvar me = m.elements;\n\t\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\t\n\t\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tintersectsObject: function () {\n\t\n\t\t\t\tvar sphere = new Sphere();\n\t\n\t\t\t\treturn function intersectsObject( object ) {\n\t\n\t\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\t\n\t\t\t\t\treturn this.intersectsSphere( sphere );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersectsSprite: function () {\n\t\n\t\t\t\tvar sphere = new Sphere();\n\t\n\t\t\t\treturn function intersectsSprite( sprite ) {\n\t\n\t\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t\t\t\t\treturn this.intersectsSphere( sphere );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\t\tvar planes = this.planes;\n\t\t\t\tvar center = sphere.center;\n\t\t\t\tvar negRadius = - sphere.radius;\n\t\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\t\n\t\t\t\t\tif ( distance < negRadius ) {\n\t\n\t\t\t\t\t\treturn false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t},\n\t\n\t\t\tintersectsBox: function () {\n\t\n\t\t\t\tvar p1 = new Vector3(),\n\t\t\t\t\tp2 = new Vector3();\n\t\n\t\t\t\treturn function intersectsBox( box ) {\n\t\n\t\t\t\t\tvar planes = this.planes;\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\t\n\t\t\t\t\t\tvar plane = planes[ i ];\n\t\n\t\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\t\n\t\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\t\n\t\t\t\t\t\t// if both outside plane, no intersection\n\t\n\t\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\t\n\t\t\t\t\t\t\treturn false;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\n\t\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\t\tvar planes = this.planes;\n\t\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\t\n\t\t\t\t\t\treturn false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\t\n\t\t\tvar _gl = _renderer.context,\n\t\t\t_state = _renderer.state,\n\t\t\t_frustum = new Frustum(),\n\t\t\t_projScreenMatrix = new Matrix4(),\n\t\n\t\t\t_lightShadows = _lights.shadows,\n\t\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\t\n\t\t\t_lookTarget = new Vector3(),\n\t\t\t_lightPositionWorld = new Vector3(),\n\t\n\t\t\t_renderList = [],\n\t\n\t\t\t_MorphingFlag = 1,\n\t\t\t_SkinningFlag = 2,\n\t\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\t\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\t\n\t\t\t_materialCache = {};\n\t\n\t\t\tvar cubeDirections = [\n\t\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t\t];\n\t\n\t\t\tvar cubeUps = [\n\t\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t\t];\n\t\n\t\t\tvar cube2DViewPorts = [\n\t\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t\t];\n\t\n\t\t\t// init\n\t\n\t\t\tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t\t\tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t\t\tdepthMaterialTemplate.clipping = true;\n\t\n\t\t\tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t\t\tvar distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );\n\t\n\t\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\t\n\t\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\t\n\t\t\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\t\t\tdepthMaterial.morphTargets = useMorphing;\n\t\t\t\tdepthMaterial.skinning = useSkinning;\n\t\n\t\t\t\t_depthMaterials[ i ] = depthMaterial;\n\t\n\t\t\t\tvar distanceMaterial = new ShaderMaterial( {\n\t\t\t\t\tdefines: {\n\t\t\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t\t\t},\n\t\t\t\t\tuniforms: distanceUniforms,\n\t\t\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning,\n\t\t\t\t\tclipping: true\n\t\t\t\t} );\n\t\n\t\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tthis.enabled = false;\n\t\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\n\t\t\tthis.type = PCFShadowMap;\n\t\n\t\t\tthis.renderReverseSided = true;\n\t\t\tthis.renderSingleSided = true;\n\t\n\t\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\t\tif ( scope.enabled === false ) return;\n\t\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\t\n\t\t\t\tif ( _lightShadows.length === 0 ) return;\n\t\n\t\t\t\t// Set GL state for depth map.\n\t\t\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t\t\t_state.disable( _gl.BLEND );\n\t\t\t\t_state.setDepthTest( true );\n\t\t\t\t_state.setScissorTest( false );\n\t\n\t\t\t\t// render depth map\n\t\n\t\t\t\tvar faceCount, isPointLight;\n\t\n\t\t\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar light = _lightShadows[ i ];\n\t\t\t\t\tvar shadow = light.shadow;\n\t\n\t\t\t\t\tif ( shadow === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar shadowCamera = shadow.camera;\n\t\n\t\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\t\n\t\t\t\t\tif ( (light && light.isPointLight) ) {\n\t\n\t\t\t\t\t\tfaceCount = 6;\n\t\t\t\t\t\tisPointLight = true;\n\t\n\t\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\t\n\t\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t\t// following orientation:\n\t\t\t\t\t\t//\n\t\t\t\t\t\t//  xzXZ\n\t\t\t\t\t\t//   y Y\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t\t// z - Negative z direction\n\t\n\t\t\t\t\t\t// positive X\n\t\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t\t// negative X\n\t\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t\t// positive Z\n\t\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t\t// negative Z\n\t\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t\t// positive Y\n\t\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t\t// negative Y\n\t\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\t\n\t\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tfaceCount = 1;\n\t\t\t\t\t\tisPointLight = false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( shadow.map === null ) {\n\t\n\t\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\t\n\t\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\n\t\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\t\n\t\t\t\t\t\tshadow.update( light );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\t\tvar shadowMatrix = shadow.matrix;\n\t\n\t\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\t\n\t\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t\t_renderer.clear();\n\t\n\t\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t\t// run a single pass if not\n\t\n\t\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\t\n\t\t\t\t\t\tif ( isPointLight ) {\n\t\n\t\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t\t_state.viewport( vpDimensions );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\t\n\t\t\t\t\t\t// compute shadow matrix\n\t\n\t\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\t\n\t\t\t\t\t\t// update camera matrices and frustum\n\t\n\t\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t\t\t\t\t\t// set object matrices & frustum culling\n\t\n\t\t\t\t\t\t_renderList.length = 0;\n\t\n\t\t\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\t\n\t\t\t\t\t\t// render shadow map\n\t\t\t\t\t\t// render regular objects\n\t\n\t\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\t\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Restore GL state.\n\t\t\t\tvar clearColor = _renderer.getClearColor(),\n\t\t\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\n\t\t\t\tscope.needsUpdate = false;\n\t\n\t\t\t};\n\t\n\t\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\t\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\tvar result = null;\n\t\n\t\t\t\tvar materialVariants = _depthMaterials;\n\t\t\t\tvar customMaterial = object.customDepthMaterial;\n\t\n\t\t\t\tif ( isPointLight ) {\n\t\n\t\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( ! customMaterial ) {\n\t\n\t\t\t\t\tvar useMorphing = false;\n\t\n\t\t\t\t\tif ( material.morphTargets ) {\n\t\n\t\t\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\n\t\t\t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\t\n\t\t\t\t\tvar variantIndex = 0;\n\t\n\t\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\t\n\t\t\t\t\tresult = materialVariants[ variantIndex ];\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tresult = customMaterial;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\t material.clipShadows === true &&\n\t\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\t\n\t\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t\t// appropriate state\n\t\n\t\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\t\n\t\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\t\n\t\t\t\t\tif ( materialsForVariant === undefined ) {\n\t\n\t\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\t\n\t\t\t\t\tif ( cachedMaterial === undefined ) {\n\t\n\t\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tresult = cachedMaterial;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tresult.visible = material.visible;\n\t\t\t\tresult.wireframe = material.wireframe;\n\t\n\t\t\t\tvar side = material.side;\n\t\n\t\t\t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\t\n\t\t\t\t\tside = FrontSide;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( scope.renderReverseSided ) {\n\t\n\t\t\t\t\tif ( side === FrontSide ) side = BackSide;\n\t\t\t\t\telse if ( side === BackSide ) side = FrontSide;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tresult.side = side;\n\t\n\t\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\n\t\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\t\tresult.linewidth = material.linewidth;\n\t\n\t\t\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\t\n\t\t\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t}\n\t\n\t\t\tfunction projectObject( object, camera, shadowCamera ) {\n\t\n\t\t\t\tif ( object.visible === false ) return;\n\t\n\t\t\t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\t\n\t\t\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\t\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tif ( material.visible === true ) {\n\t\n\t\t\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t\t\t_renderList.push( object );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar children = object.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Ray( origin, direction ) {\n\t\n\t\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\t\n\t\t}\n\t\n\t\tRay.prototype = {\n\t\n\t\t\tconstructor: Ray,\n\t\n\t\t\tset: function ( origin, direction ) {\n\t\n\t\t\t\tthis.origin.copy( origin );\n\t\t\t\tthis.direction.copy( direction );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( ray ) {\n\t\n\t\t\t\tthis.origin.copy( ray.origin );\n\t\t\t\tthis.direction.copy( ray.direction );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tat: function ( t, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\t\n\t\t\t},\n\t\n\t\t\tlookAt: function ( v ) {\n\t\n\t\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\trecast: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function recast( t ) {\n\t\n\t\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\tresult.subVectors( point, this.origin );\n\t\t\t\tvar directionDistance = result.dot( this.direction );\n\t\n\t\t\t\tif ( directionDistance < 0 ) {\n\t\n\t\t\t\t\treturn result.copy( this.origin );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToPoint: function ( point ) {\n\t\n\t\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceSqToPoint: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function distanceSqToPoint( point ) {\n\t\n\t\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\t\n\t\t\t\t\t// point behind the ray\n\t\n\t\t\t\t\tif ( directionDistance < 0 ) {\n\t\n\t\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t\t\t\t\treturn v1.distanceToSquared( point );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tdistanceSqToSegment: function () {\n\t\n\t\t\t\tvar segCenter = new Vector3();\n\t\t\t\tvar segDir = new Vector3();\n\t\t\t\tvar diff = new Vector3();\n\t\n\t\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\t\n\t\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t\t// defined by v0 and v1\n\t\t\t\t\t// It can also set two optional targets :\n\t\t\t\t\t// - The closest point on the ray\n\t\t\t\t\t// - The closest point on the segment\n\t\n\t\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\t\n\t\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\t\tvar s0, s1, sqrDist, extDet;\n\t\n\t\t\t\t\tif ( det > 0 ) {\n\t\n\t\t\t\t\t\t// The ray and segment are not parallel.\n\t\n\t\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\t\textDet = segExtent * det;\n\t\n\t\t\t\t\t\tif ( s0 >= 0 ) {\n\t\n\t\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\t\n\t\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\t\n\t\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\n\t\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t// region 1\n\t\n\t\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t// region 5\n\t\n\t\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\t\n\t\t\t\t\t\t\t\t// region 4\n\t\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\t\n\t\t\t\t\t\t\t\t// region 3\n\t\n\t\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t// region 2\n\t\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// Ray and segment are parallel.\n\t\n\t\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( optionalPointOnRay ) {\n\t\n\t\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( optionalPointOnSegment ) {\n\t\n\t\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn sqrDist;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersectSphere: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\t\n\t\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\n\t\t\t\t\tif ( d2 > radius2 ) return null;\n\t\n\t\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\t\n\t\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\t\tvar t0 = tca - thc;\n\t\n\t\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\t\tvar t1 = tca + thc;\n\t\n\t\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\t\n\t\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\t\n\t\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\t\treturn this.at( t0, optionalTarget );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\t\n\t\t\t},\n\t\n\t\t\tdistanceToPlane: function ( plane ) {\n\t\n\t\t\t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t\t\t\tif ( denominator === 0 ) {\n\t\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\t\n\t\t\t\t\t\treturn 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\t\n\t\t\t\t// Return if the ray never intersects the plane\n\t\n\t\t\t\treturn t >= 0 ? t :  null;\n\t\n\t\t\t},\n\t\n\t\t\tintersectPlane: function ( plane, optionalTarget ) {\n\t\n\t\t\t\tvar t = this.distanceToPlane( plane );\n\t\n\t\t\t\tif ( t === null ) {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.at( t, optionalTarget );\n\t\n\t\t\t},\n\t\n\t\n\t\n\t\t\tintersectsPlane: function ( plane ) {\n\t\n\t\t\t\t// check if the ray lies on the plane first\n\t\n\t\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\t\n\t\t\t\tif ( distToPoint === 0 ) {\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t\t\t\tif ( denominator * distToPoint < 0 ) {\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t},\n\t\n\t\t\tintersectBox: function ( box, optionalTarget ) {\n\t\n\t\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\n\t\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\n\t\t\t\tvar origin = this.origin;\n\t\n\t\t\t\tif ( invdirx >= 0 ) {\n\t\n\t\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( invdiry >= 0 ) {\n\t\n\t\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\t\n\t\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\t\n\t\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\t\n\t\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\t\n\t\t\t\tif ( invdirz >= 0 ) {\n\t\n\t\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\t\n\t\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\t\n\t\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\t\n\t\t\t\t//return point closest to the ray (positive side)\n\t\n\t\t\t\tif ( tmax < 0 ) return null;\n\t\n\t\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\t\n\t\t\t},\n\t\n\t\t\tintersectsBox: ( function () {\n\t\n\t\t\t\tvar v = new Vector3();\n\t\n\t\t\t\treturn function intersectsBox( box ) {\n\t\n\t\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\t\n\t\t\t\t};\n\t\n\t\t\t} )(),\n\t\n\t\t\tintersectTriangle: function () {\n\t\n\t\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t\tvar diff = new Vector3();\n\t\t\t\tvar edge1 = new Vector3();\n\t\t\t\tvar edge2 = new Vector3();\n\t\t\t\tvar normal = new Vector3();\n\t\n\t\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\t\n\t\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\n\t\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\t\n\t\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\t\tvar sign;\n\t\n\t\t\t\t\tif ( DdN > 0 ) {\n\t\n\t\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\t\tsign = 1;\n\t\n\t\t\t\t\t} else if ( DdN < 0 ) {\n\t\n\t\t\t\t\t\tsign = - 1;\n\t\t\t\t\t\tDdN = - DdN;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\treturn null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\t\n\t\t\t\t\t// b1 < 0, no intersection\n\t\t\t\t\tif ( DdQxE2 < 0 ) {\n\t\n\t\t\t\t\t\treturn null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\t\n\t\t\t\t\t// b2 < 0, no intersection\n\t\t\t\t\tif ( DdE1xQ < 0 ) {\n\t\n\t\t\t\t\t\treturn null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\t\n\t\t\t\t\t\treturn null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\t\n\t\t\t\t\t// t < 0, no intersection\n\t\t\t\t\tif ( QdN < 0 ) {\n\t\n\t\t\t\t\t\treturn null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Ray intersects triangle.\n\t\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tapplyMatrix4: function ( matrix4 ) {\n\t\n\t\t\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\t\tthis.direction.sub( this.origin );\n\t\t\t\tthis.direction.normalize();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( ray ) {\n\t\n\t\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Euler( x, y, z, order ) {\n\t\n\t\t\tthis._x = x || 0;\n\t\t\tthis._y = y || 0;\n\t\t\tthis._z = z || 0;\n\t\t\tthis._order = order || Euler.DefaultOrder;\n\t\n\t\t}\n\t\n\t\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\t\n\t\tEuler.DefaultOrder = 'XYZ';\n\t\n\t\tEuler.prototype = {\n\t\n\t\t\tconstructor: Euler,\n\t\n\t\t\tisEuler: true,\n\t\n\t\t\tget x () {\n\t\n\t\t\t\treturn this._x;\n\t\n\t\t\t},\n\t\n\t\t\tset x ( value ) {\n\t\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tget y () {\n\t\n\t\t\t\treturn this._y;\n\t\n\t\t\t},\n\t\n\t\t\tset y ( value ) {\n\t\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tget z () {\n\t\n\t\t\t\treturn this._z;\n\t\n\t\t\t},\n\t\n\t\t\tset z ( value ) {\n\t\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tget order () {\n\t\n\t\t\t\treturn this._order;\n\t\n\t\t\t},\n\t\n\t\t\tset order ( value ) {\n\t\n\t\t\t\tthis._order = value;\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( x, y, z, order ) {\n\t\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\tthis._order = order || this._order;\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( euler ) {\n\t\n\t\t\t\tthis._x = euler._x;\n\t\t\t\tthis._y = euler._y;\n\t\t\t\tthis._z = euler._z;\n\t\t\t\tthis._order = euler._order;\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\t\n\t\t\t\tvar clamp = _Math.clamp;\n\t\n\t\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\t\tvar te = m.elements;\n\t\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t\t\t\torder = order || this._order;\n\t\n\t\t\t\tif ( order === 'XYZ' ) {\n\t\n\t\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\t\n\t\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\t\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\t\tthis._z = 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( order === 'YXZ' ) {\n\t\n\t\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\t\n\t\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\t\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\t\tthis._z = 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( order === 'ZXY' ) {\n\t\n\t\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\t\n\t\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\t\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( order === 'ZYX' ) {\n\t\n\t\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\t\n\t\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\t\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( order === 'YZX' ) {\n\t\n\t\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\t\n\t\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\t\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( order === 'XZY' ) {\n\t\n\t\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\t\n\t\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\t\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\t\tthis._y = 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._order = order;\n\t\n\t\t\t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromQuaternion: function () {\n\t\n\t\t\t\tvar matrix;\n\t\n\t\t\t\treturn function setFromQuaternion( q, order, update ) {\n\t\n\t\t\t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\n\t\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tsetFromVector3: function ( v, order ) {\n\t\n\t\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\t\n\t\t\t},\n\t\n\t\t\treorder: function () {\n\t\n\t\t\t\t// WARNING: this discards revolution information -bhouston\n\t\n\t\t\t\tvar q = new Quaternion();\n\t\n\t\t\t\treturn function reorder( newOrder ) {\n\t\n\t\t\t\t\tq.setFromEuler( this );\n\t\n\t\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tequals: function ( euler ) {\n\t\n\t\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\t\n\t\t\t},\n\t\n\t\t\tfromArray: function ( array ) {\n\t\n\t\t\t\tthis._x = array[ 0 ];\n\t\t\t\tthis._y = array[ 1 ];\n\t\t\t\tthis._z = array[ 2 ];\n\t\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\t\n\t\t\t\tthis.onChangeCallback();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\t\tif ( array === undefined ) array = [];\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tarray[ offset ] = this._x;\n\t\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\t\tarray[ offset + 3 ] = this._order;\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\ttoVector3: function ( optionalResult ) {\n\t\n\t\t\t\tif ( optionalResult ) {\n\t\n\t\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tonChange: function ( callback ) {\n\t\n\t\t\t\tthis.onChangeCallback = callback;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tonChangeCallback: function () {}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Layers() {\n\t\n\t\t\tthis.mask = 1;\n\t\n\t\t}\n\t\n\t\tLayers.prototype = {\n\t\n\t\t\tconstructor: Layers,\n\t\n\t\t\tset: function ( channel ) {\n\t\n\t\t\t\tthis.mask = 1 << channel;\n\t\n\t\t\t},\n\t\n\t\t\tenable: function ( channel ) {\n\t\n\t\t\t\tthis.mask |= 1 << channel;\n\t\n\t\t\t},\n\t\n\t\t\ttoggle: function ( channel ) {\n\t\n\t\t\t\tthis.mask ^= 1 << channel;\n\t\n\t\t\t},\n\t\n\t\t\tdisable: function ( channel ) {\n\t\n\t\t\t\tthis.mask &= ~ ( 1 << channel );\n\t\n\t\t\t},\n\t\n\t\t\ttest: function ( layers ) {\n\t\n\t\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t * @author elephantatwork / www.elephantatwork.ch\n\t\t */\n\t\n\t\tfunction Object3D() {\n\t\n\t\t\tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\n\t\t\tvar position = new Vector3();\n\t\t\tvar rotation = new Euler();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3( 1, 1, 1 );\n\t\n\t\t\tfunction onRotationChange() {\n\t\n\t\t\t\tquaternion.setFromEuler( rotation, false );\n\t\n\t\t\t}\n\t\n\t\t\tfunction onQuaternionChange() {\n\t\n\t\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t\n\t\t\t}\n\t\n\t\t\trotation.onChange( onRotationChange );\n\t\t\tquaternion.onChange( onQuaternionChange );\n\t\n\t\t\tObject.defineProperties( this, {\n\t\t\t\tposition: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\n\t\t\tthis.userData = {};\n\t\n\t\t\tthis.onBeforeRender = function(){}; \n\t\t\tthis.onAfterRender = function(){};\n\t\n\t\t}\n\t\n\t\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\t\tObject3D.DefaultMatrixAutoUpdate = true;\n\t\n\t\tObject.assign( Object3D.prototype, EventDispatcher.prototype, {\n\t\n\t\t\tisObject3D: true,\n\t\n\t\t\tapplyMatrix: function ( matrix ) {\n\t\n\t\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\t\n\t\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\n\t\t\t},\n\t\n\t\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\t\n\t\t\t\t// assumes axis is normalized\n\t\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\t\n\t\t\t},\n\t\n\t\t\tsetRotationFromEuler: function ( euler ) {\n\t\n\t\t\t\tthis.quaternion.setFromEuler( euler, true );\n\t\n\t\t\t},\n\t\n\t\t\tsetRotationFromMatrix: function ( m ) {\n\t\n\t\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\t\n\t\t\t},\n\t\n\t\t\tsetRotationFromQuaternion: function ( q ) {\n\t\n\t\t\t\t// assumes q is normalized\n\t\n\t\t\t\tthis.quaternion.copy( q );\n\t\n\t\t\t},\n\t\n\t\t\trotateOnAxis: function () {\n\t\n\t\t\t\t// rotate object on axis in object space\n\t\t\t\t// axis is assumed to be normalized\n\t\n\t\t\t\tvar q1 = new Quaternion();\n\t\n\t\t\t\treturn function rotateOnAxis( axis, angle ) {\n\t\n\t\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\t\n\t\t\t\t\tthis.quaternion.multiply( q1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateX: function () {\n\t\n\t\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t\t\t\treturn function rotateX( angle ) {\n\t\n\t\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateY: function () {\n\t\n\t\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t\t\t\treturn function rotateY( angle ) {\n\t\n\t\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateZ: function () {\n\t\n\t\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t\t\t\treturn function rotateZ( angle ) {\n\t\n\t\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslateOnAxis: function () {\n\t\n\t\t\t\t// translate object by distance along axis in object space\n\t\t\t\t// axis is assumed to be normalized\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function translateOnAxis( axis, distance ) {\n\t\n\t\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\t\n\t\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslateX: function () {\n\t\n\t\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t\t\t\treturn function translateX( distance ) {\n\t\n\t\t\t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslateY: function () {\n\t\n\t\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t\t\t\treturn function translateY( distance ) {\n\t\n\t\t\t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslateZ: function () {\n\t\n\t\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t\t\t\treturn function translateZ( distance ) {\n\t\n\t\t\t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tlocalToWorld: function ( vector ) {\n\t\n\t\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\t\n\t\t\t},\n\t\n\t\t\tworldToLocal: function () {\n\t\n\t\t\t\tvar m1 = new Matrix4();\n\t\n\t\t\t\treturn function worldToLocal( vector ) {\n\t\n\t\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tlookAt: function () {\n\t\n\t\t\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\t\n\t\t\t\tvar m1 = new Matrix4();\n\t\n\t\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\t\n\t\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tadd: function ( object ) {\n\t\n\t\t\t\tif ( arguments.length > 1 ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t\t\t\t\t\tthis.add( arguments[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( object === this ) {\n\t\n\t\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( (object && object.isObject3D) ) {\n\t\n\t\t\t\t\tif ( object.parent !== null ) {\n\t\n\t\t\t\t\t\tobject.parent.remove( object );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.parent = this;\n\t\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\t\n\t\t\t\t\tthis.children.push( object );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tremove: function ( object ) {\n\t\n\t\t\t\tif ( arguments.length > 1 ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t\t\t\t\t\tthis.remove( arguments[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar index = this.children.indexOf( object );\n\t\n\t\t\t\tif ( index !== - 1 ) {\n\t\n\t\t\t\t\tobject.parent = null;\n\t\n\t\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\t\n\t\t\t\t\tthis.children.splice( index, 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tgetObjectById: function ( id ) {\n\t\n\t\t\t\treturn this.getObjectByProperty( 'id', id );\n\t\n\t\t\t},\n\t\n\t\t\tgetObjectByName: function ( name ) {\n\t\n\t\t\t\treturn this.getObjectByProperty( 'name', name );\n\t\n\t\t\t},\n\t\n\t\t\tgetObjectByProperty: function ( name, value ) {\n\t\n\t\t\t\tif ( this[ name ] === value ) return this;\n\t\n\t\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar child = this.children[ i ];\n\t\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\t\n\t\t\t\t\tif ( object !== undefined ) {\n\t\n\t\t\t\t\t\treturn object;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn undefined;\n\t\n\t\t\t},\n\t\n\t\t\tgetWorldPosition: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t},\n\t\n\t\t\tgetWorldQuaternion: function () {\n\t\n\t\t\t\tvar position = new Vector3();\n\t\t\t\tvar scale = new Vector3();\n\t\n\t\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\t\n\t\t\t\t\tvar result = optionalTarget || new Quaternion();\n\t\n\t\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\t\n\t\t\t\t\treturn result;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tgetWorldRotation: function () {\n\t\n\t\t\t\tvar quaternion = new Quaternion();\n\t\n\t\t\t\treturn function getWorldRotation( optionalTarget ) {\n\t\n\t\t\t\t\tvar result = optionalTarget || new Euler();\n\t\n\t\t\t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tgetWorldScale: function () {\n\t\n\t\t\t\tvar position = new Vector3();\n\t\t\t\tvar quaternion = new Quaternion();\n\t\n\t\t\t\treturn function getWorldScale( optionalTarget ) {\n\t\n\t\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\t\n\t\t\t\t\treturn result;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tgetWorldDirection: function () {\n\t\n\t\t\t\tvar quaternion = new Quaternion();\n\t\n\t\t\t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\traycast: function () {},\n\t\n\t\t\ttraverse: function ( callback ) {\n\t\n\t\t\t\tcallback( this );\n\t\n\t\t\t\tvar children = this.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tchildren[ i ].traverse( callback );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\ttraverseVisible: function ( callback ) {\n\t\n\t\t\t\tif ( this.visible === false ) return;\n\t\n\t\t\t\tcallback( this );\n\t\n\t\t\t\tvar children = this.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tchildren[ i ].traverseVisible( callback );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\ttraverseAncestors: function ( callback ) {\n\t\n\t\t\t\tvar parent = this.parent;\n\t\n\t\t\t\tif ( parent !== null ) {\n\t\n\t\t\t\t\tcallback( parent );\n\t\n\t\t\t\t\tparent.traverseAncestors( callback );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tupdateMatrix: function () {\n\t\n\t\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\t\n\t\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t},\n\t\n\t\t\tupdateMatrixWorld: function ( force ) {\n\t\n\t\t\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\t\n\t\t\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\t\n\t\t\t\t\tif ( this.parent === null ) {\n\t\n\t\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t\t\t\t\tforce = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// update children\n\t\n\t\t\t\tvar children = this.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\t// meta is '' when called from JSON.stringify\n\t\t\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\t\n\t\t\t\tvar output = {};\n\t\n\t\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t\t// not providing it implies that this is the root object\n\t\t\t\t// being serialized.\n\t\t\t\tif ( isRootObject ) {\n\t\n\t\t\t\t\t// initialize meta obj\n\t\t\t\t\tmeta = {\n\t\t\t\t\t\tgeometries: {},\n\t\t\t\t\t\tmaterials: {},\n\t\t\t\t\t\ttextures: {},\n\t\t\t\t\t\timages: {}\n\t\t\t\t\t};\n\t\n\t\t\t\t\toutput.metadata = {\n\t\t\t\t\t\tversion: 4.4,\n\t\t\t\t\t\ttype: 'Object',\n\t\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// standard Object3D serialization\n\t\n\t\t\t\tvar object = {};\n\t\n\t\t\t\tobject.uuid = this.uuid;\n\t\t\t\tobject.type = this.type;\n\t\n\t\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\t\tif ( this.visible === false ) object.visible = false;\n\t\n\t\t\t\tobject.matrix = this.matrix.toArray();\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( this.geometry !== undefined ) {\n\t\n\t\t\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\t\n\t\t\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.geometry = this.geometry.uuid;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.material !== undefined ) {\n\t\n\t\t\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\t\n\t\t\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.material = this.material.uuid;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( this.children.length > 0 ) {\n\t\n\t\t\t\t\tobject.children = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\t\n\t\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( isRootObject ) {\n\t\n\t\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\t\tvar images = extractFromCache( meta.images );\n\t\n\t\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\t\tif ( images.length > 0 ) output.images = images;\n\t\n\t\t\t\t}\n\t\n\t\t\t\toutput.object = object;\n\t\n\t\t\t\treturn output;\n\t\n\t\t\t\t// extract data from the cache hash\n\t\t\t\t// remove metadata on each item\n\t\t\t\t// and return as array\n\t\t\t\tfunction extractFromCache( cache ) {\n\t\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tfor ( var key in cache ) {\n\t\n\t\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\t\tvalues.push( data );\n\t\n\t\t\t\t\t}\n\t\t\t\t\treturn values;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tclone: function ( recursive ) {\n\t\n\t\t\t\treturn new this.constructor().copy( this, recursive );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source, recursive ) {\n\t\n\t\t\t\tif ( recursive === undefined ) recursive = true;\n\t\n\t\t\t\tthis.name = source.name;\n\t\n\t\t\t\tthis.up.copy( source.up );\n\t\n\t\t\t\tthis.position.copy( source.position );\n\t\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\t\tthis.scale.copy( source.scale );\n\t\n\t\t\t\tthis.matrix.copy( source.matrix );\n\t\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\t\n\t\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\n\t\t\t\tthis.visible = source.visible;\n\t\n\t\t\t\tthis.castShadow = source.castShadow;\n\t\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\n\t\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\t\tthis.renderOrder = source.renderOrder;\n\t\n\t\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\t\n\t\t\t\tif ( recursive === true ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\t\tthis.add( child.clone() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\tvar count$2 = 0;\n\t\tfunction Object3DIdCount() { return count$2++; }\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Line3( start, end ) {\n\t\n\t\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\t\n\t\t}\n\t\n\t\tLine3.prototype = {\n\t\n\t\t\tconstructor: Line3,\n\t\n\t\t\tset: function ( start, end ) {\n\t\n\t\t\t\tthis.start.copy( start );\n\t\t\t\tthis.end.copy( end );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( line ) {\n\t\n\t\t\t\tthis.start.copy( line.start );\n\t\t\t\tthis.end.copy( line.end );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetCenter: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\t\n\t\t\t},\n\t\n\t\t\tdelta: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn result.subVectors( this.end, this.start );\n\t\n\t\t\t},\n\t\n\t\t\tdistanceSq: function () {\n\t\n\t\t\t\treturn this.start.distanceToSquared( this.end );\n\t\n\t\t\t},\n\t\n\t\t\tdistance: function () {\n\t\n\t\t\t\treturn this.start.distanceTo( this.end );\n\t\n\t\t\t},\n\t\n\t\t\tat: function ( t, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t\t\t},\n\t\n\t\t\tclosestPointToPointParameter: function () {\n\t\n\t\t\t\tvar startP = new Vector3();\n\t\t\t\tvar startEnd = new Vector3();\n\t\n\t\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\t\n\t\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\t\n\t\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\t\n\t\t\t\t\tvar t = startEnd_startP / startEnd2;\n\t\n\t\t\t\t\tif ( clampToLine ) {\n\t\n\t\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn t;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\t\n\t\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix4: function ( matrix ) {\n\t\n\t\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\t\tthis.end.applyMatrix4( matrix );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tequals: function ( line ) {\n\t\n\t\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Triangle( a, b, c ) {\n\t\n\t\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\t\n\t\t}\n\t\n\t\tTriangle.normal = function () {\n\t\n\t\t\tvar v0 = new Vector3();\n\t\n\t\t\treturn function normal( a, b, c, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\tresult.subVectors( c, b );\n\t\t\t\tv0.subVectors( a, b );\n\t\t\t\tresult.cross( v0 );\n\t\n\t\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\t\tif ( resultLengthSq > 0 ) {\n\t\n\t\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result.set( 0, 0, 0 );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tTriangle.barycoordFromPoint = function () {\n\t\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\t\n\t\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\t\n\t\t\t\tv0.subVectors( c, a );\n\t\t\t\tv1.subVectors( b, a );\n\t\t\t\tv2.subVectors( point, a );\n\t\n\t\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\t\tvar dot12 = v1.dot( v2 );\n\t\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\t// collinear or singular triangle\n\t\t\t\tif ( denom === 0 ) {\n\t\n\t\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar invDenom = 1 / denom;\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\t\n\t\t\t\t// barycentric coordinates must always sum to 1\n\t\t\t\treturn result.set( 1 - u - v, v, u );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tTriangle.containsPoint = function () {\n\t\n\t\t\tvar v1 = new Vector3();\n\t\n\t\t\treturn function containsPoint( point, a, b, c ) {\n\t\n\t\t\t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\t\n\t\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tTriangle.prototype = {\n\t\n\t\t\tconstructor: Triangle,\n\t\n\t\t\tset: function ( a, b, c ) {\n\t\n\t\t\t\tthis.a.copy( a );\n\t\t\t\tthis.b.copy( b );\n\t\t\t\tthis.c.copy( c );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\t\n\t\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\t\tthis.c.copy( points[ i2 ] );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( triangle ) {\n\t\n\t\t\t\tthis.a.copy( triangle.a );\n\t\t\t\tthis.b.copy( triangle.b );\n\t\t\t\tthis.c.copy( triangle.c );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tarea: function () {\n\t\n\t\t\t\tvar v0 = new Vector3();\n\t\t\t\tvar v1 = new Vector3();\n\t\n\t\t\t\treturn function area() {\n\t\n\t\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\t\tv1.subVectors( this.a, this.b );\n\t\n\t\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tmidpoint: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\t\n\t\t\t},\n\t\n\t\t\tnormal: function ( optionalTarget ) {\n\t\n\t\t\t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\t\n\t\t\t},\n\t\n\t\t\tplane: function ( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Plane();\n\t\n\t\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\n\t\t\t},\n\t\n\t\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\t\n\t\t\t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\t\n\t\t\t},\n\t\n\t\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\t\n\t\t\t},\n\t\n\t\t\tclosestPointToPoint: function () {\n\t\n\t\t\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\t\n\t\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\t\n\t\t\t\t\tif ( plane === undefined ) {\n\t\n\t\t\t\t\t\tplane = new Plane();\n\t\t\t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\t\t\t\t\tprojectedPoint = new Vector3();\n\t\t\t\t\t\tclosestPoint = new Vector3();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\t\tvar minDistance = Infinity;\n\t\n\t\t\t\t\t// project the point onto the plane of the triangle\n\t\n\t\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\t\tplane.projectPoint( point, projectedPoint );\n\t\n\t\t\t\t\t// check if the projection lies within the triangle\n\t\n\t\t\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\t\n\t\t\t\t\t\t// if so, this is the closest point\n\t\n\t\t\t\t\t\tresult.copy( projectedPoint );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\t\n\t\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\t\n\t\t\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\t\n\t\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\t\n\t\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\t\n\t\t\t\t\t\t\tif( distance < minDistance ) {\n\t\n\t\t\t\t\t\t\t\tminDistance = distance;\n\t\n\t\t\t\t\t\t\t\tresult.copy( closestPoint );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn result;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tequals: function ( triangle ) {\n\t\n\t\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\t\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\n\t\t\tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n\t\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\t\n\t\t\tthis.color = (color && color.isColor) ? color : new Color();\n\t\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\t\n\t\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\n\t\t}\n\t\n\t\tFace3.prototype = {\n\t\n\t\t\tconstructor: Face3,\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.a = source.a;\n\t\t\t\tthis.b = source.b;\n\t\t\t\tthis.c = source.c;\n\t\n\t\t\t\tthis.normal.copy( source.normal );\n\t\t\t\tthis.color.copy( source.color );\n\t\n\t\t\t\tthis.materialIndex = source.materialIndex;\n\t\n\t\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  opacity: <float>,\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  aoMap: new THREE.Texture( <Image> ),\n\t\t *  aoMapIntensity: <float>\n\t\t *\n\t\t *  specularMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  alphaMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t\t *  combine: THREE.Multiply,\n\t\t *  reflectivity: <float>,\n\t\t *  refractionRatio: <float>,\n\t\t *\n\t\t *  shading: THREE.SmoothShading,\n\t\t *  depthTest: <bool>,\n\t\t *  depthWrite: <bool>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>,\n\t\t *\n\t\t *  skinning: <bool>,\n\t\t *  morphTargets: <bool>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshBasicMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff ); // emissive\n\t\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\t\tthis.specularMap = null;\n\t\n\t\t\tthis.alphaMap = null;\n\t\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\n\t\t\tthis.lights = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\t\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\t\n\t\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\t\n\t\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\t\tthis.specularMap = source.specularMap;\n\t\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction BufferAttribute( array, itemSize, normalized ) {\n\t\n\t\t\tif ( Array.isArray( array ) ) {\n\t\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t\t\t}\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\n\t\t\tthis.dynamic = false;\n\t\t\tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t\t\tthis.version = 0;\n\t\n\t\t}\n\t\n\t\tBufferAttribute.prototype = {\n\t\n\t\t\tconstructor: BufferAttribute,\n\t\n\t\t\tisBufferAttribute: true,\n\t\n\t\t\tset needsUpdate( value ) {\n\t\n\t\t\t\tif ( value === true ) this.version ++;\n\t\n\t\t\t},\n\t\n\t\t\tsetArray: function ( array ) {\n\t\n\t\t\t\tif ( Array.isArray( array ) ) {\n\t\n\t\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\t\tthis.array = array;\n\t\n\t\t\t},\n\t\n\t\t\tsetDynamic: function ( value ) {\n\t\n\t\t\t\tthis.dynamic = value;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\t\tthis.itemSize = source.itemSize;\n\t\t\t\tthis.count = source.count;\n\t\t\t\tthis.normalized = source.normalized;\n\t\n\t\t\t\tthis.dynamic = source.dynamic;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t\t\t\tindex1 *= this.itemSize;\n\t\t\t\tindex2 *= attribute.itemSize;\n\t\n\t\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\t\n\t\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyArray: function ( array ) {\n\t\n\t\t\t\tthis.array.set( array );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyColorsArray: function ( colors ) {\n\t\n\t\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar color = colors[ i ];\n\t\n\t\t\t\t\tif ( color === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\t\tcolor = new Color();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\t\tarray[ offset ++ ] = color.b;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyIndicesArray: function ( indices ) {\n\t\n\t\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar index = indices[ i ];\n\t\n\t\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\t\tarray[ offset ++ ] = index.c;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyVector2sArray: function ( vectors ) {\n\t\n\t\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar vector = vectors[ i ];\n\t\n\t\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\t\tvector = new Vector2();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyVector3sArray: function ( vectors ) {\n\t\n\t\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar vector = vectors[ i ];\n\t\n\t\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\t\tvector = new Vector3();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyVector4sArray: function ( vectors ) {\n\t\n\t\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar vector = vectors[ i ];\n\t\n\t\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\t\tvector = new Vector4();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\t\tarray[ offset ++ ] = vector.w;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis.array.set( value, offset );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetX: function ( index ) {\n\t\n\t\t\t\treturn this.array[ index * this.itemSize ];\n\t\n\t\t\t},\n\t\n\t\t\tsetX: function ( index, x ) {\n\t\n\t\t\t\tthis.array[ index * this.itemSize ] = x;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetY: function ( index ) {\n\t\n\t\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\t\n\t\t\t},\n\t\n\t\t\tsetY: function ( index, y ) {\n\t\n\t\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetZ: function ( index ) {\n\t\n\t\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\t\n\t\t\t},\n\t\n\t\t\tsetZ: function ( index, z ) {\n\t\n\t\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetW: function ( index ) {\n\t\n\t\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\t\n\t\t\t},\n\t\n\t\t\tsetW: function ( index, w ) {\n\t\n\t\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetXY: function ( index, x, y ) {\n\t\n\t\t\t\tindex *= this.itemSize;\n\t\n\t\t\t\tthis.array[ index + 0 ] = x;\n\t\t\t\tthis.array[ index + 1 ] = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetXYZ: function ( index, x, y, z ) {\n\t\n\t\t\t\tindex *= this.itemSize;\n\t\n\t\t\t\tthis.array[ index + 0 ] = x;\n\t\t\t\tthis.array[ index + 1 ] = y;\n\t\t\t\tthis.array[ index + 2 ] = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t\t\t\tindex *= this.itemSize;\n\t\n\t\t\t\tthis.array[ index + 0 ] = x;\n\t\t\t\tthis.array[ index + 1 ] = y;\n\t\t\t\tthis.array[ index + 2 ] = z;\n\t\t\t\tthis.array[ index + 3 ] = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tfunction Int8Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Uint8Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Int16Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Uint16Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Int32Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Uint32Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Float32Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\tfunction Float64Attribute( array, itemSize ) {\n\t\n\t\t\treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\t\n\t\t}\n\t\n\t\t// Deprecated\n\t\n\t\tfunction DynamicBufferAttribute( array, itemSize ) {\n\t\n\t\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author kile / http://kile.stravaganza.org/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\tfunction Geometry() {\n\t\n\t\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Geometry';\n\t\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [ [] ];\n\t\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\n\t\t\tthis.lineDistances = [];\n\t\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\n\t\t\t// update flags\n\t\n\t\t\tthis.elementsNeedUpdate = false;\n\t\t\tthis.verticesNeedUpdate = false;\n\t\t\tthis.uvsNeedUpdate = false;\n\t\t\tthis.normalsNeedUpdate = false;\n\t\t\tthis.colorsNeedUpdate = false;\n\t\t\tthis.lineDistancesNeedUpdate = false;\n\t\t\tthis.groupsNeedUpdate = false;\n\t\n\t\t}\n\t\n\t\tObject.assign( Geometry.prototype, EventDispatcher.prototype, {\n\t\n\t\t\tisGeometry: true,\n\t\n\t\t\tapplyMatrix: function ( matrix ) {\n\t\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\t\tvertex.applyMatrix4( matrix );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.boundingBox !== null ) {\n\t\n\t\t\t\t\tthis.computeBoundingBox();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.boundingSphere !== null ) {\n\t\n\t\t\t\t\tthis.computeBoundingSphere();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.verticesNeedUpdate = true;\n\t\t\t\tthis.normalsNeedUpdate = true;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\trotateX: function () {\n\t\n\t\t\t\t// rotate geometry around world x-axis\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function rotateX( angle ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeRotationX( angle );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateY: function () {\n\t\n\t\t\t\t// rotate geometry around world y-axis\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function rotateY( angle ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeRotationY( angle );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateZ: function () {\n\t\n\t\t\t\t// rotate geometry around world z-axis\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function rotateZ( angle ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeRotationZ( angle );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslate: function () {\n\t\n\t\t\t\t// translate geometry\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function translate( x, y, z ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeTranslation( x, y, z );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tscale: function () {\n\t\n\t\t\t\t// scale geometry\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function scale( x, y, z ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeScale( x, y, z );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tlookAt: function () {\n\t\n\t\t\t\tvar obj;\n\t\n\t\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t\t\t\t\tobj.lookAt( vector );\n\t\n\t\t\t\t\tobj.updateMatrix();\n\t\n\t\t\t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tfromBufferGeometry: function ( geometry ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\t\tvar positions = attributes.position.array;\n\t\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\t\n\t\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\t\n\t\t\t\tvar tempNormals = [];\n\t\t\t\tvar tempUVs = [];\n\t\t\t\tvar tempUVs2 = [];\n\t\n\t\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\t\n\t\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\t\n\t\t\t\t\tif ( normals !== undefined ) {\n\t\n\t\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( colors !== undefined ) {\n\t\n\t\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( uvs !== undefined ) {\n\t\n\t\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( uvs2 !== undefined ) {\n\t\n\t\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\t\n\t\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\t\n\t\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\t\n\t\t\t\t\tscope.faces.push( face );\n\t\n\t\t\t\t\tif ( uvs !== undefined ) {\n\t\n\t\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( uvs2 !== undefined ) {\n\t\n\t\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( indices !== undefined ) {\n\t\n\t\t\t\t\tvar groups = geometry.groups;\n\t\n\t\t\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\t\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\n\t\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\t\tvar count = group.count;\n\t\n\t\t\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\t\n\t\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\t\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.computeFaceNormals();\n\t\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcenter: function () {\n\t\n\t\t\t\tthis.computeBoundingBox();\n\t\n\t\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t\t\t\treturn offset;\n\t\n\t\t\t},\n\t\n\t\t\tnormalize: function () {\n\t\n\t\t\t\tthis.computeBoundingSphere();\n\t\n\t\t\t\tvar center = this.boundingSphere.center;\n\t\t\t\tvar radius = this.boundingSphere.radius;\n\t\n\t\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\n\t\t\t\tvar matrix = new Matrix4();\n\t\t\t\tmatrix.set(\n\t\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t\t0, 0, 0, 1\n\t\t\t\t);\n\t\n\t\t\t\tthis.applyMatrix( matrix );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcomputeFaceNormals: function () {\n\t\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tvar face = this.faces[ f ];\n\t\n\t\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\t\tvar vC = this.vertices[ face.c ];\n\t\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\tcb.normalize();\n\t\n\t\t\t\t\tface.normal.copy( cb );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\t\n\t\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\t\n\t\t\t\tvar v, vl, f, fl, face, vertices;\n\t\n\t\t\t\tvertices = new Array( this.vertices.length );\n\t\n\t\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\tvertices[ v ] = new Vector3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( areaWeighted ) {\n\t\n\t\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\n\t\t\t\t\tvar vA, vB, vC;\n\t\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\t\tvC = this.vertices[ face.c ];\n\t\n\t\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\t\tvertices[ face.c ].add( cb );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.computeFaceNormals();\n\t\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\tvertices[ v ].normalize();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.faces.length > 0 ) {\n\t\n\t\t\t\t\tthis.normalsNeedUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tcomputeFlatVertexNormals: function () {\n\t\n\t\t\t\tvar f, fl, face;\n\t\n\t\t\t\tthis.computeFaceNormals();\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.faces.length > 0 ) {\n\t\n\t\t\t\t\tthis.normalsNeedUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tcomputeMorphNormals: function () {\n\t\n\t\t\t\tvar i, il, f, fl, face;\n\t\n\t\t\t\t// save original normals\n\t\t\t\t// - create temp variables on first access\n\t\t\t\t//   otherwise just copy (for faster repeated calls)\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\t\n\t\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\t\n\t\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\t\n\t\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\t\n\t\t\t\tvar tmpGeo = new Geometry();\n\t\t\t\ttmpGeo.faces = this.faces;\n\t\n\t\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t// create on first access\n\t\n\t\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\t\n\t\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\t\n\t\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\t\n\t\t\t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\t\n\t\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\t\n\t\t\t\t\t// set vertices to morph target\n\t\n\t\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\t\n\t\t\t\t\t// compute morph normals\n\t\n\t\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\t\ttmpGeo.computeVertexNormals();\n\t\n\t\t\t\t\t// store morph normals\n\t\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\t\n\t\t\t\t\t\tfaceNormal.copy( face.normal );\n\t\n\t\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// restore original normals\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tcomputeTangents: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\t\n\t\t\t},\n\t\n\t\t\tcomputeLineDistances: function () {\n\t\n\t\t\t\tvar d = 0;\n\t\t\t\tvar vertices = this.vertices;\n\t\n\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tif ( i > 0 ) {\n\t\n\t\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.lineDistances[ i ] = d;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tcomputeBoundingBox: function () {\n\t\n\t\t\t\tif ( this.boundingBox === null ) {\n\t\n\t\t\t\t\tthis.boundingBox = new Box3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\t\n\t\t\t},\n\t\n\t\t\tcomputeBoundingSphere: function () {\n\t\n\t\t\t\tif ( this.boundingSphere === null ) {\n\t\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\t\n\t\t\t},\n\t\n\t\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\t\n\t\t\t\tif ( (geometry && geometry.isGeometry) === false ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\t\n\t\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\t\n\t\t\t\tif ( matrix !== undefined ) {\n\t\n\t\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// vertices\n\t\n\t\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar vertex = vertices2[ i ];\n\t\n\t\t\t\t\tvar vertexCopy = vertex.clone();\n\t\n\t\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\t\n\t\t\t\t\tvertices1.push( vertexCopy );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// colors\n\t\n\t\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// faces\n\t\n\t\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\t\n\t\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\t\tfaceCopy.normal.copy( face.normal );\n\t\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\t\n\t\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfaceCopy.color.copy( face.color );\n\t\n\t\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\n\t\t\t\t\tfaces1.push( faceCopy );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// uvs\n\t\n\t\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\t\n\t\t\t\t\tif ( uv === undefined ) {\n\t\n\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tuvs1.push( uvCopy );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tmergeMesh: function ( mesh ) {\n\t\n\t\t\t\tif ( (mesh && mesh.isMesh) === false ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\t\n\t\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\t\n\t\t\t},\n\t\n\t\t\t/*\n\t\t\t * Checks for duplicate vertices with hashmap.\n\t\t\t * Duplicated vertices are removed\n\t\t\t * and faces' vertices are updated.\n\t\t\t */\n\t\n\t\t\tmergeVertices: function () {\n\t\n\t\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\t\tvar unique = [], changes = [];\n\t\n\t\t\t\tvar v, key;\n\t\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\t\tvar i, il, face;\n\t\t\t\tvar indices, j, jl;\n\t\n\t\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tv = this.vertices[ i ];\n\t\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\t\n\t\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\t\n\t\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t\t// have to remove them from the geometry.\n\t\t\t\tvar faceIndicesToRemove = [];\n\t\n\t\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ i ];\n\t\n\t\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\t\tface.c = changes[ face.c ];\n\t\n\t\t\t\t\tindices = [ face.a, face.b, face.c ];\n\t\n\t\t\t\t\tvar dupIndex = - 1;\n\t\n\t\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\n\t\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\t\n\t\t\t\t\t\t\tdupIndex = n;\n\t\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\n\t\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\t\n\t\t\t\t\tthis.faces.splice( idx, 1 );\n\t\n\t\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Use unique set of vertices\n\t\n\t\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\t\tthis.vertices = unique;\n\t\t\t\treturn diff;\n\t\n\t\t\t},\n\t\n\t\t\tsortFacesByMaterialIndex: function () {\n\t\n\t\t\t\tvar faces = this.faces;\n\t\t\t\tvar length = faces.length;\n\t\n\t\t\t\t// tag faces\n\t\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t\t\t\t\tfaces[ i ]._id = i;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// sort faces\n\t\n\t\t\t\tfunction materialIndexSort( a, b ) {\n\t\n\t\t\t\t\treturn a.materialIndex - b.materialIndex;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfaces.sort( materialIndexSort );\n\t\n\t\t\t\t// sort uvs\n\t\n\t\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\t\n\t\t\t\tvar newUvs1, newUvs2;\n\t\n\t\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\t\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t\t\t\t\tvar id = faces[ i ]._id;\n\t\n\t\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function () {\n\t\n\t\t\t\tvar data = {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tversion: 4.4,\n\t\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\t// standard Geometry serialization\n\t\n\t\t\t\tdata.uuid = this.uuid;\n\t\t\t\tdata.type = this.type;\n\t\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t\t\t\tif ( this.parameters !== undefined ) {\n\t\n\t\t\t\t\tvar parameters = this.parameters;\n\t\n\t\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn data;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar vertices = [];\n\t\n\t\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\t\n\t\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar faces = [];\n\t\t\t\tvar normals = [];\n\t\t\t\tvar normalsHash = {};\n\t\t\t\tvar colors = [];\n\t\t\t\tvar colorsHash = {};\n\t\t\t\tvar uvs = [];\n\t\t\t\tvar uvsHash = {};\n\t\n\t\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\t\n\t\t\t\t\tvar face = this.faces[ i ];\n\t\n\t\t\t\t\tvar hasMaterial = true;\n\t\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\n\t\t\t\t\tvar faceType = 0;\n\t\n\t\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\t\n\t\t\t\t\tfaces.push( faceType );\n\t\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\t\tfaces.push( face.materialIndex );\n\t\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t\t\t\t\t\tfaces.push(\n\t\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\t\tfaces.push(\n\t\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t\t\t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t\t\t\t\t\tfaces.push(\n\t\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction setBit( value, position, enabled ) {\n\t\n\t\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction getNormalIndex( normal ) {\n\t\n\t\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\t\n\t\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\t\n\t\t\t\t\t\treturn normalsHash[ hash ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t\t\t\t\treturn normalsHash[ hash ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction getColorIndex( color ) {\n\t\n\t\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\t\n\t\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\t\n\t\t\t\t\t\treturn colorsHash[ hash ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\t\tcolors.push( color.getHex() );\n\t\n\t\t\t\t\treturn colorsHash[ hash ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction getUvIndex( uv ) {\n\t\n\t\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\t\n\t\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\t\n\t\t\t\t\t\treturn uvsHash[ hash ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\t\n\t\t\t\t\treturn uvsHash[ hash ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdata.data = {};\n\t\n\t\t\t\tdata.data.vertices = vertices;\n\t\t\t\tdata.data.normals = normals;\n\t\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\t\tdata.data.faces = faces;\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\t/*\n\t\t\t\t// Handle primitives\n\t\n\t\t\t\tvar parameters = this.parameters;\n\t\n\t\t\t\tif ( parameters !== undefined ) {\n\t\n\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\t\treturn geometry;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\t\t\t*/\n\t\n\t\t\t\treturn new Geometry().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.vertices = [];\n\t\t\t\tthis.faces = [];\n\t\t\t\tthis.faceVertexUvs = [ [] ];\n\t\t\t\tthis.colors = [];\n\t\n\t\t\t\tvar vertices = source.vertices;\n\t\n\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar colors = source.colors;\n\t\n\t\t\t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar faces = source.faces;\n\t\n\t\t\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\t\n\t\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\t\n\t\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\t\n\t\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\t\n\t\t\t\t\t\t\tvar uv = uvs[ k ];\n\t\n\t\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdispose: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\tvar count$3 = 0;\n\t\tfunction GeometryIdCount() { return count$3++; }\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction DirectGeometry() {\n\t\n\t\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'DirectGeometry';\n\t\n\t\t\tthis.indices = [];\n\t\t\tthis.vertices = [];\n\t\t\tthis.normals = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.uvs = [];\n\t\t\tthis.uvs2 = [];\n\t\n\t\t\tthis.groups = [];\n\t\n\t\t\tthis.morphTargets = {};\n\t\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\n\t\t\t// this.lineDistances = [];\n\t\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\n\t\t\t// update flags\n\t\n\t\t\tthis.verticesNeedUpdate = false;\n\t\t\tthis.normalsNeedUpdate = false;\n\t\t\tthis.colorsNeedUpdate = false;\n\t\t\tthis.uvsNeedUpdate = false;\n\t\t\tthis.groupsNeedUpdate = false;\n\t\n\t\t}\n\t\n\t\tObject.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t\t\tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n\t\t\tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\t\n\t\t\tcomputeFaceNormals: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\t\n\t\t\t},\n\t\n\t\t\tcomputeVertexNormals: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\t\n\t\t\t},\n\t\n\t\t\tcomputeGroups: function ( geometry ) {\n\t\n\t\t\t\tvar group;\n\t\t\t\tvar groups = [];\n\t\t\t\tvar materialIndex;\n\t\n\t\t\t\tvar faces = geometry.faces;\n\t\n\t\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t\t// materials\n\t\n\t\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\t\n\t\t\t\t\t\tmaterialIndex = face.materialIndex;\n\t\n\t\t\t\t\t\tif ( group !== undefined ) {\n\t\n\t\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\t\tgroups.push( group );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tgroup = {\n\t\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( group !== undefined ) {\n\t\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.groups = groups;\n\t\n\t\t\t},\n\t\n\t\t\tfromGeometry: function ( geometry ) {\n\t\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\n\t\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\t\n\t\t\t\t// morphs\n\t\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\tvar morphTargetsLength = morphTargets.length;\n\t\n\t\t\t\tvar morphTargetsPosition;\n\t\n\t\t\t\tif ( morphTargetsLength > 0 ) {\n\t\n\t\t\t\t\tmorphTargetsPosition = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\t\n\t\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\t\tvar morphNormalsLength = morphNormals.length;\n\t\n\t\t\t\tvar morphTargetsNormal;\n\t\n\t\t\t\tif ( morphNormalsLength > 0 ) {\n\t\n\t\t\t\t\tmorphTargetsNormal = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\t\n\t\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// skins\n\t\n\t\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\t\tvar skinWeights = geometry.skinWeights;\n\t\n\t\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\t\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvar normal = face.normal;\n\t\n\t\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t\t\t\t\tif ( vertexColors.length === 3 ) {\n\t\n\t\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvar color = face.color;\n\t\n\t\t\t\t\t\tthis.colors.push( color, color, color );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasFaceVertexUv === true ) {\n\t\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\t\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\t\n\t\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\t\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\t\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\t\n\t\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// morphs\n\t\n\t\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\t\n\t\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\t\n\t\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\t\n\t\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\t\n\t\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// skins\n\t\n\t\t\t\t\tif ( hasSkinIndices ) {\n\t\n\t\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( hasSkinWeights ) {\n\t\n\t\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.computeGroups( geometry );\n\t\n\t\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdispose: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction BufferGeometry() {\n\t\n\t\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\n\t\t\tthis.morphAttributes = {};\n\t\n\t\t\tthis.groups = [];\n\t\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\n\t\t\tthis.drawRange = { start: 0, count: Infinity };\n\t\n\t\t}\n\t\n\t\tObject.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t\t\tisBufferGeometry: true,\n\t\n\t\t\tgetIndex: function () {\n\t\n\t\t\t\treturn this.index;\n\t\n\t\t\t},\n\t\n\t\t\tsetIndex: function ( index ) {\n\t\n\t\t\t\tthis.index = index;\n\t\n\t\t\t},\n\t\n\t\t\taddAttribute: function ( name, attribute ) {\n\t\n\t\t\t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\t\n\t\t\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\t\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( name === 'index' ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\t\tthis.setIndex( attribute );\n\t\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.attributes[ name ] = attribute;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetAttribute: function ( name ) {\n\t\n\t\t\t\treturn this.attributes[ name ];\n\t\n\t\t\t},\n\t\n\t\t\tremoveAttribute: function ( name ) {\n\t\n\t\t\t\tdelete this.attributes[ name ];\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddGroup: function ( start, count, materialIndex ) {\n\t\n\t\t\t\tthis.groups.push( {\n\t\n\t\t\t\t\tstart: start,\n\t\t\t\t\tcount: count,\n\t\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\n\t\t\t\t} );\n\t\n\t\t\t},\n\t\n\t\t\tclearGroups: function () {\n\t\n\t\t\t\tthis.groups = [];\n\t\n\t\t\t},\n\t\n\t\t\tsetDrawRange: function ( start, count ) {\n\t\n\t\t\t\tthis.drawRange.start = start;\n\t\t\t\tthis.drawRange.count = count;\n\t\n\t\t\t},\n\t\n\t\t\tapplyMatrix: function ( matrix ) {\n\t\n\t\t\t\tvar position = this.attributes.position;\n\t\n\t\t\t\tif ( position !== undefined ) {\n\t\n\t\t\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\t\t\tposition.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar normal = this.attributes.normal;\n\t\n\t\t\t\tif ( normal !== undefined ) {\n\t\n\t\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t\t\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\t\t\tnormal.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.boundingBox !== null ) {\n\t\n\t\t\t\t\tthis.computeBoundingBox();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.boundingSphere !== null ) {\n\t\n\t\t\t\t\tthis.computeBoundingSphere();\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\trotateX: function () {\n\t\n\t\t\t\t// rotate geometry around world x-axis\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function rotateX( angle ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeRotationX( angle );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateY: function () {\n\t\n\t\t\t\t// rotate geometry around world y-axis\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function rotateY( angle ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeRotationY( angle );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\trotateZ: function () {\n\t\n\t\t\t\t// rotate geometry around world z-axis\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function rotateZ( angle ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeRotationZ( angle );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttranslate: function () {\n\t\n\t\t\t\t// translate geometry\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function translate( x, y, z ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeTranslation( x, y, z );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tscale: function () {\n\t\n\t\t\t\t// scale geometry\n\t\n\t\t\t\tvar m1;\n\t\n\t\t\t\treturn function scale( x, y, z ) {\n\t\n\t\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t\t\t\t\tm1.makeScale( x, y, z );\n\t\n\t\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tlookAt: function () {\n\t\n\t\t\t\tvar obj;\n\t\n\t\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t\t\t\t\tobj.lookAt( vector );\n\t\n\t\t\t\t\tobj.updateMatrix();\n\t\n\t\t\t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tcenter: function () {\n\t\n\t\t\t\tthis.computeBoundingBox();\n\t\n\t\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t\t\t\treturn offset;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromObject: function ( object ) {\n\t\n\t\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\t\n\t\t\t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\t\n\t\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\t\n\t\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\t\n\t\t\t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\t\n\t\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( (object && object.isMesh) ) {\n\t\n\t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t\t\t\t\t\tthis.fromGeometry( geometry );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tupdateFromObject: function ( object ) {\n\t\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\tif ( (object && object.isMesh) ) {\n\t\n\t\t\t\t\tvar direct = geometry.__directGeometry;\n\t\n\t\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\t\n\t\t\t\t\t\tdirect = undefined;\n\t\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( direct === undefined ) {\n\t\n\t\t\t\t\t\treturn this.fromGeometry( geometry );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t\t\t\t\tgeometry = direct;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar attribute;\n\t\n\t\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\t\n\t\t\t\t\tattribute = this.attributes.position;\n\t\n\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\t\n\t\t\t\t\tattribute = this.attributes.normal;\n\t\n\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\t\n\t\t\t\t\tattribute = this.attributes.color;\n\t\n\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.uvsNeedUpdate ) {\n\t\n\t\t\t\t\tattribute = this.attributes.uv;\n\t\n\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\t\n\t\t\t\t\tattribute = this.attributes.lineDistance;\n\t\n\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.groupsNeedUpdate ) {\n\t\n\t\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\t\tthis.groups = geometry.groups;\n\t\n\t\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tfromGeometry: function ( geometry ) {\n\t\n\t\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\t\n\t\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\t\n\t\t\t},\n\t\n\t\t\tfromDirectGeometry: function ( geometry ) {\n\t\n\t\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\t\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\t\n\t\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\t\n\t\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\t\n\t\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.uvs2.length > 0 ) {\n\t\n\t\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.indices.length > 0 ) {\n\t\n\t\t\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// groups\n\t\n\t\t\t\tthis.groups = geometry.groups;\n\t\n\t\t\t\t// morphs\n\t\n\t\t\t\tfor ( var name in geometry.morphTargets ) {\n\t\n\t\t\t\t\tvar array = [];\n\t\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\t\n\t\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\n\t\t\t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\t\n\t\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.morphAttributes[ name ] = array;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// skinning\n\t\n\t\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\t\n\t\t\t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\t\n\t\t\t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcomputeBoundingBox: function () {\n\t\n\t\t\t\tif ( this.boundingBox === null ) {\n\t\n\t\t\t\t\tthis.boundingBox = new Box3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar positions = this.attributes.position.array;\n\t\n\t\t\t\tif ( positions !== undefined ) {\n\t\n\t\t\t\t\tthis.boundingBox.setFromArray( positions );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.boundingBox.makeEmpty();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tcomputeBoundingSphere: function () {\n\t\n\t\t\t\tvar box = new Box3();\n\t\t\t\tvar vector = new Vector3();\n\t\n\t\t\t\treturn function computeBoundingSphere() {\n\t\n\t\t\t\t\tif ( this.boundingSphere === null ) {\n\t\n\t\t\t\t\t\tthis.boundingSphere = new Sphere();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar positions = this.attributes.position;\n\t\n\t\t\t\t\tif ( positions ) {\n\t\n\t\t\t\t\t\tvar array = positions.array;\n\t\t\t\t\t\tvar center = this.boundingSphere.center;\n\t\n\t\t\t\t\t\tbox.setFromArray( array );\n\t\t\t\t\t\tbox.getCenter( center );\n\t\n\t\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\t\n\t\t\t\t\t\tvar maxRadiusSq = 0;\n\t\n\t\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\t\n\t\t\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\t\n\t\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\t\n\t\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\tcomputeFaceNormals: function () {\n\t\n\t\t\t\t// backwards compatibility\n\t\n\t\t\t},\n\t\n\t\t\tcomputeVertexNormals: function () {\n\t\n\t\t\t\tvar index = this.index;\n\t\t\t\tvar attributes = this.attributes;\n\t\t\t\tvar groups = this.groups;\n\t\n\t\t\t\tif ( attributes.position ) {\n\t\n\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\tif ( attributes.normal === undefined ) {\n\t\n\t\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// reset existing normals to zero\n\t\n\t\t\t\t\t\tvar array = attributes.normal.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\tarray[ i ] = 0;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar normals = attributes.normal.array;\n\t\n\t\t\t\t\tvar vA, vB, vC,\n\t\n\t\t\t\t\tpA = new Vector3(),\n\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\tpC = new Vector3(),\n\t\n\t\t\t\t\tcb = new Vector3(),\n\t\t\t\t\tab = new Vector3();\n\t\n\t\t\t\t\t// indexed elements\n\t\n\t\t\t\t\tif ( index ) {\n\t\n\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\tif ( groups.length === 0 ) {\n\t\n\t\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\t\n\t\t\t\t\t\t\tvar group = groups[ j ];\n\t\n\t\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\t\tvar count = group.count;\n\t\n\t\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\t\n\t\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\t\n\t\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\t\n\t\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\t\n\t\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\t\n\t\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\t\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\t\n\t\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\t\n\t\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.normalizeNormals();\n\t\n\t\t\t\t\tattributes.normal.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tmerge: function ( geometry, offset ) {\n\t\n\t\t\t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tvar attributes = this.attributes;\n\t\n\t\t\t\tfor ( var key in attributes ) {\n\t\n\t\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\t\n\t\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\n\t\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\n\t\t\t\t\tvar attributeSize = attribute2.itemSize;\n\t\n\t\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\t\n\t\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tnormalizeNormals: function () {\n\t\n\t\t\t\tvar normals = this.attributes.normal.array;\n\t\n\t\t\t\tvar x, y, z, n;\n\t\n\t\t\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\t\n\t\t\t\t\tx = normals[ i ];\n\t\t\t\t\ty = normals[ i + 1 ];\n\t\t\t\t\tz = normals[ i + 2 ];\n\t\n\t\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\t\n\t\t\t\t\tnormals[ i ] *= n;\n\t\t\t\t\tnormals[ i + 1 ] *= n;\n\t\t\t\t\tnormals[ i + 2 ] *= n;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\ttoNonIndexed: function () {\n\t\n\t\t\t\tif ( this.index === null ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar geometry2 = new BufferGeometry();\n\t\n\t\t\t\tvar indices = this.index.array;\n\t\t\t\tvar attributes = this.attributes;\n\t\n\t\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\t\tvar attribute = attributes[ name ];\n\t\n\t\t\t\t\tvar array = attribute.array;\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\n\t\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\t\n\t\t\t\t\tvar index = 0, index2 = 0;\n\t\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tindex = indices[ i ] * itemSize;\n\t\n\t\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\t\n\t\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn geometry2;\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function () {\n\t\n\t\t\t\tvar data = {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tversion: 4.4,\n\t\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\t// standard BufferGeometry serialization\n\t\n\t\t\t\tdata.uuid = this.uuid;\n\t\t\t\tdata.type = this.type;\n\t\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t\t\t\tif ( this.parameters !== undefined ) {\n\t\n\t\t\t\t\tvar parameters = this.parameters;\n\t\n\t\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn data;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdata.data = { attributes: {} };\n\t\n\t\t\t\tvar index = this.index;\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\t\n\t\t\t\t\tdata.data.index = {\n\t\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\t\tarray: array\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar attributes = this.attributes;\n\t\n\t\t\t\tfor ( var key in attributes ) {\n\t\n\t\t\t\t\tvar attribute = attributes[ key ];\n\t\n\t\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\t\n\t\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\t\tarray: array,\n\t\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar groups = this.groups;\n\t\n\t\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar boundingSphere = this.boundingSphere;\n\t\n\t\t\t\tif ( boundingSphere !== null ) {\n\t\n\t\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\t/*\n\t\t\t\t// Handle primitives\n\t\n\t\t\t\tvar parameters = this.parameters;\n\t\n\t\t\t\tif ( parameters !== undefined ) {\n\t\n\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\t\treturn geometry;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\t\t\t*/\n\t\n\t\t\t\treturn new BufferGeometry().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tvar index = source.index;\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\tthis.setIndex( index.clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar attributes = source.attributes;\n\t\n\t\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar groups = source.groups;\n\t\n\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdispose: function () {\n\t\n\t\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\tBufferGeometry.MaxIndex = 65535;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author jonobr1 / http://jonobr1.com/\n\t\t */\n\t\n\t\tfunction Mesh( geometry, material ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Mesh';\n\t\n\t\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t\t\tthis.drawMode = TrianglesDrawMode;\n\t\n\t\t\tthis.updateMorphTargets();\n\t\n\t\t}\n\t\n\t\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Mesh,\n\t\n\t\t\tisMesh: true,\n\t\n\t\t\tsetDrawMode: function ( value ) {\n\t\n\t\t\t\tthis.drawMode = value;\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tObject3D.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.drawMode = source.drawMode;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tupdateMorphTargets: function () {\n\t\n\t\t\t\tvar morphTargets = this.geometry.morphTargets;\n\t\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\t\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\t\n\t\t\t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\t\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\traycast: ( function () {\n\t\n\t\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\t\tvar ray = new Ray();\n\t\t\t\tvar sphere = new Sphere();\n\t\n\t\t\t\tvar vA = new Vector3();\n\t\t\t\tvar vB = new Vector3();\n\t\t\t\tvar vC = new Vector3();\n\t\n\t\t\t\tvar tempA = new Vector3();\n\t\t\t\tvar tempB = new Vector3();\n\t\t\t\tvar tempC = new Vector3();\n\t\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\t\n\t\t\t\tvar barycoord = new Vector3();\n\t\n\t\t\t\tvar intersectionPoint = new Vector3();\n\t\t\t\tvar intersectionPointWorld = new Vector3();\n\t\n\t\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\t\n\t\t\t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\t\n\t\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\t\n\t\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\t\n\t\t\t\t\treturn uv1.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\t\n\t\t\t\t\tvar intersect;\n\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\tif ( material.side === BackSide ) {\n\t\n\t\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( intersect === null ) return null;\n\t\n\t\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\t\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\t\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\t\tobject: object\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\t\n\t\t\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\t\t\tvC.fromArray( positions, c * 3 );\n\t\n\t\t\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\t\n\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\tif ( uvs ) {\n\t\n\t\t\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\t\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\t\tintersection.faceIndex = a;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn intersection;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\t\tvar geometry = this.geometry;\n\t\t\t\t\tvar material = this.material;\n\t\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t\t\t\t\tif ( material === undefined ) return;\n\t\n\t\t\t\t\t// Checking boundingSphere distance to ray\n\t\n\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t\t\t\t\t//\n\t\n\t\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t\t\t\t\t// Check boundingBox before continuing\n\t\n\t\t\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar uvs, intersection;\n\t\n\t\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\t\tvar a, b, c;\n\t\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t\t\t\t\t\t\tuvs = attributes.uv.array;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\t\t\tc = indices[ i + 2 ];\n\t\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\t\n\t\t\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\t\t\tc = a + 2;\n\t\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n\t\t\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\t\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\t\n\t\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\t\n\t\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\t\tfvC = vertices[ face.c ];\n\t\n\t\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\t\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\t\n\t\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\t\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\t\n\t\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\t\tvC.add( fvC );\n\t\n\t\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\t\tfvC = vC;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\t\n\t\t\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\t\t\tif ( uvs ) {\n\t\n\t\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\t\n\t\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}() ),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'BoxBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\t// segments\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\t\n\t\t\t// these are used to calculate buffer length\n\t\t\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t\t\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\t\n\t\t\t// buffers\n\t\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t\t\t// offset variables\n\t\t\tvar vertexBufferOffset = 0;\n\t\t\tvar uvBufferOffset = 0;\n\t\t\tvar indexBufferOffset = 0;\n\t\t\tvar numberOfVertices = 0;\n\t\n\t\t\t// group variables\n\t\t\tvar groupStart = 0;\n\t\n\t\t\t// build each side of the box geometry\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\t\n\t\t\t// build geometry\n\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t\t\t// helper functions\n\t\n\t\t\tfunction calculateVertexCount( w, h, d ) {\n\t\n\t\t\t\tvar vertices = 0;\n\t\n\t\t\t\t// calculate the amount of vertices for each side (plane)\n\t\t\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\t\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\t\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\t\n\t\t\t\treturn vertices;\n\t\n\t\t\t}\n\t\n\t\t\tfunction calculateIndexCount( w, h, d ) {\n\t\n\t\t\t\tvar index = 0;\n\t\n\t\t\t\t// calculate the amount of squares for each side\n\t\t\t\tindex += w * h * 2; // xy\n\t\t\t\tindex += w * d * 2; // xz\n\t\t\t\tindex += d * h * 2; // zy\n\t\n\t\t\t\treturn index * 6; // two triangles per square => six vertices per square\n\t\n\t\t\t}\n\t\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\t\n\t\t\t\tvar segmentWidth\t= width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\n\t\t\t\tvar vector = new Vector3();\n\t\n\t\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\t\n\t\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\t\n\t\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\t\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\t\n\t\t\t\t\t\t// now apply vector to normal buffer\n\t\t\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t\t\t\t\t\t// uvs\n\t\t\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\t\n\t\t\t\t\t\t// update offsets and counters\n\t\t\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\t\t\tuvBufferOffset += 2;\n\t\t\t\t\t\tvertexCounter += 1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\t\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\t\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\t\n\t\t\t\t\t\t// indices\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\t\n\t\t\t\t\t\t// face one\n\t\t\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t\t\t\t\t\t// face two\n\t\t\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t\t\t\t\t\t// update offsets and counters\n\t\t\t\t\t\tindexBufferOffset += 6;\n\t\t\t\t\t\tgroupCount += 6;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\t\n\t\t\t\t// calculate new start value for groups\n\t\t\t\tgroupStart += groupCount;\n\t\n\t\t\t\t// update total number of vertices\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t\t */\n\t\n\t\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'PlaneBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\n\t\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\t\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY;\n\t\n\t\t\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t\t\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t\t\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\t\n\t\t\tvar offset = 0;\n\t\t\tvar offset2 = 0;\n\t\n\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t\t\t\tvar y = iy * segment_height - height_half;\n\t\n\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\n\t\t\t\t\tvertices[ offset ] = x;\n\t\t\t\t\tvertices[ offset + 1 ] = - y;\n\t\n\t\t\t\t\tnormals[ offset + 2 ] = 1;\n\t\n\t\t\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\t\n\t\t\t\t\toffset += 3;\n\t\t\t\t\toffset2 += 2;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\toffset = 0;\n\t\n\t\t\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\t\n\t\t\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\t\n\t\t\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\t\n\t\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\t\n\t\t\t\t\tindices[ offset ] = a;\n\t\t\t\t\tindices[ offset + 1 ] = b;\n\t\t\t\t\tindices[ offset + 2 ] = d;\n\t\n\t\t\t\t\tindices[ offset + 3 ] = b;\n\t\t\t\t\tindices[ offset + 4 ] = c;\n\t\t\t\t\tindices[ offset + 5 ] = d;\n\t\n\t\t\t\t\toffset += 6;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t\t}\n\t\n\t\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t*/\n\t\n\t\tfunction Camera() {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Camera';\n\t\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\n\t\t}\n\t\n\t\tCamera.prototype = Object.create( Object3D.prototype );\n\t\tCamera.prototype.constructor = Camera;\n\t\n\t\tCamera.prototype.isCamera = true;\n\t\n\t\tCamera.prototype.getWorldDirection = function () {\n\t\n\t\t\tvar quaternion = new Quaternion();\n\t\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tCamera.prototype.lookAt = function () {\n\t\n\t\t\t// This routine does not support cameras with rotated and/or translated parent(s)\n\t\n\t\t\tvar m1 = new Matrix4();\n\t\n\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\t\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tCamera.prototype.clone = function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t};\n\t\n\t\tCamera.prototype.copy = function ( source ) {\n\t\n\t\t\tObject3D.prototype.copy.call( this, source );\n\t\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author greggman / http://games.greggman.com/\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\t\n\t\t\tCamera.call( this );\n\t\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\n\t\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\t\tthis.zoom = 1;\n\t\n\t\t\tthis.near = near !== undefined ? near : 0.1;\n\t\t\tthis.far = far !== undefined ? far : 2000;\n\t\t\tthis.focus = 10;\n\t\n\t\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\t\tthis.view = null;\n\t\n\t\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\t\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t}\n\t\n\t\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t\t\tconstructor: PerspectiveCamera,\n\t\n\t\t\tisPerspectiveCamera: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tCamera.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.fov = source.fov;\n\t\t\t\tthis.zoom = source.zoom;\n\t\n\t\t\t\tthis.near = source.near;\n\t\t\t\tthis.far = source.far;\n\t\t\t\tthis.focus = source.focus;\n\t\n\t\t\t\tthis.aspect = source.aspect;\n\t\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\t\tthis.filmOffset = source.filmOffset;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t\t *\n\t\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t\t * a 35mm (full frame) camera.\n\t\t\t *\n\t\t\t * Values for focal length and film gauge must have the same unit.\n\t\t\t */\n\t\t\tsetFocalLength: function ( focalLength ) {\n\t\n\t\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\n\t\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t\t */\n\t\t\tgetFocalLength: function () {\n\t\n\t\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\t\n\t\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\n\t\t\t},\n\t\n\t\t\tgetEffectiveFOV: function () {\n\t\n\t\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\t\n\t\t\t},\n\t\n\t\t\tgetFilmWidth: function () {\n\t\n\t\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\t\n\t\t\t},\n\t\n\t\t\tgetFilmHeight: function () {\n\t\n\t\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\t\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t\t * multi-monitor/multi-machine setups.\n\t\t\t *\n\t\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t\t * the monitors are in grid like this\n\t\t\t *\n\t\t\t *   +---+---+---+\n\t\t\t *   | A | B | C |\n\t\t\t *   +---+---+---+\n\t\t\t *   | D | E | F |\n\t\t\t *   +---+---+---+\n\t\t\t *\n\t\t\t * then for each monitor you would call it like this\n\t\t\t *\n\t\t\t *   var w = 1920;\n\t\t\t *   var h = 1080;\n\t\t\t *   var fullWidth = w * 3;\n\t\t\t *   var fullHeight = h * 2;\n\t\t\t *\n\t\t\t *   --A--\n\t\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t\t *   --B--\n\t\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t\t *   --C--\n\t\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t\t *   --D--\n\t\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t\t *   --E--\n\t\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t\t *   --F--\n\t\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t\t *\n\t\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t\t */\n\t\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t\t\t\tthis.aspect = fullWidth / fullHeight;\n\t\n\t\t\t\tthis.view = {\n\t\t\t\t\tfullWidth: fullWidth,\n\t\t\t\t\tfullHeight: fullHeight,\n\t\t\t\t\toffsetX: x,\n\t\t\t\t\toffsetY: y,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height\n\t\t\t\t};\n\t\n\t\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t\t},\n\t\n\t\t\tclearViewOffset: function() {\n\t\n\t\t\t\tthis.view = null;\n\t\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t\t},\n\t\n\t\t\tupdateProjectionMatrix: function () {\n\t\n\t\t\t\tvar near = this.near,\n\t\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\t\theight = 2 * top,\n\t\t\t\t\twidth = this.aspect * height,\n\t\t\t\t\tleft = - 0.5 * width,\n\t\t\t\t\tview = this.view;\n\t\n\t\t\t\tif ( view !== null ) {\n\t\n\t\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\n\t\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\t\theight *= view.height / fullHeight;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar skew = this.filmOffset;\n\t\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\t\n\t\t\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\t\tdata.object.fov = this.fov;\n\t\t\t\tdata.object.zoom = this.zoom;\n\t\n\t\t\t\tdata.object.near = this.near;\n\t\t\t\tdata.object.far = this.far;\n\t\t\t\tdata.object.focus = this.focus;\n\t\n\t\t\t\tdata.object.aspect = this.aspect;\n\t\n\t\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author arose / http://github.com/arose\n\t\t */\n\t\n\t\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\t\n\t\t\tCamera.call( this );\n\t\n\t\t\tthis.type = 'OrthographicCamera';\n\t\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\n\t\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\t\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t}\n\t\n\t\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t\t\tconstructor: OrthographicCamera,\n\t\n\t\t\tisOrthographicCamera: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tCamera.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.left = source.left;\n\t\t\t\tthis.right = source.right;\n\t\t\t\tthis.top = source.top;\n\t\t\t\tthis.bottom = source.bottom;\n\t\t\t\tthis.near = source.near;\n\t\t\t\tthis.far = source.far;\n\t\n\t\t\t\tthis.zoom = source.zoom;\n\t\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t\t\t\tthis.view = {\n\t\t\t\t\tfullWidth: fullWidth,\n\t\t\t\t\tfullHeight: fullHeight,\n\t\t\t\t\toffsetX: x,\n\t\t\t\t\toffsetY: y,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height\n\t\t\t\t};\n\t\n\t\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t\t},\n\t\n\t\t\tclearViewOffset: function() {\n\t\n\t\t\t\tthis.view = null;\n\t\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t\t},\n\t\n\t\t\tupdateProjectionMatrix: function () {\n\t\n\t\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\t\n\t\t\t\tvar left = cx - dx;\n\t\t\t\tvar right = cx + dx;\n\t\t\t\tvar top = cy + dy;\n\t\t\t\tvar bottom = cy - dy;\n\t\n\t\t\t\tif ( this.view !== null ) {\n\t\n\t\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\t\n\t\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\t\tdata.object.zoom = this.zoom;\n\t\t\t\tdata.object.left = this.left;\n\t\t\t\tdata.object.right = this.right;\n\t\t\t\tdata.object.top = this.top;\n\t\t\t\tdata.object.bottom = this.bottom;\n\t\t\t\tdata.object.near = this.near;\n\t\t\t\tdata.object.far = this.far;\n\t\n\t\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t\t\tvar mode;\n\t\n\t\t\tfunction setMode( value ) {\n\t\n\t\t\t\tmode = value;\n\t\n\t\t\t}\n\t\n\t\t\tvar type, size;\n\t\n\t\t\tfunction setIndex( index ) {\n\t\n\t\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t\t\tsize = 4;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t\tsize = 2;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction render( start, count ) {\n\t\n\t\t\t\tgl.drawElements( mode, count, type, start * size );\n\t\n\t\t\t\tinfoRender.calls ++;\n\t\t\t\tinfoRender.vertices += count;\n\t\n\t\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t\t\t}\n\t\n\t\t\tfunction renderInstances( geometry, start, count ) {\n\t\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\t\tif ( extension === null ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\t\n\t\t\t\tinfoRender.calls ++;\n\t\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\n\t\t\t\tsetMode: setMode,\n\t\t\t\tsetIndex: setIndex,\n\t\t\t\trender: render,\n\t\t\t\trenderInstances: renderInstances\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t\t\tvar mode;\n\t\n\t\t\tfunction setMode( value ) {\n\t\n\t\t\t\tmode = value;\n\t\n\t\t\t}\n\t\n\t\t\tfunction render( start, count ) {\n\t\n\t\t\t\tgl.drawArrays( mode, start, count );\n\t\n\t\t\t\tinfoRender.calls ++;\n\t\t\t\tinfoRender.vertices += count;\n\t\n\t\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t\t\t}\n\t\n\t\t\tfunction renderInstances( geometry ) {\n\t\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\t\tif ( extension === null ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar position = geometry.attributes.position;\n\t\n\t\t\t\tvar count = 0;\n\t\n\t\t\t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\t\n\t\t\t\t\tcount = position.data.count;\n\t\n\t\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tcount = position.count;\n\t\n\t\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tinfoRender.calls ++;\n\t\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tsetMode: setMode,\n\t\t\t\trender: render,\n\t\t\t\trenderInstances: renderInstances\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLLights() {\n\t\n\t\t\tvar lights = {};\n\t\n\t\t\treturn {\n\t\n\t\t\t\tget: function ( light ) {\n\t\n\t\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\t\n\t\t\t\t\t\treturn lights[ light.id ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar uniforms;\n\t\n\t\t\t\t\tswitch ( light.type ) {\n\t\n\t\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\t\tcolor: new Color(),\n\t\n\t\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\t\tdecay: 0,\n\t\n\t\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\t\tdecay: 0,\n\t\n\t\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlights[ light.id ] = uniforms;\n\t\n\t\t\t\t\treturn uniforms;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction addLineNumbers( string ) {\n\t\n\t\t\tvar lines = string.split( '\\n' );\n\t\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\t\n\t\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn lines.join( '\\n' );\n\t\n\t\t}\n\t\n\t\tfunction WebGLShader( gl, type, string ) {\n\t\n\t\t\tvar shader = gl.createShader( type );\n\t\n\t\t\tgl.shaderSource( shader, string );\n\t\t\tgl.compileShader( shader );\n\t\n\t\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\t\n\t\t\t}\n\t\n\t\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\t\n\t\t\t}\n\t\n\t\t\t// --enable-privileged-webgl-extension\n\t\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\t\n\t\t\treturn shader;\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tvar programIdCount = 0;\n\t\n\t\tfunction getEncodingComponents( encoding ) {\n\t\n\t\t\tswitch ( encoding ) {\n\t\n\t\t\t\tcase LinearEncoding:\n\t\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\t\tcase sRGBEncoding:\n\t\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\t\tcase RGBEEncoding:\n\t\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\t\tcase RGBM7Encoding:\n\t\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\t\tcase RGBM16Encoding:\n\t\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\t\tcase RGBDEncoding:\n\t\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\t\tcase GammaEncoding:\n\t\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\t\n\t\t\tvar components = getEncodingComponents( encoding );\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\t\n\t\t}\n\t\n\t\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\t\n\t\t\tvar components = getEncodingComponents( encoding );\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\t\n\t\t}\n\t\n\t\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\t\n\t\t\tvar toneMappingName;\n\t\n\t\t\tswitch ( toneMapping ) {\n\t\n\t\t\t\tcase LinearToneMapping:\n\t\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase ReinhardToneMapping:\n\t\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase CineonToneMapping:\n\t\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\t\n\t\t\t}\n\t\n\t\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\t\n\t\t}\n\t\n\t\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\t\n\t\t\textensions = extensions || {};\n\t\n\t\t\tvar chunks = [\n\t\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t\t];\n\t\n\t\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t}\n\t\n\t\tfunction generateDefines( defines ) {\n\t\n\t\t\tvar chunks = [];\n\t\n\t\t\tfor ( var name in defines ) {\n\t\n\t\t\t\tvar value = defines[ name ];\n\t\n\t\t\t\tif ( value === false ) continue;\n\t\n\t\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\t\n\t\t\t}\n\t\n\t\t\treturn chunks.join( '\\n' );\n\t\n\t\t}\n\t\n\t\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\t\n\t\t\tvar attributes = {};\n\t\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\t\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\n\t\n\t\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\t\tvar name = info.name;\n\t\n\t\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\t\n\t\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\t\n\t\t\t}\n\t\n\t\t\treturn attributes;\n\t\n\t\t}\n\t\n\t\tfunction filterEmptyLine( string ) {\n\t\n\t\t\treturn string !== '';\n\t\n\t\t}\n\t\n\t\tfunction replaceLightNums( string, parameters ) {\n\t\n\t\t\treturn string\n\t\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\t\n\t\t}\n\t\n\t\tfunction parseIncludes( string ) {\n\t\n\t\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\t\n\t\t\tfunction replace( match, include ) {\n\t\n\t\t\t\tvar replace = ShaderChunk[ include ];\n\t\n\t\t\t\tif ( replace === undefined ) {\n\t\n\t\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn parseIncludes( replace );\n\t\n\t\t\t}\n\t\n\t\t\treturn string.replace( pattern, replace );\n\t\n\t\t}\n\t\n\t\tfunction unrollLoops( string ) {\n\t\n\t\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\t\n\t\t\tfunction replace( match, start, end, snippet ) {\n\t\n\t\t\t\tvar unroll = '';\n\t\n\t\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\t\n\t\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn unroll;\n\t\n\t\t\t}\n\t\n\t\t\treturn string.replace( pattern, replace );\n\t\n\t\t}\n\t\n\t\tfunction WebGLProgram( renderer, code, material, parameters ) {\n\t\n\t\t\tvar gl = renderer.context;\n\t\n\t\t\tvar extensions = material.extensions;\n\t\t\tvar defines = material.defines;\n\t\n\t\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\t\n\t\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\t\n\t\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\t\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\n\t\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\t\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\n\t\t\t}\n\t\n\t\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\n\t\t\tif ( parameters.envMap ) {\n\t\n\t\t\t\tswitch ( material.envMap.mapping ) {\n\t\n\t\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tswitch ( material.envMap.mapping ) {\n\t\n\t\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tswitch ( material.combine ) {\n\t\n\t\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase MixOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase AddOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\t\n\t\t\t// console.log( 'building new program ' );\n\t\n\t\t\t//\n\t\n\t\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\t\n\t\t\tvar customDefines = generateDefines( defines );\n\t\n\t\t\t//\n\t\n\t\t\tvar program = gl.createProgram();\n\t\n\t\t\tvar prefixVertex, prefixFragment;\n\t\n\t\t\tif ( material.isRawShaderMaterial ) {\n\t\n\t\t\t\tprefixVertex = [\n\t\n\t\t\t\t\tcustomDefines,\n\t\n\t\t\t\t\t'\\n'\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t\tprefixFragment = [\n\t\n\t\t\t\t\tcustomExtensions,\n\t\t\t\t\tcustomDefines,\n\t\n\t\t\t\t\t'\\n'\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tprefixVertex = [\n\t\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t\t\t\t\tcustomDefines,\n\t\n\t\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\t\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\t\n\t\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\t\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t\t'uniform vec3 cameraPosition;',\n\t\n\t\t\t\t\t'attribute vec3 position;',\n\t\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t\t'attribute vec2 uv;',\n\t\n\t\t\t\t\t'#ifdef USE_COLOR',\n\t\n\t\t\t\t\t'\tattribute vec3 color;',\n\t\n\t\t\t\t\t'#endif',\n\t\n\t\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\t\n\t\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t\t'\tattribute vec3 morphTarget3;',\n\t\n\t\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\t\n\t\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\t\n\t\t\t\t\t'\t#else',\n\t\n\t\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\t\n\t\t\t\t\t'\t#endif',\n\t\n\t\t\t\t\t'#endif',\n\t\n\t\t\t\t\t'#ifdef USE_SKINNING',\n\t\n\t\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t\t'\tattribute vec4 skinWeight;',\n\t\n\t\t\t\t\t'#endif',\n\t\n\t\t\t\t\t'\\n'\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t\tprefixFragment = [\n\t\n\t\t\t\t\tcustomExtensions,\n\t\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t\t\t\t\tcustomDefines,\n\t\n\t\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\t\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\t\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\t\t\t\t'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),\n\t\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\t\n\t\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\t\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\t\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform vec3 cameraPosition;',\n\t\n\t\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\t\n\t\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\t\n\t\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\t\n\t\t\t\t\t'\\n'\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t}\n\t\n\t\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\n\t\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\n\t\t\tif ( ! material.isShaderMaterial ) {\n\t\n\t\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\t\n\t\t\t}\n\t\n\t\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\t\n\t\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\t\n\t\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\t\n\t\t\tgl.attachShader( program, glVertexShader );\n\t\t\tgl.attachShader( program, glFragmentShader );\n\t\n\t\t\t// Force a particular attribute to index 0.\n\t\n\t\t\tif ( material.index0AttributeName !== undefined ) {\n\t\n\t\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\t\n\t\t\t} else if ( parameters.morphTargets === true ) {\n\t\n\t\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\t\n\t\t\t}\n\t\n\t\t\tgl.linkProgram( program );\n\t\n\t\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\t\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\t\n\t\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\t\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\t\n\t\t\t\trunnable = false;\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\t\n\t\t\t} else if ( programLog !== '' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\t\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\t\n\t\t\t\thaveDiagnostics = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( haveDiagnostics ) {\n\t\n\t\t\t\tthis.diagnostics = {\n\t\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tmaterial: material,\n\t\n\t\t\t\t\tprogramLog: programLog,\n\t\n\t\t\t\t\tvertexShader: {\n\t\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfragmentShader: {\n\t\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\t// clean up\n\t\n\t\t\tgl.deleteShader( glVertexShader );\n\t\t\tgl.deleteShader( glFragmentShader );\n\t\n\t\t\t// set up caching for uniform locations\n\t\n\t\t\tvar cachedUniforms;\n\t\n\t\t\tthis.getUniforms = function() {\n\t\n\t\t\t\tif ( cachedUniforms === undefined ) {\n\t\n\t\t\t\t\tcachedUniforms =\n\t\t\t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn cachedUniforms;\n\t\n\t\t\t};\n\t\n\t\t\t// set up caching for attribute locations\n\t\n\t\t\tvar cachedAttributes;\n\t\n\t\t\tthis.getAttributes = function() {\n\t\n\t\t\t\tif ( cachedAttributes === undefined ) {\n\t\n\t\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn cachedAttributes;\n\t\n\t\t\t};\n\t\n\t\t\t// free resource\n\t\n\t\t\tthis.destroy = function() {\n\t\n\t\t\t\tgl.deleteProgram( program );\n\t\t\t\tthis.program = undefined;\n\t\n\t\t\t};\n\t\n\t\t\t// DEPRECATED\n\t\n\t\t\tObject.defineProperties( this, {\n\t\n\t\t\t\tuniforms: {\n\t\t\t\t\tget: function() {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\t\treturn this.getUniforms();\n\t\n\t\t\t\t\t}\n\t\t\t\t},\n\t\n\t\t\t\tattributes: {\n\t\t\t\t\tget: function() {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\t\treturn this.getAttributes();\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\n\t\t\t//\n\t\n\t\t\tthis.id = programIdCount ++;\n\t\t\tthis.code = code;\n\t\t\tthis.usedTimes = 1;\n\t\t\tthis.program = program;\n\t\t\tthis.vertexShader = glVertexShader;\n\t\t\tthis.fragmentShader = glFragmentShader;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLPrograms( renderer, capabilities ) {\n\t\n\t\t\tvar programs = [];\n\t\n\t\t\tvar shaderIDs = {\n\t\t\t\tMeshDepthMaterial: 'depth',\n\t\t\t\tMeshNormalMaterial: 'normal',\n\t\t\t\tMeshBasicMaterial: 'basic',\n\t\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\t\tMeshPhongMaterial: 'phong',\n\t\t\t\tMeshStandardMaterial: 'physical',\n\t\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\t\tLineBasicMaterial: 'basic',\n\t\t\t\tLineDashedMaterial: 'dashed',\n\t\t\t\tPointsMaterial: 'points'\n\t\t\t};\n\t\n\t\t\tvar parameterNames = [\n\t\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\"\n\t\t\t];\n\t\n\t\n\t\t\tfunction allocateBones( object ) {\n\t\n\t\t\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\t\n\t\t\t\t\treturn 1024;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// default for when object is not specified\n\t\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t\t//\n\t\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t\t//    (up to 54 should be safe)\n\t\n\t\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\t\n\t\t\t\t\tvar maxBones = nVertexMatrices;\n\t\n\t\t\t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\t\n\t\t\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\t\n\t\t\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn maxBones;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\t\n\t\t\t\tvar encoding;\n\t\n\t\t\t\tif ( ! map ) {\n\t\n\t\t\t\t\tencoding = LinearEncoding;\n\t\n\t\t\t\t} else if ( (map && map.isTexture) ) {\n\t\n\t\t\t\t\tencoding = map.encoding;\n\t\n\t\t\t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\t\n\t\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\tencoding = map.texture.encoding;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\t\n\t\t\t\t\tencoding = GammaEncoding;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn encoding;\n\t\n\t\t\t}\n\t\n\t\t\tthis.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {\n\t\n\t\t\t\tvar shaderID = shaderIDs[ material.type ];\n\t\n\t\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t\t// (not to blow over maxLights budget)\n\t\n\t\t\t\tvar maxBones = allocateBones( object );\n\t\t\t\tvar precision = renderer.getPrecision();\n\t\n\t\t\t\tif ( material.precision !== null ) {\n\t\n\t\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\t\n\t\t\t\t\tif ( precision !== material.precision ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\t\n\t\t\t\tvar parameters = {\n\t\n\t\t\t\t\tshaderID: shaderID,\n\t\n\t\t\t\t\tprecision: precision,\n\t\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\t\tmap: !! material.map,\n\t\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\t\talphaMap: !! material.alphaMap,\n\t\n\t\t\t\t\tcombine: material.combine,\n\t\n\t\t\t\t\tvertexColors: material.vertexColors,\n\t\n\t\t\t\t\tfog: !! fog,\n\t\t\t\t\tuseFog: material.fog,\n\t\t\t\t\tfogExp: (fog && fog.isFogExp2),\n\t\n\t\t\t\t\tflatShading: material.shading === FlatShading,\n\t\n\t\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\t\n\t\t\t\t\tskinning: material.skinning,\n\t\t\t\t\tmaxBones: maxBones,\n\t\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\t\n\t\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\n\t\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\n\t\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\t\tnumClipIntersection: nClipIntersection,\n\t\n\t\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\n\t\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\n\t\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\n\t\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\t\tflipSided: material.side === BackSide,\n\t\n\t\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\t\n\t\t\t\t};\n\t\n\t\t\t\treturn parameters;\n\t\n\t\t\t};\n\t\n\t\t\tthis.getProgramCode = function ( material, parameters ) {\n\t\n\t\t\t\tvar array = [];\n\t\n\t\t\t\tif ( parameters.shaderID ) {\n\t\n\t\t\t\t\tarray.push( parameters.shaderID );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\t\tarray.push( material.vertexShader );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.defines !== undefined ) {\n\t\n\t\t\t\t\tfor ( var name in material.defines ) {\n\t\n\t\t\t\t\t\tarray.push( name );\n\t\t\t\t\t\tarray.push( material.defines[ name ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\t\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn array.join();\n\t\n\t\t\t};\n\t\n\t\t\tthis.acquireProgram = function ( material, parameters, code ) {\n\t\n\t\t\t\tvar program;\n\t\n\t\t\t\t// Check if code has been already compiled\n\t\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\t\n\t\t\t\t\tvar programInfo = programs[ p ];\n\t\n\t\t\t\t\tif ( programInfo.code === code ) {\n\t\n\t\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t\t++ program.usedTimes;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n\t\t\t\t\tprograms.push( program );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn program;\n\t\n\t\t\t};\n\t\n\t\t\tthis.releaseProgram = function( program ) {\n\t\n\t\t\t\tif ( -- program.usedTimes === 0 ) {\n\t\n\t\t\t\t\t// Remove from unordered set\n\t\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\t\tprograms.pop();\n\t\n\t\t\t\t\t// Free WebGL resources\n\t\t\t\t\tprogram.destroy();\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tthis.programs = programs;\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLGeometries( gl, properties, info ) {\n\t\n\t\t\tvar geometries = {};\n\t\n\t\t\tfunction onGeometryDispose( event ) {\n\t\n\t\t\t\tvar geometry = event.target;\n\t\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\t\n\t\t\t\tif ( buffergeometry.index !== null ) {\n\t\n\t\t\t\t\tdeleteAttribute( buffergeometry.index );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdeleteAttributes( buffergeometry.attributes );\n\t\n\t\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\t\n\t\t\t\tdelete geometries[ geometry.id ];\n\t\n\t\t\t\t// TODO\n\t\n\t\t\t\tvar property = properties.get( geometry );\n\t\n\t\t\t\tif ( property.wireframe ) {\n\t\n\t\t\t\t\tdeleteAttribute( property.wireframe );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tproperties.delete( geometry );\n\t\n\t\t\t\tvar bufferproperty = properties.get( buffergeometry );\n\t\n\t\t\t\tif ( bufferproperty.wireframe ) {\n\t\n\t\t\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tproperties.delete( buffergeometry );\n\t\n\t\t\t\t//\n\t\n\t\t\t\tinfo.memory.geometries --;\n\t\n\t\t\t}\n\t\n\t\t\tfunction getAttributeBuffer( attribute ) {\n\t\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t\t\t}\n\t\n\t\t\tfunction deleteAttribute( attribute ) {\n\t\n\t\t\t\tvar buffer = getAttributeBuffer( attribute );\n\t\n\t\t\t\tif ( buffer !== undefined ) {\n\t\n\t\t\t\t\tgl.deleteBuffer( buffer );\n\t\t\t\t\tremoveAttributeBuffer( attribute );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction deleteAttributes( attributes ) {\n\t\n\t\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\t\tdeleteAttribute( attributes[ name ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction removeAttributeBuffer( attribute ) {\n\t\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t\t\t\t\tproperties.delete( attribute.data );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tproperties.delete( attribute );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\n\t\t\t\tget: function ( object ) {\n\t\n\t\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\t\n\t\t\t\t\t\treturn geometries[ geometry.id ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\t\n\t\t\t\t\tvar buffergeometry;\n\t\n\t\t\t\t\tif ( geometry.isBufferGeometry ) {\n\t\n\t\t\t\t\t\tbuffergeometry = geometry;\n\t\n\t\t\t\t\t} else if ( geometry.isGeometry ) {\n\t\n\t\t\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\t\n\t\t\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\t\n\t\t\t\t\tinfo.memory.geometries ++;\n\t\n\t\t\t\t\treturn buffergeometry;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLObjects( gl, properties, info ) {\n\t\n\t\t\tvar geometries = new WebGLGeometries( gl, properties, info );\n\t\n\t\t\t//\n\t\n\t\t\tfunction update( object ) {\n\t\n\t\t\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\t\n\t\t\t\tvar geometry = geometries.get( object );\n\t\n\t\t\t\tif ( object.geometry.isGeometry ) {\n\t\n\t\t\t\t\tgeometry.updateFromObject( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// morph targets\n\t\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t\t\t\tfor ( var name in morphAttributes ) {\n\t\n\t\t\t\t\tvar array = morphAttributes[ name ];\n\t\n\t\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn geometry;\n\t\n\t\t\t}\n\t\n\t\t\tfunction updateAttribute( attribute, bufferType ) {\n\t\n\t\t\t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\t\n\t\t\t\tvar attributeProperties = properties.get( data );\n\t\n\t\t\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\t\n\t\t\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\t\n\t\t\t\t} else if ( attributeProperties.version !== data.version ) {\n\t\n\t\t\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\t\n\t\t\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t\t\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\n\t\t\t\tgl.bufferData( bufferType, data.array, usage );\n\t\n\t\t\t\tattributeProperties.version = data.version;\n\t\n\t\t\t}\n\t\n\t\t\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\t\n\t\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t\t\t\tif ( data.dynamic === false ) {\n\t\n\t\t\t\t\tgl.bufferData( bufferType, data.array, gl.STATIC_DRAW );\n\t\n\t\t\t\t} else if ( data.updateRange.count === - 1 ) {\n\t\n\t\t\t\t\t// Not using update ranges\n\t\n\t\t\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\t\n\t\t\t\t} else if ( data.updateRange.count === 0 ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\t\n\t\t\t\t\tdata.updateRange.count = 0; // reset range\n\t\n\t\t\t\t}\n\t\n\t\t\t\tattributeProperties.version = data.version;\n\t\n\t\t\t}\n\t\n\t\t\tfunction getAttributeBuffer( attribute ) {\n\t\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t\t\t}\n\t\n\t\t\tfunction getWireframeAttribute( geometry ) {\n\t\n\t\t\t\tvar property = properties.get( geometry );\n\t\n\t\t\t\tif ( property.wireframe !== undefined ) {\n\t\n\t\t\t\t\treturn property.wireframe;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar indices = [];\n\t\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar position = attributes.position;\n\t\n\t\t\t\t// console.time( 'wireframe' );\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\tvar edges = {};\n\t\t\t\t\tvar array = index.array;\n\t\n\t\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\t\tvar c = array[ i + 2 ];\n\t\n\t\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar array = attributes.position.array;\n\t\n\t\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\t\tvar c = i + 2;\n\t\n\t\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// console.timeEnd( 'wireframe' );\n\t\n\t\t\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\t\n\t\t\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t\t\t\tproperty.wireframe = attribute;\n\t\n\t\t\t\treturn attribute;\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\n\t\t\t\tgetAttributeBuffer: getAttributeBuffer,\n\t\t\t\tgetWireframeAttribute: getWireframeAttribute,\n\t\n\t\t\t\tupdate: update\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\t\n\t\t\tvar _infoMemory = info.memory;\n\t\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\t\n\t\t\t//\n\t\n\t\t\tfunction clampToMaxSize( image, maxSize ) {\n\t\n\t\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\t\n\t\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t\t// premultiplied alpha.\n\t\n\t\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\t\n\t\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\t\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t\t\t\t\treturn canvas;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn image;\n\t\n\t\t\t}\n\t\n\t\t\tfunction isPowerOfTwo( image ) {\n\t\n\t\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\t\n\t\t\t}\n\t\n\t\t\tfunction makePowerOfTwo( image ) {\n\t\n\t\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\t\n\t\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = _Math.nearestPowerOfTwo( image.width );\n\t\t\t\t\tcanvas.height = _Math.nearestPowerOfTwo( image.height );\n\t\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t\t\t\t\treturn canvas;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn image;\n\t\n\t\t\t}\n\t\n\t\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\t\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t}\n\t\n\t\t\t// Fallback filters for non-power-of-2 textures\n\t\n\t\t\tfunction filterFallback( f ) {\n\t\n\t\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\t\n\t\t\t\t\treturn _gl.NEAREST;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn _gl.LINEAR;\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfunction onTextureDispose( event ) {\n\t\n\t\t\t\tvar texture = event.target;\n\t\n\t\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\t\n\t\t\t\tdeallocateTexture( texture );\n\t\n\t\t\t\t_infoMemory.textures --;\n\t\n\t\n\t\t\t}\n\t\n\t\t\tfunction onRenderTargetDispose( event ) {\n\t\n\t\t\t\tvar renderTarget = event.target;\n\t\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t\t\t\tdeallocateRenderTarget( renderTarget );\n\t\n\t\t\t\t_infoMemory.textures --;\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfunction deallocateTexture( texture ) {\n\t\n\t\t\t\tvar textureProperties = properties.get( texture );\n\t\n\t\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\t\n\t\t\t\t\t// cube texture\n\t\n\t\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// 2D texture\n\t\n\t\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\t\n\t\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// remove all webgl properties\n\t\t\t\tproperties.delete( texture );\n\t\n\t\t\t}\n\t\n\t\t\tfunction deallocateRenderTarget( renderTarget ) {\n\t\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t\t\t\tif ( ! renderTarget ) return;\n\t\n\t\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\t\n\t\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( renderTarget.depthTexture ) {\n\t\n\t\t\t\t\trenderTarget.depthTexture.dispose();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tproperties.delete( renderTarget.texture );\n\t\t\t\tproperties.delete( renderTarget );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\n\t\n\t\t\tfunction setTexture2D( texture, slot ) {\n\t\n\t\t\t\tvar textureProperties = properties.get( texture );\n\t\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t\t\t\t\tvar image = texture.image;\n\t\n\t\t\t\t\tif ( image === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\n\t\t\t\t\t} else if ( image.complete === false ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setTextureCube( texture, slot ) {\n\t\n\t\t\t\tvar textureProperties = properties.get( texture );\n\t\n\t\t\t\tif ( texture.image.length === 6 ) {\n\t\n\t\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\t\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\t\n\t\t\t\t\t\t\t_infoMemory.textures ++;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\n\t\t\t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n\t\t\t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\t\n\t\t\t\t\t\tvar cubeImage = [];\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\t\n\t\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\t\tif ( ! isCompressed ) {\n\t\n\t\t\t\t\t\t\t\tif ( isDataTexture ) {\n\t\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\t\n\t\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\t\n\t\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\t\n\t\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\t\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\t\n\t\t\t\tvar extension;\n\t\n\t\t\t\tif ( isPowerOfTwoImage ) {\n\t\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\t\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\t\n\t\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\t\n\t\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t\t\t\tif ( extension ) {\n\t\n\t\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\t\n\t\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\t\n\t\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\t\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\t\n\t\t\t\t\ttextureProperties.__webglInit = true;\n\t\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t\t\t\t\t_infoMemory.textures ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\n\t\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\t\n\t\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\t\n\t\t\t\t\timage = makePowerOfTwo( image );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\t\n\t\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\t\n\t\t\t\tif ( (texture && texture.isDepthTexture) ) {\n\t\n\t\t\t\t\t// populate depth texture with dummy data\n\t\n\t\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\t\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\t\n\t\t\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\n\t\t\t\t\t} else if ( _isWebGL2 ) {\n\t\n\t\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\t\n\t\t\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\t\n\t\t\t\t} else if ( (texture && texture.isDataTexture) ) {\n\t\n\t\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\t\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// regular Texture (image, video, canvas)\n\t\n\t\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t\t}\n\t\n\t\t\t// Render targets\n\t\n\t\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\t\n\t\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t\t\t}\n\t\n\t\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\t\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\n\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\t\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\t\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\n\t\t\t}\n\t\n\t\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\t\n\t\t\t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\t\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\t\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t\t\t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\t\n\t\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t\t}\n\t\n\t\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\t\n\t\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\n\t\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\t\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\t\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthrow new Error('Unknown depthTexture format')\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Setup GL resources for a non-texture depth buffer\n\t\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\t\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t\t\t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\n\t\t\t\tif ( renderTarget.depthTexture ) {\n\t\n\t\t\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\n\t\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t\t\t}\n\t\n\t\t\t// Set up GL resources for the render target\n\t\t\tfunction setupRenderTarget( renderTarget ) {\n\t\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t\t\t\t_infoMemory.textures ++;\n\t\n\t\t\t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\n\t\t\t\t// Setup framebuffer\n\t\n\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Setup color buffer\n\t\n\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\t\n\t\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Setup depth and stencil buffers\n\t\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\t\n\t\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\t\n\t\t\t\tvar texture = renderTarget.texture;\n\t\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\t\t\ttexture.minFilter !== NearestFilter &&\n\t\t\t\t\t\ttexture.minFilter !== LinearFilter ) {\n\t\n\t\t\t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\t\n\t\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\t\tstate.bindTexture( target, null );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.setTexture2D = setTexture2D;\n\t\t\tthis.setTextureCube = setTextureCube;\n\t\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author fordacious / fordacious.github.io\n\t\t */\n\t\n\t\tfunction WebGLProperties() {\n\t\n\t\t\tvar properties = {};\n\t\n\t\t\treturn {\n\t\n\t\t\t\tget: function ( object ) {\n\t\n\t\t\t\t\tvar uuid = object.uuid;\n\t\t\t\t\tvar map = properties[ uuid ];\n\t\n\t\t\t\t\tif ( map === undefined ) {\n\t\n\t\t\t\t\t\tmap = {};\n\t\t\t\t\t\tproperties[ uuid ] = map;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn map;\n\t\n\t\t\t\t},\n\t\n\t\t\t\tdelete: function ( object ) {\n\t\n\t\t\t\t\tdelete properties[ object.uuid ];\n\t\n\t\t\t\t},\n\t\n\t\t\t\tclear: function () {\n\t\n\t\t\t\t\tproperties = {};\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLState( gl, extensions, paramThreeToGL ) {\n\t\n\t\t\tfunction ColorBuffer() {\n\t\n\t\t\t\tvar locked = false;\n\t\n\t\t\t\tvar color = new Vector4();\n\t\t\t\tvar currentColorMask = null;\n\t\t\t\tvar currentColorClear = new Vector4();\n\t\n\t\t\t\treturn {\n\t\n\t\t\t\t\tsetMask: function ( colorMask ) {\n\t\n\t\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\t\n\t\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetLocked: function ( lock ) {\n\t\n\t\t\t\t\t\tlocked = lock;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetClear: function ( r, g, b, a ) {\n\t\n\t\t\t\t\t\tcolor.set( r, g, b, a );\n\t\n\t\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\t\n\t\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\t\tcurrentColorClear.copy( color );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\treset: function () {\n\t\n\t\t\t\t\t\tlocked = false;\n\t\n\t\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tfunction DepthBuffer() {\n\t\n\t\t\t\tvar locked = false;\n\t\n\t\t\t\tvar currentDepthMask = null;\n\t\t\t\tvar currentDepthFunc = null;\n\t\t\t\tvar currentDepthClear = null;\n\t\n\t\t\t\treturn {\n\t\n\t\t\t\t\tsetTest: function ( depthTest ) {\n\t\n\t\t\t\t\t\tif ( depthTest ) {\n\t\n\t\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetMask: function ( depthMask ) {\n\t\n\t\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\t\n\t\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetFunc: function ( depthFunc ) {\n\t\n\t\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\t\n\t\t\t\t\t\t\tif ( depthFunc ) {\n\t\n\t\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\t\n\t\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase LessDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetLocked: function ( lock ) {\n\t\n\t\t\t\t\t\tlocked = lock;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetClear: function ( depth ) {\n\t\n\t\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\t\n\t\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\treset: function () {\n\t\n\t\t\t\t\t\tlocked = false;\n\t\n\t\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\t\tcurrentDepthClear = null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tfunction StencilBuffer() {\n\t\n\t\t\t\tvar locked = false;\n\t\n\t\t\t\tvar currentStencilMask = null;\n\t\t\t\tvar currentStencilFunc = null;\n\t\t\t\tvar currentStencilRef = null;\n\t\t\t\tvar currentStencilFuncMask = null;\n\t\t\t\tvar currentStencilFail  = null;\n\t\t\t\tvar currentStencilZFail = null;\n\t\t\t\tvar currentStencilZPass = null;\n\t\t\t\tvar currentStencilClear = null;\n\t\n\t\t\t\treturn {\n\t\n\t\t\t\t\tsetTest: function ( stencilTest ) {\n\t\n\t\t\t\t\t\tif ( stencilTest ) {\n\t\n\t\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetMask: function ( stencilMask ) {\n\t\n\t\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\t\n\t\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\t\n\t\t\t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\t\n\t\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\t\n\t\t\t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\t\n\t\t\t\t\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetLocked: function ( lock ) {\n\t\n\t\t\t\t\t\tlocked = lock;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tsetClear: function ( stencil ) {\n\t\n\t\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\t\n\t\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\treset: function () {\n\t\n\t\t\t\t\t\tlocked = false;\n\t\n\t\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\t\tcurrentStencilClear = null;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar colorBuffer = new ColorBuffer();\n\t\t\tvar depthBuffer = new DepthBuffer();\n\t\t\tvar stencilBuffer = new StencilBuffer();\n\t\n\t\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\t\n\t\t\tvar capabilities = {};\n\t\n\t\t\tvar compressedTextureFormats = null;\n\t\n\t\t\tvar currentBlending = null;\n\t\t\tvar currentBlendEquation = null;\n\t\t\tvar currentBlendSrc = null;\n\t\t\tvar currentBlendDst = null;\n\t\t\tvar currentBlendEquationAlpha = null;\n\t\t\tvar currentBlendSrcAlpha = null;\n\t\t\tvar currentBlendDstAlpha = null;\n\t\t\tvar currentPremultipledAlpha = false;\n\t\n\t\t\tvar currentFlipSided = null;\n\t\t\tvar currentCullFace = null;\n\t\n\t\t\tvar currentLineWidth = null;\n\t\n\t\t\tvar currentPolygonOffsetFactor = null;\n\t\t\tvar currentPolygonOffsetUnits = null;\n\t\n\t\t\tvar currentScissorTest = null;\n\t\n\t\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\n\t\t\tvar currentTextureSlot = null;\n\t\t\tvar currentBoundTextures = {};\n\t\n\t\t\tvar currentScissor = new Vector4();\n\t\t\tvar currentViewport = new Vector4();\n\t\n\t\t\tfunction createTexture( type, target, count ) {\n\t\n\t\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\t\tvar texture = gl.createTexture();\n\t\n\t\t\t\tgl.bindTexture( type, texture );\n\t\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\n\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\t\n\t\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t}\n\t\n\t\t\tvar emptyTextures = {};\n\t\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\t\n\t\t\t//\n\t\n\t\t\tfunction init() {\n\t\n\t\t\t\tclearColor( 0, 0, 0, 1 );\n\t\t\t\tclearDepth( 1 );\n\t\t\t\tclearStencil( 0 );\n\t\n\t\t\t\tenable( gl.DEPTH_TEST );\n\t\t\t\tsetDepthFunc( LessEqualDepth );\n\t\n\t\t\t\tsetFlipSided( false );\n\t\t\t\tsetCullFace( CullFaceBack );\n\t\t\t\tenable( gl.CULL_FACE );\n\t\n\t\t\t\tenable( gl.BLEND );\n\t\t\t\tsetBlending( NormalBlending );\n\t\n\t\t\t}\n\t\n\t\t\tfunction initAttributes() {\n\t\n\t\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tnewAttributes[ i ] = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction enableAttribute( attribute ) {\n\t\n\t\t\t\tnewAttributes[ attribute ] = 1;\n\t\n\t\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\t\n\t\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\t\tattributeDivisors[ attribute ] = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\t\n\t\t\t\tnewAttributes[ attribute ] = 1;\n\t\n\t\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\t\n\t\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction disableUnusedAttributes() {\n\t\n\t\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\t\n\t\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\t\n\t\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction enable( id ) {\n\t\n\t\t\t\tif ( capabilities[ id ] !== true ) {\n\t\n\t\t\t\t\tgl.enable( id );\n\t\t\t\t\tcapabilities[ id ] = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction disable( id ) {\n\t\n\t\t\t\tif ( capabilities[ id ] !== false ) {\n\t\n\t\t\t\t\tgl.disable( id );\n\t\t\t\t\tcapabilities[ id ] = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction getCompressedTextureFormats() {\n\t\n\t\t\t\tif ( compressedTextureFormats === null ) {\n\t\n\t\t\t\t\tcompressedTextureFormats = [];\n\t\n\t\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\t\n\t\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\t\n\t\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn compressedTextureFormats;\n\t\n\t\t\t}\n\t\n\t\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\t\n\t\t\t\tif ( blending !== NoBlending ) {\n\t\n\t\t\t\t\tenable( gl.BLEND );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tdisable( gl.BLEND );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\t\n\t\t\t\t\tif ( blending === AdditiveBlending ) {\n\t\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( blending === SubtractiveBlending ) {\n\t\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( blending === MultiplyBlending ) {\n\t\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( blending === CustomBlending ) {\n\t\n\t\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\t\n\t\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\t\n\t\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\t\n\t\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\t\n\t\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\t\n\t\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// TODO Deprecate\n\t\n\t\t\tfunction setColorWrite( colorWrite ) {\n\t\n\t\t\t\tcolorBuffer.setMask( colorWrite );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setDepthTest( depthTest ) {\n\t\n\t\t\t\tdepthBuffer.setTest( depthTest );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setDepthWrite( depthWrite ) {\n\t\n\t\t\t\tdepthBuffer.setMask( depthWrite );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setDepthFunc( depthFunc ) {\n\t\n\t\t\t\tdepthBuffer.setFunc( depthFunc );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setStencilTest( stencilTest ) {\n\t\n\t\t\t\tstencilBuffer.setTest( stencilTest );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setStencilWrite( stencilWrite ) {\n\t\n\t\t\t\tstencilBuffer.setMask( stencilWrite );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t\t\t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t\t\t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfunction setFlipSided( flipSided ) {\n\t\n\t\t\t\tif ( currentFlipSided !== flipSided ) {\n\t\n\t\t\t\t\tif ( flipSided ) {\n\t\n\t\t\t\t\t\tgl.frontFace( gl.CW );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.frontFace( gl.CCW );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcurrentFlipSided = flipSided;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction setCullFace( cullFace ) {\n\t\n\t\t\t\tif ( cullFace !== CullFaceNone ) {\n\t\n\t\t\t\t\tenable( gl.CULL_FACE );\n\t\n\t\t\t\t\tif ( cullFace !== currentCullFace ) {\n\t\n\t\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\t\n\t\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\t\n\t\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\t\n\t\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tdisable( gl.CULL_FACE );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcurrentCullFace = cullFace;\n\t\n\t\t\t}\n\t\n\t\t\tfunction setLineWidth( width ) {\n\t\n\t\t\t\tif ( width !== currentLineWidth ) {\n\t\n\t\t\t\t\tgl.lineWidth( width );\n\t\n\t\t\t\t\tcurrentLineWidth = width;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\t\n\t\t\t\tif ( polygonOffset ) {\n\t\n\t\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\t\n\t\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\t\n\t\t\t\t\t\tgl.polygonOffset( factor, units );\n\t\n\t\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction getScissorTest() {\n\t\n\t\t\t\treturn currentScissorTest;\n\t\n\t\t\t}\n\t\n\t\t\tfunction setScissorTest( scissorTest ) {\n\t\n\t\t\t\tcurrentScissorTest = scissorTest;\n\t\n\t\t\t\tif ( scissorTest ) {\n\t\n\t\t\t\t\tenable( gl.SCISSOR_TEST );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tdisable( gl.SCISSOR_TEST );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// texture\n\t\n\t\t\tfunction activeTexture( webglSlot ) {\n\t\n\t\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\t\n\t\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\t\n\t\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction bindTexture( webglType, webglTexture ) {\n\t\n\t\t\t\tif ( currentTextureSlot === null ) {\n\t\n\t\t\t\t\tactiveTexture();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\t\n\t\t\t\tif ( boundTexture === undefined ) {\n\t\n\t\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\t\n\t\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\t\n\t\t\t\t\tboundTexture.type = webglType;\n\t\t\t\t\tboundTexture.texture = webglTexture;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction compressedTexImage2D() {\n\t\n\t\t\t\ttry {\n\t\n\t\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\t\n\t\t\t\t} catch ( error ) {\n\t\n\t\t\t\t\tconsole.error( error );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction texImage2D() {\n\t\n\t\t\t\ttry {\n\t\n\t\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\t\n\t\t\t\t} catch ( error ) {\n\t\n\t\t\t\t\tconsole.error( error );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// TODO Deprecate\n\t\n\t\t\tfunction clearColor( r, g, b, a ) {\n\t\n\t\t\t\tcolorBuffer.setClear( r, g, b, a );\n\t\n\t\t\t}\n\t\n\t\t\tfunction clearDepth( depth ) {\n\t\n\t\t\t\tdepthBuffer.setClear( depth );\n\t\n\t\t\t}\n\t\n\t\t\tfunction clearStencil( stencil ) {\n\t\n\t\t\t\tstencilBuffer.setClear( stencil );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfunction scissor( scissor ) {\n\t\n\t\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\t\n\t\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\t\tcurrentScissor.copy( scissor );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction viewport( viewport ) {\n\t\n\t\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\t\n\t\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\t\tcurrentViewport.copy( viewport );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfunction reset() {\n\t\n\t\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\t\n\t\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\t\n\t\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcapabilities = {};\n\t\n\t\t\t\tcompressedTextureFormats = null;\n\t\n\t\t\t\tcurrentTextureSlot = null;\n\t\t\t\tcurrentBoundTextures = {};\n\t\n\t\t\t\tcurrentBlending = null;\n\t\n\t\t\t\tcurrentFlipSided = null;\n\t\t\t\tcurrentCullFace = null;\n\t\n\t\t\t\tcolorBuffer.reset();\n\t\t\t\tdepthBuffer.reset();\n\t\t\t\tstencilBuffer.reset();\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\n\t\t\t\tbuffers: {\n\t\t\t\t\tcolor: colorBuffer,\n\t\t\t\t\tdepth: depthBuffer,\n\t\t\t\t\tstencil: stencilBuffer\n\t\t\t\t},\n\t\n\t\t\t\tinit: init,\n\t\t\t\tinitAttributes: initAttributes,\n\t\t\t\tenableAttribute: enableAttribute,\n\t\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\t\tenable: enable,\n\t\t\t\tdisable: disable,\n\t\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\t\n\t\t\t\tsetBlending: setBlending,\n\t\n\t\t\t\tsetColorWrite: setColorWrite,\n\t\t\t\tsetDepthTest: setDepthTest,\n\t\t\t\tsetDepthWrite: setDepthWrite,\n\t\t\t\tsetDepthFunc: setDepthFunc,\n\t\t\t\tsetStencilTest: setStencilTest,\n\t\t\t\tsetStencilWrite: setStencilWrite,\n\t\t\t\tsetStencilFunc: setStencilFunc,\n\t\t\t\tsetStencilOp: setStencilOp,\n\t\n\t\t\t\tsetFlipSided: setFlipSided,\n\t\t\t\tsetCullFace: setCullFace,\n\t\n\t\t\t\tsetLineWidth: setLineWidth,\n\t\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\n\t\t\t\tgetScissorTest: getScissorTest,\n\t\t\t\tsetScissorTest: setScissorTest,\n\t\n\t\t\t\tactiveTexture: activeTexture,\n\t\t\t\tbindTexture: bindTexture,\n\t\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\t\ttexImage2D: texImage2D,\n\t\n\t\t\t\tclearColor: clearColor,\n\t\t\t\tclearDepth: clearDepth,\n\t\t\t\tclearStencil: clearStencil,\n\t\n\t\t\t\tscissor: scissor,\n\t\t\t\tviewport: viewport,\n\t\n\t\t\t\treset: reset\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\t\n\t\t\tvar maxAnisotropy;\n\t\n\t\t\tfunction getMaxAnisotropy() {\n\t\n\t\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\t\n\t\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tmaxAnisotropy = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn maxAnisotropy;\n\t\n\t\t\t}\n\t\n\t\t\tfunction getMaxPrecision( precision ) {\n\t\n\t\t\t\tif ( precision === 'highp' ) {\n\t\n\t\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\t\n\t\t\t\t\t\treturn 'highp';\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tprecision = 'mediump';\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( precision === 'mediump' ) {\n\t\n\t\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\t\n\t\t\t\t\t\treturn 'mediump';\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn 'lowp';\n\t\n\t\t\t}\n\t\n\t\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\t\tvar maxPrecision = getMaxPrecision( precision );\n\t\n\t\t\tif ( maxPrecision !== precision ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\t\tprecision = maxPrecision;\n\t\n\t\t\t}\n\t\n\t\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\t\n\t\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\t\n\t\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\t\n\t\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\t\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\n\t\t\treturn {\n\t\n\t\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\n\t\t\t\tprecision: precision,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\n\t\t\t\tmaxTextures: maxTextures,\n\t\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\n\t\t\t\tmaxAttributes: maxAttributes,\n\t\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\t\tmaxVaryings: maxVaryings,\n\t\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\n\t\t\t\tvertexTextures: vertexTextures,\n\t\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\t\tfloatVertexTextures: floatVertexTextures\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WebGLExtensions( gl ) {\n\t\n\t\t\tvar extensions = {};\n\t\n\t\t\treturn {\n\t\n\t\t\t\tget: function ( name ) {\n\t\n\t\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\t\n\t\t\t\t\t\treturn extensions[ name ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar extension;\n\t\n\t\t\t\t\tswitch ( name ) {\n\t\n\t\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\textension = gl.getExtension( name );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( extension === null ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\textensions[ name ] = extension;\n\t\n\t\t\t\t\treturn extension;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction WebGLClipping() {\n\t\n\t\t\tvar scope = this,\n\t\n\t\t\t\tglobalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false,\n\t\n\t\t\t\tplane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\n\t\t\t\tuniform = { value: null, needsUpdate: false };\n\t\n\t\t\tthis.uniform = uniform;\n\t\t\tthis.numPlanes = 0;\n\t\t\tthis.numIntersection = 0;\n\t\n\t\t\tthis.init = function( planes, enableLocalClipping, camera ) {\n\t\n\t\t\t\tvar enabled =\n\t\t\t\t\tplanes.length !== 0 ||\n\t\t\t\t\tenableLocalClipping ||\n\t\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\t\tlocalClippingEnabled;\n\t\n\t\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\n\t\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\t\tnumGlobalPlanes = planes.length;\n\t\n\t\t\t\treturn enabled;\n\t\n\t\t\t};\n\t\n\t\t\tthis.beginShadows = function() {\n\t\n\t\t\t\trenderingShadows = true;\n\t\t\t\tprojectPlanes( null );\n\t\n\t\t\t};\n\t\n\t\t\tthis.endShadows = function() {\n\t\n\t\t\t\trenderingShadows = false;\n\t\t\t\tresetGlobalState();\n\t\n\t\t\t};\n\t\n\t\t\tthis.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\t\n\t\t\t\tif ( ! localClippingEnabled ||\n\t\t\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t\t\t// there's no local clipping\n\t\n\t\t\t\t\tif ( renderingShadows ) {\n\t\t\t\t\t\t// there's no global clipping\n\t\n\t\t\t\t\t\tprojectPlanes( null );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tresetGlobalState();\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4,\n\t\n\t\t\t\t\t\tdstArray = cache.clippingState || null;\n\t\n\t\t\t\t\tuniform.value = dstArray; // ensure unique state\n\t\n\t\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\t\n\t\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\t\n\t\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\t\tthis.numPlanes += nGlobal;\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t};\n\t\n\t\t\tfunction resetGlobalState() {\n\t\n\t\t\t\tif ( uniform.value !== globalState ) {\n\t\n\t\t\t\t\tuniform.value = globalState;\n\t\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\t\tscope.numIntersection = 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\t\n\t\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\t\tdstArray = null;\n\t\n\t\t\t\tif ( nPlanes !== 0 ) {\n\t\n\t\t\t\t\tdstArray = uniform.value;\n\t\n\t\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\t\n\t\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\n\t\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\t\n\t\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\t\n\t\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\t\n\t\t\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\t\n\t\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tuniform.value = dstArray;\n\t\t\t\t\tuniform.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscope.numPlanes = nPlanes;\n\t\t\t\t\n\t\t\t\treturn dstArray;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author szimek / https://github.com/szimek/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction WebGLRenderer( parameters ) {\n\t\n\t\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\t\n\t\t\tparameters = parameters || {};\n\t\n\t\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\t\n\t\t\tvar lights = [];\n\t\n\t\t\tvar opaqueObjects = [];\n\t\t\tvar opaqueObjectsLastIndex = - 1;\n\t\t\tvar transparentObjects = [];\n\t\t\tvar transparentObjectsLastIndex = - 1;\n\t\n\t\t\tvar morphInfluences = new Float32Array( 8 );\n\t\n\t\t\tvar sprites = [];\n\t\t\tvar lensFlares = [];\n\t\n\t\t\t// public properties\n\t\n\t\t\tthis.domElement = _canvas;\n\t\t\tthis.context = null;\n\t\n\t\t\t// clearing\n\t\n\t\t\tthis.autoClear = true;\n\t\t\tthis.autoClearColor = true;\n\t\t\tthis.autoClearDepth = true;\n\t\t\tthis.autoClearStencil = true;\n\t\n\t\t\t// scene graph\n\t\n\t\t\tthis.sortObjects = true;\n\t\n\t\t\t// user-defined clipping\n\t\n\t\t\tthis.clippingPlanes = [];\n\t\t\tthis.localClippingEnabled = false;\n\t\n\t\t\t// physically based shading\n\t\n\t\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\t\tthis.gammaInput = false;\n\t\t\tthis.gammaOutput = false;\n\t\n\t\t\t// physical lights\n\t\n\t\t\tthis.physicallyCorrectLights = false;\n\t\n\t\t\t// tone mapping\n\t\n\t\t\tthis.toneMapping = LinearToneMapping;\n\t\t\tthis.toneMappingExposure = 1.0;\n\t\t\tthis.toneMappingWhitePoint = 1.0;\n\t\n\t\t\t// morphs\n\t\n\t\t\tthis.maxMorphTargets = 8;\n\t\t\tthis.maxMorphNormals = 4;\n\t\n\t\t\t// internal properties\n\t\n\t\t\tvar _this = this,\n\t\n\t\t\t// internal state cache\n\t\n\t\t\t_currentProgram = null,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\t\t\t_currentGeometryProgram = '',\n\t\t\t_currentCamera = null,\n\t\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\t\n\t\t\t_currentViewport = new Vector4(),\n\t\n\t\t\t//\n\t\n\t\t\t_usedTextureUnits = 0,\n\t\n\t\t\t//\n\t\n\t\t\t_clearColor = new Color( 0x000000 ),\n\t\t\t_clearAlpha = 0,\n\t\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\t\n\t\t\t_pixelRatio = 1,\n\t\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\t\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\n\t\t\t// frustum\n\t\n\t\t\t_frustum = new Frustum(),\n\t\n\t\t\t// clipping\n\t\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\t\n\t\t\t_sphere = new Sphere(),\n\t\n\t\t\t// camera matrices cache\n\t\n\t\t\t_projScreenMatrix = new Matrix4(),\n\t\n\t\t\t_vector3 = new Vector3(),\n\t\n\t\t\t// light arrays cache\n\t\n\t\t\t_lights = {\n\t\n\t\t\t\thash: '',\n\t\n\t\t\t\tambient: [ 0, 0, 0 ],\n\t\t\t\tdirectional: [],\n\t\t\t\tdirectionalShadowMap: [],\n\t\t\t\tdirectionalShadowMatrix: [],\n\t\t\t\tspot: [],\n\t\t\t\tspotShadowMap: [],\n\t\t\t\tspotShadowMatrix: [],\n\t\t\t\tpoint: [],\n\t\t\t\tpointShadowMap: [],\n\t\t\t\tpointShadowMatrix: [],\n\t\t\t\themi: [],\n\t\n\t\t\t\tshadows: []\n\t\n\t\t\t},\n\t\n\t\t\t// info\n\t\n\t\t\t_infoRender = {\n\t\n\t\t\t\tcalls: 0,\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0,\n\t\t\t\tpoints: 0\n\t\n\t\t\t};\n\t\n\t\t\tthis.info = {\n\t\n\t\t\t\trender: _infoRender,\n\t\t\t\tmemory: {\n\t\n\t\t\t\t\tgeometries: 0,\n\t\t\t\t\ttextures: 0\n\t\n\t\t\t\t},\n\t\t\t\tprograms: null\n\t\n\t\t\t};\n\t\n\t\n\t\t\t// initialize\n\t\n\t\t\tvar _gl;\n\t\n\t\t\ttry {\n\t\n\t\t\t\tvar attributes = {\n\t\t\t\t\talpha: _alpha,\n\t\t\t\t\tdepth: _depth,\n\t\t\t\t\tstencil: _stencil,\n\t\t\t\t\tantialias: _antialias,\n\t\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t\t};\n\t\n\t\t\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\t\n\t\t\t\tif ( _gl === null ) {\n\t\n\t\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\t\n\t\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthrow 'Error creating WebGL context.';\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\t\n\t\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\t\n\t\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\n\t\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\t\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t\t\t} catch ( error ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\t\n\t\t\t}\n\t\n\t\t\tvar extensions = new WebGLExtensions( _gl );\n\t\n\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\textensions.get( 'OES_texture_float' );\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t\t\t\tBufferGeometry.MaxIndex = 4294967296;\n\t\n\t\t\t}\n\t\n\t\t\tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\t\n\t\t\tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\t\t\tvar properties = new WebGLProperties();\n\t\t\tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t\t\tvar objects = new WebGLObjects( _gl, properties, this.info );\n\t\t\tvar programCache = new WebGLPrograms( this, capabilities );\n\t\t\tvar lightCache = new WebGLLights();\n\t\n\t\t\tthis.info.programs = programCache.programs;\n\t\n\t\t\tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\t\tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\t\n\t\t\t//\n\t\n\t\t\tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\t\tvar backgroundCamera2 = new PerspectiveCamera();\n\t\t\tvar backgroundPlaneMesh = new Mesh(\n\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t);\n\t\t\tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n\t\t\tvar backgroundBoxMesh = new Mesh(\n\t\t\t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\t\t\tside: BackSide,\n\t\t\t\t\tdepthTest: false,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\tfog: false\n\t\t\t\t} )\n\t\t\t);\n\t\n\t\t\t//\n\t\n\t\t\tfunction getTargetPixelRatio() {\n\t\n\t\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\n\t\t\t}\n\t\n\t\t\tfunction glClearColor( r, g, b, a ) {\n\t\n\t\t\t\tif ( _premultipliedAlpha === true ) {\n\t\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.clearColor( r, g, b, a );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setDefaultGLState() {\n\t\n\t\t\t\tstate.init();\n\t\n\t\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\t\n\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t\t}\n\t\n\t\t\tfunction resetGLState() {\n\t\n\t\t\t\t_currentProgram = null;\n\t\t\t\t_currentCamera = null;\n\t\n\t\t\t\t_currentGeometryProgram = '';\n\t\t\t\t_currentMaterialId = - 1;\n\t\n\t\t\t\tstate.reset();\n\t\n\t\t\t}\n\t\n\t\t\tsetDefaultGLState();\n\t\n\t\t\tthis.context = _gl;\n\t\t\tthis.capabilities = capabilities;\n\t\t\tthis.extensions = extensions;\n\t\t\tthis.properties = properties;\n\t\t\tthis.state = state;\n\t\n\t\t\t// shadow map\n\t\n\t\t\tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\t\n\t\t\tthis.shadowMap = shadowMap;\n\t\n\t\n\t\t\t// Plugins\n\t\n\t\t\tvar spritePlugin = new SpritePlugin( this, sprites );\n\t\t\tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\t\n\t\t\t// API\n\t\n\t\t\tthis.getContext = function () {\n\t\n\t\t\t\treturn _gl;\n\t\n\t\t\t};\n\t\n\t\t\tthis.getContextAttributes = function () {\n\t\n\t\t\t\treturn _gl.getContextAttributes();\n\t\n\t\t\t};\n\t\n\t\t\tthis.forceContextLoss = function () {\n\t\n\t\t\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\t\n\t\t\t};\n\t\n\t\t\tthis.getMaxAnisotropy = function () {\n\t\n\t\t\t\treturn capabilities.getMaxAnisotropy();\n\t\n\t\t\t};\n\t\n\t\t\tthis.getPrecision = function () {\n\t\n\t\t\t\treturn capabilities.precision;\n\t\n\t\t\t};\n\t\n\t\t\tthis.getPixelRatio = function () {\n\t\n\t\t\t\treturn _pixelRatio;\n\t\n\t\t\t};\n\t\n\t\t\tthis.setPixelRatio = function ( value ) {\n\t\n\t\t\t\tif ( value === undefined ) return;\n\t\n\t\t\t\t_pixelRatio = value;\n\t\n\t\t\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\t\n\t\t\t};\n\t\n\t\t\tthis.getSize = function () {\n\t\n\t\t\t\treturn {\n\t\t\t\t\twidth: _width,\n\t\t\t\t\theight: _height\n\t\t\t\t};\n\t\n\t\t\t};\n\t\n\t\t\tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t\t\t\t_width = width;\n\t\t\t\t_height = height;\n\t\n\t\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t\t_canvas.height = height * _pixelRatio;\n\t\n\t\t\t\tif ( updateStyle !== false ) {\n\t\n\t\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t\t_canvas.style.height = height + 'px';\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.setViewport( 0, 0, width, height );\n\t\n\t\t\t};\n\t\n\t\t\tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t\t\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\t\n\t\t\t};\n\t\n\t\t\tthis.setScissor = function ( x, y, width, height ) {\n\t\n\t\t\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\t\n\t\t\t};\n\t\n\t\t\tthis.setScissorTest = function ( boolean ) {\n\t\n\t\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\t\n\t\t\t};\n\t\n\t\t\t// Clearing\n\t\n\t\t\tthis.getClearColor = function () {\n\t\n\t\t\t\treturn _clearColor;\n\t\n\t\t\t};\n\t\n\t\t\tthis.setClearColor = function ( color, alpha ) {\n\t\n\t\t\t\t_clearColor.set( color );\n\t\n\t\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t\t};\n\t\n\t\t\tthis.getClearAlpha = function () {\n\t\n\t\t\t\treturn _clearAlpha;\n\t\n\t\t\t};\n\t\n\t\t\tthis.setClearAlpha = function ( alpha ) {\n\t\n\t\t\t\t_clearAlpha = alpha;\n\t\n\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t\t};\n\t\n\t\t\tthis.clear = function ( color, depth, stencil ) {\n\t\n\t\t\t\tvar bits = 0;\n\t\n\t\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\t\n\t\t\t\t_gl.clear( bits );\n\t\n\t\t\t};\n\t\n\t\t\tthis.clearColor = function () {\n\t\n\t\t\t\tthis.clear( true, false, false );\n\t\n\t\t\t};\n\t\n\t\t\tthis.clearDepth = function () {\n\t\n\t\t\t\tthis.clear( false, true, false );\n\t\n\t\t\t};\n\t\n\t\t\tthis.clearStencil = function () {\n\t\n\t\t\t\tthis.clear( false, false, true );\n\t\n\t\t\t};\n\t\n\t\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\t\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\t\tthis.clear( color, depth, stencil );\n\t\n\t\t\t};\n\t\n\t\t\t// Reset\n\t\n\t\t\tthis.resetGLState = resetGLState;\n\t\n\t\t\tthis.dispose = function() {\n\t\n\t\t\t\ttransparentObjects = [];\n\t\t\t\ttransparentObjectsLastIndex = -1;\n\t\t\t\topaqueObjects = [];\n\t\t\t\topaqueObjectsLastIndex = -1;\n\t\n\t\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t\t\t};\n\t\n\t\t\t// Events\n\t\n\t\t\tfunction onContextLost( event ) {\n\t\n\t\t\t\tevent.preventDefault();\n\t\n\t\t\t\tresetGLState();\n\t\t\t\tsetDefaultGLState();\n\t\n\t\t\t\tproperties.clear();\n\t\n\t\t\t}\n\t\n\t\t\tfunction onMaterialDispose( event ) {\n\t\n\t\t\t\tvar material = event.target;\n\t\n\t\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\t\n\t\t\t\tdeallocateMaterial( material );\n\t\n\t\t\t}\n\t\n\t\t\t// Buffer deallocation\n\t\n\t\t\tfunction deallocateMaterial( material ) {\n\t\n\t\t\t\treleaseMaterialProgramReference( material );\n\t\n\t\t\t\tproperties.delete( material );\n\t\n\t\t\t}\n\t\n\t\n\t\t\tfunction releaseMaterialProgramReference( material ) {\n\t\n\t\t\t\tvar programInfo = properties.get( material ).program;\n\t\n\t\t\t\tmaterial.program = undefined;\n\t\n\t\t\t\tif ( programInfo !== undefined ) {\n\t\n\t\t\t\t\tprogramCache.releaseProgram( programInfo );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Buffer rendering\n\t\n\t\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\t\n\t\t\t\tstate.initAttributes();\n\t\n\t\t\t\tvar buffers = properties.get( object );\n\t\n\t\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\t\n\t\t\t\tvar attributes = program.getAttributes();\n\t\n\t\t\t\tif ( object.hasPositions ) {\n\t\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( object.hasNormals ) {\n\t\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\n\t\t\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t\t     ! material.isMeshStandardMaterial &&\n\t\t\t\t\t       material.shading === FlatShading ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\t\n\t\t\t\t\t\t\tvar array = object.normalArray;\n\t\n\t\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\t\n\t\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\t\n\t\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\t\n\t\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\t\tstate.enableAttribute( attributes.normal );\n\t\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( object.hasUvs && material.map ) {\n\t\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\t\tstate.enableAttribute( attributes.uv );\n\t\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\t\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\t\tstate.enableAttribute( attributes.color );\n\t\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\t\n\t\t\t\tobject.count = 0;\n\t\n\t\t\t};\n\t\n\t\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\t\n\t\t\t\tsetMaterial( material );\n\t\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t\t\t\tvar updateBuffers = false;\n\t\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\t\n\t\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\t\n\t\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\t\tupdateBuffers = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// morph targets\n\t\n\t\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\t\n\t\t\t\tif ( morphTargetInfluences !== undefined ) {\n\t\n\t\t\t\t\tvar activeInfluences = [];\n\t\n\t\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tactiveInfluences.sort( absNumericalSort );\n\t\n\t\t\t\t\tif ( activeInfluences.length > 8 ) {\n\t\n\t\t\t\t\t\tactiveInfluences.length = 8;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\t\n\t\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\t\n\t\t\t\t\t\t\tvar index = influence[ 1 ];\n\t\n\t\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tmorphInfluences[ i ] = 0.0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\t\n\t\t\t\t\tupdateBuffers = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar rangeFactor = 1;\n\t\n\t\t\t\tif ( material.wireframe === true ) {\n\t\n\t\t\t\t\tindex = objects.getWireframeAttribute( geometry );\n\t\t\t\t\trangeFactor = 2;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar renderer;\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\t\trenderer.setIndex( index );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\trenderer = bufferRenderer;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( updateBuffers ) {\n\t\n\t\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\t\n\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tvar dataCount = 0;\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\tdataCount = index.count;\n\t\n\t\t\t\t} else if ( position !== undefined ) {\n\t\n\t\t\t\t\tdataCount = position.count;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\n\t\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\n\t\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\t\n\t\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\t\n\t\t\t\tif ( drawCount === 0 ) return;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( object.isMesh ) {\n\t\n\t\t\t\t\tif ( material.wireframe === true ) {\n\t\n\t\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tswitch ( object.drawMode ) {\n\t\n\t\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\n\t\t\t\t} else if ( object.isLine ) {\n\t\n\t\t\t\t\tvar lineWidth = material.linewidth;\n\t\n\t\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\t\n\t\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\t\n\t\t\t\t\tif ( object.isLineSegments ) {\n\t\n\t\t\t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object.isPoints ) {\n\t\n\t\t\t\t\trenderer.setMode( _gl.POINTS );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\t\n\t\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\trenderer.render( drawStart, drawCount );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\t\n\t\t\t\tvar extension;\n\t\n\t\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\t\t\tif ( extension === null ) {\n\t\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\t\n\t\t\t\tstate.initAttributes();\n\t\n\t\t\t\tvar geometryAttributes = geometry.attributes;\n\t\n\t\t\t\tvar programAttributes = program.getAttributes();\n\t\n\t\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\t\n\t\t\t\tfor ( var name in programAttributes ) {\n\t\n\t\t\t\t\tvar programAttribute = programAttributes[ name ];\n\t\n\t\t\t\t\tif ( programAttribute >= 0 ) {\n\t\n\t\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\t\n\t\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\n\t\t\t\t\t\t\tif ( array instanceof Float32Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.FLOAT;\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\t\n\t\t\t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.SHORT;\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.INT;\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.BYTE;\n\t\n\t\t\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\t\n\t\t\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\t\n\t\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\t\n\t\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\t\n\t\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\t\n\t\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\t\n\t\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\t\n\t\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\t\n\t\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\t\n\t\t\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tswitch ( value.length ) {\n\t\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\t}\n\t\n\t\t\t// Sorting\n\t\n\t\t\tfunction absNumericalSort( a, b ) {\n\t\n\t\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\t\n\t\t\t}\n\t\n\t\t\tfunction painterSortStable( a, b ) {\n\t\n\t\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t\t\t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\t\n\t\t\t\t\treturn a.material.program.id - b.material.program.id;\n\t\n\t\t\t\t} else if ( a.material.id !== b.material.id ) {\n\t\n\t\t\t\t\treturn a.material.id - b.material.id;\n\t\n\t\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\t\treturn a.z - b.z;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction reversePainterSortStable( a, b ) {\n\t\n\t\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t\t\t\t} if ( a.z !== b.z ) {\n\t\n\t\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Rendering\n\t\n\t\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\t\n\t\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// reset caching for this frame\n\t\n\t\t\t\t_currentGeometryProgram = '';\n\t\t\t\t_currentMaterialId = - 1;\n\t\t\t\t_currentCamera = null;\n\t\n\t\t\t\t// update scene graph\n\t\n\t\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\n\t\t\t\t// update camera matrices and frustum\n\t\n\t\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t\t\t\tlights.length = 0;\n\t\n\t\t\t\topaqueObjectsLastIndex = - 1;\n\t\t\t\ttransparentObjectsLastIndex = - 1;\n\t\n\t\t\t\tsprites.length = 0;\n\t\t\t\tlensFlares.length = 0;\n\t\n\t\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\t\n\t\t\t\tprojectObject( scene, camera );\n\t\n\t\t\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\t\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\t\n\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t\t\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\t\n\t\t\t\tsetupShadows( lights );\n\t\n\t\t\t\tshadowMap.render( scene, camera );\n\t\n\t\t\t\tsetupLights( lights, camera );\n\t\n\t\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\t\n\t\t\t\t//\n\t\n\t\t\t\t_infoRender.calls = 0;\n\t\t\t\t_infoRender.vertices = 0;\n\t\t\t\t_infoRender.faces = 0;\n\t\t\t\t_infoRender.points = 0;\n\t\n\t\t\t\tif ( renderTarget === undefined ) {\n\t\n\t\t\t\t\trenderTarget = null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\t\n\t\t\t\t//\n\t\n\t\t\t\tvar background = scene.background;\n\t\n\t\t\t\tif ( background === null ) {\n\t\n\t\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t\t\t} else if ( background && background.isColor ) {\n\t\n\t\t\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t\t\t\t\tforceClear = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.autoClear || forceClear ) {\n\t\n\t\t\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( background && background.isCubeTexture ) {\n\t\n\t\t\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\t\n\t\t\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\t\n\t\t\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\t\n\t\t\t\t\tobjects.update( backgroundBoxMesh );\n\t\n\t\t\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\t\n\t\t\t\t} else if ( background && background.isTexture ) {\n\t\n\t\t\t\t\tbackgroundPlaneMesh.material.map = background;\n\t\n\t\t\t\t\tobjects.update( backgroundPlaneMesh );\n\t\n\t\t\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( scene.overrideMaterial ) {\n\t\n\t\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\t\n\t\t\t\t\trenderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\t\trenderObjects( transparentObjects, scene, camera, overrideMaterial );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// opaque pass (front-to-back order)\n\t\n\t\t\t\t\tstate.setBlending( NoBlending );\n\t\t\t\t\trenderObjects( opaqueObjects, scene, camera );\n\t\n\t\t\t\t\t// transparent pass (back-to-front order)\n\t\n\t\t\t\t\trenderObjects( transparentObjects, scene, camera );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// custom render plugins (post pass)\n\t\n\t\t\t\tspritePlugin.render( scene, camera );\n\t\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\t\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\n\t\t\t\tif ( renderTarget ) {\n\t\n\t\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\t\n\t\t\t\tstate.setDepthTest( true );\n\t\t\t\tstate.setDepthWrite( true );\n\t\t\t\tstate.setColorWrite( true );\n\t\n\t\t\t\t// _gl.finish();\n\t\n\t\t\t};\n\t\n\t\t\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\t\n\t\t\t\tvar array, index;\n\t\n\t\t\t\t// allocate the next position in the appropriate array\n\t\n\t\t\t\tif ( material.transparent ) {\n\t\n\t\t\t\t\tarray = transparentObjects;\n\t\t\t\t\tindex = ++ transparentObjectsLastIndex;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tarray = opaqueObjects;\n\t\t\t\t\tindex = ++ opaqueObjectsLastIndex;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// recycle existing render item or grow the array\n\t\n\t\t\t\tvar renderItem = array[ index ];\n\t\n\t\t\t\tif ( renderItem !== undefined ) {\n\t\n\t\t\t\t\trenderItem.id = object.id;\n\t\t\t\t\trenderItem.object = object;\n\t\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\t\trenderItem.material = material;\n\t\t\t\t\trenderItem.z = _vector3.z;\n\t\t\t\t\trenderItem.group = group;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\trenderItem = {\n\t\t\t\t\t\tid: object.id,\n\t\t\t\t\t\tobject: object,\n\t\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tz: _vector3.z,\n\t\t\t\t\t\tgroup: group\n\t\t\t\t\t};\n\t\n\t\t\t\t\t// assert( index === array.length );\n\t\t\t\t\tarray.push( renderItem );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// TODO Duplicated code (Frustum)\n\t\n\t\t\tfunction isObjectViewable( object ) {\n\t\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\t\t\tapplyMatrix4( object.matrixWorld );\n\t\n\t\t\t\treturn isSphereViewable( _sphere );\n\t\n\t\t\t}\n\t\n\t\t\tfunction isSpriteViewable( sprite ) {\n\t\n\t\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t\t\t\treturn isSphereViewable( _sphere );\n\t\n\t\t\t}\n\t\n\t\t\tfunction isSphereViewable( sphere ) {\n\t\n\t\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\t\n\t\t\t\tvar numPlanes = _clipping.numPlanes;\n\t\n\t\t\t\tif ( numPlanes === 0 ) return true;\n\t\n\t\t\t\tvar planes = _this.clippingPlanes,\n\t\n\t\t\t\t\tcenter = sphere.center,\n\t\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\t\ti = 0;\n\t\n\t\t\t\tdo {\n\t\n\t\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\t\n\t\t\t\t} while ( ++ i !== numPlanes );\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\tfunction projectObject( object, camera ) {\n\t\n\t\t\t\tif ( object.visible === false ) return;\n\t\n\t\t\t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t\t\t\tif ( visible ) {\n\t\n\t\t\t\t\tif ( object.isLight ) {\n\t\n\t\t\t\t\t\tlights.push( object );\n\t\n\t\t\t\t\t} else if ( object.isSprite ) {\n\t\n\t\t\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\t\n\t\t\t\t\t\t\tsprites.push( object );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( object.isLensFlare ) {\n\t\n\t\t\t\t\t\tlensFlares.push( object );\n\t\n\t\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\t\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\t\n\t\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\t\n\t\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\t\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\t\n\t\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\t\tif ( material.visible === true ) {\n\t\n\t\t\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\n\t\t\t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\t\n\t\t\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t\t\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar children = object.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tprojectObject( children[ i ], camera );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\t\n\t\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar renderItem = renderList[ i ];\n\t\n\t\t\t\t\tvar object = renderItem.object;\n\t\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\t\tvar group = renderItem.group;\n\t\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\t\n\t\t\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\n\t\t\t\t\tif ( object.isImmediateRenderObject ) {\n\t\n\t\t\t\t\t\tsetMaterial( material );\n\t\n\t\t\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\t\n\t\t\t\t\t\t_currentGeometryProgram = '';\n\t\n\t\t\t\t\t\tobject.render( function ( object ) {\n\t\n\t\t\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\t\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction initMaterial( material, fog, object ) {\n\t\n\t\t\t\tvar materialProperties = properties.get( material );\n\t\n\t\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\n\t\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\t\n\t\t\t\tvar program = materialProperties.program;\n\t\t\t\tvar programChange = true;\n\t\n\t\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\t\t// new material\n\t\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\t\n\t\t\t\t} else if ( program.code !== code ) {\n\t\n\t\t\t\t\t// changed glsl or parameters\n\t\t\t\t\treleaseMaterialProgramReference( material );\n\t\n\t\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\t\n\t\t\t\t\t// same glsl and uniform list\n\t\t\t\t\treturn;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// only rebuild uniform list\n\t\t\t\t\tprogramChange = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( programChange ) {\n\t\n\t\t\t\t\tif ( parameters.shaderID ) {\n\t\n\t\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\t\n\t\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\t\n\t\t\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\t\n\t\t\t\t\tmaterialProperties.program = program;\n\t\t\t\t\tmaterial.program = program;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar attributes = program.getAttributes();\n\t\n\t\t\t\tif ( material.morphTargets ) {\n\t\n\t\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\t\n\t\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\t\n\t\t\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\t\n\t\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.morphNormals ) {\n\t\n\t\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\t\n\t\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\t\n\t\t\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\t\n\t\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t     ! material.isRawShaderMaterial ||\n\t\t\t\t       material.clipping === true ) {\n\t\n\t\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmaterialProperties.fog = fog;\n\t\n\t\t\t\t// store the light setup it was created for\n\t\n\t\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\t\n\t\t\t\tif ( material.lights ) {\n\t\n\t\t\t\t\t// wire up the material to this renderer's lighting state\n\t\n\t\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\t\n\t\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\t\tuniformsList =\n\t\t\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\t\n\t\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\n\t\t\t}\n\t\n\t\t\tfunction setMaterial( material ) {\n\t\n\t\t\t\tmaterial.side === DoubleSide\n\t\t\t\t\t? state.disable( _gl.CULL_FACE )\n\t\t\t\t\t: state.enable( _gl.CULL_FACE );\n\t\n\t\t\t\tstate.setFlipSided( material.side === BackSide );\n\t\n\t\t\t\tmaterial.transparent === true\n\t\t\t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t\t\t: state.setBlending( NoBlending );\n\t\n\t\t\t\tstate.setDepthFunc( material.depthFunc );\n\t\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\t\tstate.setDepthWrite( material.depthWrite );\n\t\t\t\tstate.setColorWrite( material.colorWrite );\n\t\t\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\t\n\t\t\t}\n\t\n\t\t\tfunction setProgram( camera, fog, material, object ) {\n\t\n\t\t\t\t_usedTextureUnits = 0;\n\t\n\t\t\t\tvar materialProperties = properties.get( material );\n\t\n\t\t\t\tif ( _clippingEnabled ) {\n\t\n\t\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\t\n\t\t\t\t\t\tvar useCache =\n\t\t\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\t\n\t\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\t\t\tcamera, materialProperties, useCache );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.needsUpdate === false ) {\n\t\n\t\t\t\t\tif ( materialProperties.program === undefined ) {\n\t\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\t\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\t\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes || \n\t\t \t\t\t\t  materialProperties.numIntersection  !== _clipping.numIntersection ) ) {\n\t\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.needsUpdate ) {\n\t\n\t\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\t\tmaterial.needsUpdate = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar refreshProgram = false;\n\t\t\t\tvar refreshMaterial = false;\n\t\t\t\tvar refreshLights = false;\n\t\n\t\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t\t\t\tif ( program.id !== _currentProgram ) {\n\t\n\t\t\t\t\t_gl.useProgram( program.program );\n\t\t\t\t\t_currentProgram = program.id;\n\t\n\t\t\t\t\trefreshProgram = true;\n\t\t\t\t\trefreshMaterial = true;\n\t\t\t\t\trefreshLights = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.id !== _currentMaterialId ) {\n\t\n\t\t\t\t\t_currentMaterialId = material.id;\n\t\n\t\t\t\t\trefreshMaterial = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\t\n\t\t\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\t\n\t\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\t\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\t\n\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\tif ( camera !== _currentCamera ) {\n\t\n\t\t\t\t\t\t_currentCamera = camera;\n\t\n\t\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t\t// the next material that does gets activated:\n\t\n\t\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// load material specific uniforms\n\t\t\t\t\t// (shader material also gets them for the sake of genericity)\n\t\n\t\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\t     material.isMeshPhongMaterial ||\n\t\t\t\t\t     material.isMeshStandardMaterial ||\n\t\t\t\t\t     material.envMap ) {\n\t\n\t\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\t\n\t\t\t\t\t\tif ( uCamPos !== undefined ) {\n\t\n\t\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\t     material.isMeshLambertMaterial ||\n\t\t\t\t\t     material.isMeshBasicMaterial ||\n\t\t\t\t\t     material.isMeshStandardMaterial ||\n\t\t\t\t\t     material.isShaderMaterial ||\n\t\t\t\t\t     material.skinning ) {\n\t\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t\t// not sure why, but otherwise weird things happen\n\t\n\t\t\t\tif ( material.skinning ) {\n\t\n\t\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\t\n\t\t\t\t\tvar skeleton = object.skeleton;\n\t\n\t\t\t\t\tif ( skeleton ) {\n\t\n\t\t\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\t\n\t\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( refreshMaterial ) {\n\t\n\t\t\t\t\tif ( material.lights ) {\n\t\n\t\t\t\t\t\t// the current material requires lighting info\n\t\n\t\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t\t// values\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t\t// the GL state when required\n\t\n\t\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// refresh uniforms common to several materials\n\t\n\t\t\t\t\tif ( fog && material.fog ) {\n\t\n\t\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( material.isMeshBasicMaterial ||\n\t\t\t\t\t     material.isMeshLambertMaterial ||\n\t\t\t\t\t     material.isMeshPhongMaterial ||\n\t\t\t\t\t     material.isMeshStandardMaterial ||\n\t\t\t\t\t     material.isMeshDepthMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// refresh single material specific uniforms\n\t\n\t\t\t\t\tif ( material.isLineBasicMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isLineDashedMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isPointsMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\t\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\t\n\t\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\t\n\t\t\t\t\t\tif ( material.displacementMap ) {\n\t\n\t\t\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\t\n\t\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tWebGLUniforms.upload(\n\t\t\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\t// common matrices\n\t\n\t\t\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\t\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\t\n\t\t\t\treturn program;\n\t\n\t\t\t}\n\t\n\t\t\t// Uniforms (refresh uniforms objects)\n\t\n\t\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\t\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\n\t\t\t\tuniforms.diffuse.value = material.color;\n\t\n\t\t\t\tif ( material.emissive ) {\n\t\n\t\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\n\t\t\t\tif ( material.aoMap ) {\n\t\n\t\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// uv repeat and offset setting priorities\n\t\t\t\t// 1. color map\n\t\t\t\t// 2. specular map\n\t\t\t\t// 3. normal map\n\t\t\t\t// 4. bump map\n\t\t\t\t// 5. alpha map\n\t\t\t\t// 6. emissive map\n\t\n\t\t\t\tvar uvScaleMap;\n\t\n\t\t\t\tif ( material.map ) {\n\t\n\t\t\t\t\tuvScaleMap = material.map;\n\t\n\t\t\t\t} else if ( material.specularMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.specularMap;\n\t\n\t\t\t\t} else if ( material.displacementMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.displacementMap;\n\t\n\t\t\t\t} else if ( material.normalMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.normalMap;\n\t\n\t\t\t\t} else if ( material.bumpMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.bumpMap;\n\t\n\t\t\t\t} else if ( material.roughnessMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\n\t\t\t\t} else if ( material.metalnessMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\n\t\t\t\t} else if ( material.alphaMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.alphaMap;\n\t\n\t\t\t\t} else if ( material.emissiveMap ) {\n\t\n\t\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( uvScaleMap !== undefined ) {\n\t\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\t\n\t\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\t\tvar repeat = uvScaleMap.repeat;\n\t\n\t\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\t\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\t\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsLine( uniforms, material ) {\n\t\n\t\t\t\tuniforms.diffuse.value = material.color;\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsDash( uniforms, material ) {\n\t\n\t\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\t\tuniforms.scale.value = material.scale;\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\t\n\t\t\t\tuniforms.diffuse.value = material.color;\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\t\tuniforms.scale.value = _height * 0.5;\n\t\n\t\t\t\tuniforms.map.value = material.map;\n\t\n\t\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\t\tvar offset = material.map.offset;\n\t\t\t\t\tvar repeat = material.map.repeat;\n\t\n\t\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\t\n\t\t\t\tuniforms.fogColor.value = fog.color;\n\t\n\t\t\t\tif ( fog.isFog ) {\n\t\n\t\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\n\t\t\t\t} else if ( fog.isFogExp2 ) {\n\t\n\t\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\t\n\t\t\t\tif ( material.lightMap ) {\n\t\n\t\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.emissiveMap ) {\n\t\n\t\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\t\n\t\t\t\tuniforms.specular.value = material.specular;\n\t\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\t\n\t\t\t\tif ( material.lightMap ) {\n\t\n\t\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.emissiveMap ) {\n\t\n\t\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.bumpMap ) {\n\t\n\t\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.normalMap ) {\n\t\n\t\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.displacementMap ) {\n\t\n\t\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\t\n\t\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\t\tuniforms.metalness.value = material.metalness;\n\t\n\t\t\t\tif ( material.roughnessMap ) {\n\t\n\t\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.metalnessMap ) {\n\t\n\t\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.lightMap ) {\n\t\n\t\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.emissiveMap ) {\n\t\n\t\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.bumpMap ) {\n\t\n\t\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.normalMap ) {\n\t\n\t\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.displacementMap ) {\n\t\n\t\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.envMap ) {\n\t\n\t\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\t\n\t\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\t\n\t\t\t\trefreshUniformsStandard( uniforms, material );\n\t\n\t\t\t}\n\t\n\t\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\t\n\t\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\t\n\t\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\n\t\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\n\t\t\t}\n\t\n\t\t\t// Lighting\n\t\n\t\t\tfunction setupShadows( lights ) {\n\t\n\t\t\t\tvar lightShadowsLength = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar light = lights[ i ];\n\t\n\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_lights.shadows.length = lightShadowsLength;\n\t\n\t\t\t}\n\t\n\t\t\tfunction setupLights( lights, camera ) {\n\t\n\t\t\t\tvar l, ll, light,\n\t\t\t\tr = 0, g = 0, b = 0,\n\t\t\t\tcolor,\n\t\t\t\tintensity,\n\t\t\t\tdistance,\n\t\t\t\tshadowMap,\n\t\n\t\t\t\tviewMatrix = camera.matrixWorldInverse,\n\t\n\t\t\t\tdirectionalLength = 0,\n\t\t\t\tpointLength = 0,\n\t\t\t\tspotLength = 0,\n\t\t\t\themiLength = 0;\n\t\n\t\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\t\tlight = lights[ l ];\n\t\n\t\t\t\t\tcolor = light.color;\n\t\t\t\t\tintensity = light.intensity;\n\t\t\t\t\tdistance = light.distance;\n\t\n\t\t\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\t\n\t\t\t\t\tif ( light.isAmbientLight ) {\n\t\n\t\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\t\tb += color.b * intensity;\n\t\n\t\t\t\t\t} else if ( light.isDirectionalLight ) {\n\t\n\t\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t\t\t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\t\n\t\t\t\t\t} else if ( light.isSpotLight ) {\n\t\n\t\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\t\tuniforms.distance = distance;\n\t\n\t\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t\t\t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\t\n\t\t\t\t\t} else if ( light.isPointLight ) {\n\t\n\t\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t\t\t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\n\t\t\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\t\n\t\t\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\t\n\t\t\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\t\n\t\t\t\t\t} else if ( light.isHemisphereLight ) {\n\t\n\t\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\t\tuniforms.direction.normalize();\n\t\n\t\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\t\n\t\t\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_lights.ambient[ 0 ] = r;\n\t\t\t\t_lights.ambient[ 1 ] = g;\n\t\t\t\t_lights.ambient[ 2 ] = b;\n\t\n\t\t\t\t_lights.directional.length = directionalLength;\n\t\t\t\t_lights.spot.length = spotLength;\n\t\t\t\t_lights.point.length = pointLength;\n\t\t\t\t_lights.hemi.length = hemiLength;\n\t\n\t\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\t\n\t\t\t}\n\t\n\t\t\t// GL state setting\n\t\n\t\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\t\n\t\t\t\tstate.setCullFace( cullFace );\n\t\t\t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\t\n\t\t\t};\n\t\n\t\t\t// Textures\n\t\n\t\t\tfunction allocTextureUnit() {\n\t\n\t\t\t\tvar textureUnit = _usedTextureUnits;\n\t\n\t\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\t\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_usedTextureUnits += 1;\n\t\n\t\t\t\treturn textureUnit;\n\t\n\t\t\t}\n\t\n\t\t\tthis.allocTextureUnit = allocTextureUnit;\n\t\n\t\t\t// this.setTexture2D = setTexture2D;\n\t\t\tthis.setTexture2D = ( function() {\n\t\n\t\t\t\tvar warned = false;\n\t\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\treturn function setTexture2D( texture, slot ) {\n\t\n\t\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\t\n\t\t\t\t\t\tif ( ! warned ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\t\twarned = true;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttexture = texture.texture;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t\t\t\t};\n\t\n\t\t\t}() );\n\t\n\t\t\tthis.setTexture = ( function() {\n\t\n\t\t\t\tvar warned = false;\n\t\n\t\t\t\treturn function setTexture( texture, slot ) {\n\t\n\t\t\t\t\tif ( ! warned ) {\n\t\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\t\twarned = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t\t\t\t};\n\t\n\t\t\t}() );\n\t\n\t\t\tthis.setTextureCube = ( function() {\n\t\n\t\t\t\tvar warned = false;\n\t\n\t\t\t\treturn function setTextureCube( texture, slot ) {\n\t\n\t\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\t\n\t\t\t\t\t\tif ( ! warned ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\t\twarned = true;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttexture = texture.texture;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t\t// TODO: unify these code paths\n\t\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\t\n\t\t\t\t\t\t// CompressedTexture can have Array in image :/\n\t\n\t\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\n\t\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}() );\n\t\n\t\t\tthis.getCurrentRenderTarget = function() {\n\t\n\t\t\t\treturn _currentRenderTarget;\n\t\n\t\t\t};\n\t\n\t\t\tthis.setRenderTarget = function ( renderTarget ) {\n\t\n\t\t\t\t_currentRenderTarget = renderTarget;\n\t\n\t\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\t\n\t\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\t\tvar framebuffer;\n\t\n\t\t\t\tif ( renderTarget ) {\n\t\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\n\t\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tframebuffer = null;\n\t\n\t\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t\t_currentScissorTest = _scissorTest;\n\t\n\t\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\t\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t\t_currentFramebuffer = framebuffer;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.scissor( _currentScissor );\n\t\t\t\tstate.setScissorTest( _currentScissorTest );\n\t\n\t\t\t\tstate.viewport( _currentViewport );\n\t\n\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\t\n\t\t\t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\n\t\t\t\tif ( framebuffer ) {\n\t\n\t\t\t\t\tvar restore = false;\n\t\n\t\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\t\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t\t\t\t\t\trestore = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttry {\n\t\n\t\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\t\tvar textureType = texture.type;\n\t\n\t\t\t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\t\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\t\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\t\n\t\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\n\t\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\t\n\t\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} finally {\n\t\n\t\t\t\t\t\tif ( restore ) {\n\t\n\t\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\t// Map three.js constants to WebGL constants\n\t\n\t\t\tfunction paramThreeToGL( p ) {\n\t\n\t\t\t\tvar extension;\n\t\n\t\t\t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t\t\t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\t\t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\t\n\t\t\t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t\t\t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\t\t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\t\n\t\t\t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t\t\t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\t\t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\t\n\t\t\t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\t\t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\t\n\t\t\t\tif ( p === ByteType ) return _gl.BYTE;\n\t\t\t\tif ( p === ShortType ) return _gl.SHORT;\n\t\t\t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\t\t\tif ( p === IntType ) return _gl.INT;\n\t\t\t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\t\t\tif ( p === FloatType ) return _gl.FLOAT;\n\t\n\t\t\t\tif ( p === HalfFloatType ) {\n\t\n\t\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\t\n\t\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t\t\t\tif ( p === RGBFormat ) return _gl.RGB;\n\t\t\t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t\t\t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t\t\t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\t\t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t\t\t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\t\n\t\t\t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t\t\t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\t\t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\t\n\t\t\t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t\t\t\tif ( p === OneFactor ) return _gl.ONE;\n\t\t\t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t\t\t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\t\t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\t\t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\t\t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\t\t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\t\n\t\t\t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t\t\t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\t\t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\t\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\t\n\t\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\n\t\t\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\t\t p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\t\n\t\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\n\t\t\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( p === RGB_ETC1_Format ) {\n\t\n\t\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\n\t\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\t\n\t\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\t\n\t\t\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( p === UnsignedInt248Type ) {\n\t\n\t\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\t\n\t\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn 0;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction FogExp2 ( color, density ) {\n\t\n\t\t\tthis.name = '';\n\t\n\t\t\tthis.color = new Color( color );\n\t\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\t\n\t\t}\n\t\n\t\tFogExp2.prototype.isFogExp2 = true;\n\t\n\t\tFogExp2.prototype.clone = function () {\n\t\n\t\t\treturn new FogExp2( this.color.getHex(), this.density );\n\t\n\t\t};\n\t\n\t\tFogExp2.prototype.toJSON = function ( meta ) {\n\t\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Fog ( color, near, far ) {\n\t\n\t\t\tthis.name = '';\n\t\n\t\t\tthis.color = new Color( color );\n\t\n\t\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\t\n\t\t}\n\t\n\t\tFog.prototype.isFog = true;\n\t\n\t\tFog.prototype.clone = function () {\n\t\n\t\t\treturn new Fog( this.color.getHex(), this.near, this.far );\n\t\n\t\t};\n\t\n\t\tFog.prototype.toJSON = function ( meta ) {\n\t\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Scene () {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Scene';\n\t\n\t\t\tthis.background = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\t\n\t\t}\n\t\n\t\tScene.prototype = Object.create( Object3D.prototype );\n\t\n\t\tScene.prototype.constructor = Scene;\n\t\n\t\tScene.prototype.copy = function ( source, recursive ) {\n\t\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\t\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\t\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tScene.prototype.toJSON = function ( meta ) {\n\t\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\n\t\t\treturn data;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction LensFlare( texture, size, distance, blending, color ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.lensFlares = [];\n\t\n\t\t\tthis.positionScreen = new Vector3();\n\t\t\tthis.customUpdateCallback = undefined;\n\t\n\t\t\tif ( texture !== undefined ) {\n\t\n\t\t\t\tthis.add( texture, size, distance, blending, color );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: LensFlare,\n\t\n\t\t\tisLensFlare: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tObject3D.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\t\n\t\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\t\n\t\t\t\tif ( size === undefined ) size = - 1;\n\t\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t\t\t\tif ( blending === undefined ) blending = NormalBlending;\n\t\n\t\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\t\n\t\t\t\tthis.lensFlares.push( {\n\t\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\t\tcolor: color,\t\t// color\n\t\t\t\t\tblending: blending\t// blending\n\t\t\t\t} );\n\t\n\t\t\t},\n\t\n\t\t\t/*\n\t\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t\t */\n\t\n\t\t\tupdateLensFlares: function () {\n\t\n\t\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\t\tvar flare;\n\t\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\t\tvar vecY = - this.positionScreen.y * 2;\n\t\n\t\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\t\n\t\t\t\t\tflare = this.lensFlares[ f ];\n\t\n\t\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\t\n\t\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  opacity: <float>,\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *\tuvOffset: new THREE.Vector2(),\n\t\t *\tuvScale: new THREE.Vector2()\n\t\t * }\n\t\t */\n\t\n\t\tfunction SpriteMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'SpriteMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff );\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.rotation = 0;\n\t\n\t\t\tthis.fog = false;\n\t\t\tthis.lights = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\t\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\t\n\t\tSpriteMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.rotation = source.rotation;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Sprite( material ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Sprite';\n\t\n\t\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\t\n\t\t}\n\t\n\t\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Sprite,\n\t\n\t\t\tisSprite: true,\n\t\n\t\t\traycast: ( function () {\n\t\n\t\t\t\tvar matrixPosition = new Vector3();\n\t\n\t\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\t\n\t\t\t\t\tif ( distanceSq > guessSizeSq ) {\n\t\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\t\t\tpoint: this.position,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t};\n\t\n\t\t\t}() ),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.material ).copy( this );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction LOD() {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'LOD';\n\t\n\t\t\tObject.defineProperties( this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\n\t\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: LOD,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tObject3D.prototype.copy.call( this, source, false );\n\t\n\t\t\t\tvar levels = source.levels;\n\t\n\t\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar level = levels[ i ];\n\t\n\t\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\taddLevel: function ( object, distance ) {\n\t\n\t\t\t\tif ( distance === undefined ) distance = 0;\n\t\n\t\t\t\tdistance = Math.abs( distance );\n\t\n\t\t\t\tvar levels = this.levels;\n\t\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t\t\t\t\tif ( distance < levels[ l ].distance ) {\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\t\n\t\t\t\tthis.add( object );\n\t\n\t\t\t},\n\t\n\t\t\tgetObjectForDistance: function ( distance ) {\n\t\n\t\t\t\tvar levels = this.levels;\n\t\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn levels[ i - 1 ].object;\n\t\n\t\t\t},\n\t\n\t\t\traycast: ( function () {\n\t\n\t\t\t\tvar matrixPosition = new Vector3();\n\t\n\t\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\t\n\t\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\t\n\t\t\t\t};\n\t\n\t\t\t}() ),\n\t\n\t\t\tupdate: function () {\n\t\n\t\t\t\tvar v1 = new Vector3();\n\t\t\t\tvar v2 = new Vector3();\n\t\n\t\t\t\treturn function update( camera ) {\n\t\n\t\t\t\t\tvar levels = this.levels;\n\t\n\t\t\t\t\tif ( levels.length > 1 ) {\n\t\n\t\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\t\n\t\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\t\n\t\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\t\n\t\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}(),\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\t\tdata.object.levels = [];\n\t\n\t\t\t\tvar levels = this.levels;\n\t\n\t\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar level = levels[ i ];\n\t\n\t\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\t\tdistance: level.distance\n\t\t\t\t\t} );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t\t\tthis.image = { data: data, width: width, height: height };\n\t\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t\t\tthis.generateMipmaps  = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\n\t\t}\n\t\n\t\tDataTexture.prototype = Object.create( Texture.prototype );\n\t\tDataTexture.prototype.constructor = DataTexture;\n\t\n\t\tDataTexture.prototype.isDataTexture = true;\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author michael guerrero / http://realitymeltdown.com\n\t\t * @author ikerr / http://verold.com\n\t\t */\n\t\n\t\tfunction Skeleton( bones, boneInverses, useVertexTexture ) {\n\t\n\t\t\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\t\n\t\t\tthis.identityMatrix = new Matrix4();\n\t\n\t\t\t// copy the bone array\n\t\n\t\t\tbones = bones || [];\n\t\n\t\t\tthis.bones = bones.slice( 0 );\n\t\n\t\t\t// create a bone texture or an array of floats\n\t\n\t\t\tif ( this.useVertexTexture ) {\n\t\n\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\n\t\n\t\t\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\tsize = _Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\t\t\tsize = Math.max( size, 4 );\n\t\n\t\t\t\tthis.boneTextureWidth = size;\n\t\t\t\tthis.boneTextureHeight = size;\n\t\n\t\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\t\t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\t\n\t\t\t}\n\t\n\t\t\t// use the supplied bone inverses or calculate the inverses\n\t\n\t\t\tif ( boneInverses === undefined ) {\n\t\n\t\t\t\tthis.calculateInverses();\n\t\n\t\t\t} else {\n\t\n\t\t\t\tif ( this.bones.length === boneInverses.length ) {\n\t\n\t\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\t\n\t\t\t\t\tthis.boneInverses = [];\n\t\n\t\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tObject.assign( Skeleton.prototype, {\n\t\n\t\t\tcalculateInverses: function () {\n\t\n\t\t\t\tthis.boneInverses = [];\n\t\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\tvar inverse = new Matrix4();\n\t\n\t\t\t\t\tif ( this.bones[ b ] ) {\n\t\n\t\t\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.boneInverses.push( inverse );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tpose: function () {\n\t\n\t\t\t\tvar bone;\n\t\n\t\t\t\t// recover the bind-time world matrices\n\t\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\tbone = this.bones[ b ];\n\t\n\t\t\t\t\tif ( bone ) {\n\t\n\t\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// compute the local matrices, positions, rotations and scales\n\t\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\tbone = this.bones[ b ];\n\t\n\t\t\t\t\tif ( bone ) {\n\t\n\t\t\t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tupdate: ( function () {\n\t\n\t\t\t\tvar offsetMatrix = new Matrix4();\n\t\n\t\t\t\treturn function update() {\n\t\n\t\t\t\t\t// flatten bone matrices to array\n\t\n\t\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\t\t// compute the offset between the current and the original transform\n\t\n\t\t\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\t\n\t\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( this.useVertexTexture ) {\n\t\n\t\t\t\t\t\tthis.boneTexture.needsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t} )(),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author ikerr / http://verold.com\n\t\t */\n\t\n\t\tfunction Bone( skin ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Bone';\n\t\n\t\t\tthis.skin = skin;\n\t\n\t\t}\n\t\n\t\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Bone,\n\t\n\t\t\tisBone: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tObject3D.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.skin = source.skin;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mikael emtinger / http://gomo.se/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author ikerr / http://verold.com\n\t\t */\n\t\n\t\tfunction SkinnedMesh( geometry, material, useVertexTexture ) {\n\t\n\t\t\tMesh.call( this, geometry, material );\n\t\n\t\t\tthis.type = 'SkinnedMesh';\n\t\n\t\t\tthis.bindMode = \"attached\";\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\n\t\t\t// init bones\n\t\n\t\t\t// TODO: remove bone creation as there is no reason (other than\n\t\t\t// convenience) for THREE.SkinnedMesh to do this.\n\t\n\t\t\tvar bones = [];\n\t\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\t\n\t\t\t\tvar bone, gbone;\n\t\n\t\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t\t\t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t\t\t\t\tbone = new Bone( this );\n\t\t\t\t\tbones.push( bone );\n\t\n\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t\t\t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t\t\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\t\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthis.add( bones[ b ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.normalizeSkinWeights();\n\t\n\t\t\tthis.updateMatrixWorld( true );\n\t\t\tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\t\n\t\t}\n\t\n\t\n\t\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\t\n\t\t\tconstructor: SkinnedMesh,\n\t\n\t\t\tisSkinnedMesh: true,\n\t\n\t\t\tbind: function( skeleton, bindMatrix ) {\n\t\n\t\t\t\tthis.skeleton = skeleton;\n\t\n\t\t\t\tif ( bindMatrix === undefined ) {\n\t\n\t\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\t\tthis.skeleton.calculateInverses();\n\t\n\t\t\t\t\tbindMatrix = this.matrixWorld;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\t\n\t\t\t},\n\t\n\t\t\tpose: function () {\n\t\n\t\t\t\tthis.skeleton.pose();\n\t\n\t\t\t},\n\t\n\t\t\tnormalizeSkinWeights: function () {\n\t\n\t\t\t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\t\n\t\t\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\t\n\t\t\t\t\t\tif ( scale !== Infinity ) {\n\t\n\t\t\t\t\t\t\tsw.multiplyScalar( scale );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\tvar vec = new Vector4();\n\t\n\t\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\t\n\t\t\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\t\n\t\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\t\tvec.w = skinWeight.getW( i );\n\t\n\t\t\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\t\n\t\t\t\t\t\tif ( scale !== Infinity ) {\n\t\n\t\t\t\t\t\t\tvec.multiplyScalar( scale );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tupdateMatrixWorld: function( force ) {\n\t\n\t\t\t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\t\n\t\t\t\tif ( this.bindMode === \"attached\" ) {\n\t\n\t\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\t\n\t\t\t\t} else if ( this.bindMode === \"detached\" ) {\n\t\n\t\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tclone: function() {\n\t\n\t\t\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  linewidth: <float>,\n\t\t *  linecap: \"round\",\n\t\t *  linejoin: \"round\"\n\t\t * }\n\t\t */\n\t\n\t\tfunction LineBasicMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff );\n\t\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\n\t\t\tthis.lights = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\t\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\t\n\t\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\t\n\t\tLineBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Line( geometry, material, mode ) {\n\t\n\t\t\tif ( mode === 1 ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\t\treturn new LineSegments( geometry, material );\n\t\n\t\t\t}\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Line';\n\t\n\t\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t\t}\n\t\n\t\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Line,\n\t\n\t\t\tisLine: true,\n\t\n\t\t\traycast: ( function () {\n\t\n\t\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\t\tvar ray = new Ray();\n\t\t\t\tvar sphere = new Sphere();\n\t\n\t\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\t\tvar precisionSq = precision * precision;\n\t\n\t\t\t\t\tvar geometry = this.geometry;\n\t\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t\t\t\t\t// Checking boundingSphere distance to ray\n\t\n\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t\t\t\t\t//\n\t\n\t\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t\t\t\t\tvar vStart = new Vector3();\n\t\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\t\tvar interRay = new Vector3();\n\t\t\t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\t\n\t\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\t\n\t\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\t\n\t\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t\t\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\t\n\t\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t\t\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar nbVertices = vertices.length;\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\t\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\t\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}() ),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction LineSegments( geometry, material ) {\n\t\n\t\t\tLine.call( this, geometry, material );\n\t\n\t\t\tthis.type = 'LineSegments';\n\t\n\t\t}\n\t\n\t\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\t\n\t\t\tconstructor: LineSegments,\n\t\n\t\t\tisLineSegments: true\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  opacity: <float>,\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  size: <float>,\n\t\t *  sizeAttenuation: <bool>\n\t\t * }\n\t\t */\n\t\n\t\tfunction PointsMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'PointsMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff );\n\t\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\n\t\t\tthis.lights = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tPointsMaterial.prototype = Object.create( Material.prototype );\n\t\tPointsMaterial.prototype.constructor = PointsMaterial;\n\t\n\t\tPointsMaterial.prototype.isPointsMaterial = true;\n\t\n\t\tPointsMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Points( geometry, material ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Points';\n\t\n\t\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t\t}\n\t\n\t\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Points,\n\t\n\t\t\tisPoints: true,\n\t\n\t\t\traycast: ( function () {\n\t\n\t\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\t\tvar ray = new Ray();\n\t\t\t\tvar sphere = new Sphere();\n\t\n\t\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\t\tvar object = this;\n\t\t\t\t\tvar geometry = this.geometry;\n\t\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\t\n\t\t\t\t\t// Checking boundingSphere distance to ray\n\t\n\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t\t\t\t\t//\n\t\n\t\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\t\tvar position = new Vector3();\n\t\n\t\t\t\t\tfunction testPoint( point, index ) {\n\t\n\t\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\t\n\t\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\t\n\t\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\t\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\t\n\t\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tobject: object\n\t\n\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\n\t\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\t\n\t\t\t\t\t\t\t\ttestPoint( position, a );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\t\n\t\t\t\t\t\t\t\ttestPoint( position, i );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}() ),\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Group() {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Group';\n\t\n\t\t}\n\t\n\t\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Group\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t\t\tthis.generateMipmaps = false;\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tfunction update() {\n\t\n\t\t\t\trequestAnimationFrame( update );\n\t\n\t\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\t\n\t\t\t\t\tscope.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tupdate();\n\t\n\t\t}\n\t\n\t\tVideoTexture.prototype = Object.create( Texture.prototype );\n\t\tVideoTexture.prototype.constructor = VideoTexture;\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t\t\tthis.image = { width: width, height: height };\n\t\t\tthis.mipmaps = mipmaps;\n\t\n\t\t\t// no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\t\n\t\t\tthis.flipY = false;\n\t\n\t\t\t// can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\t\n\t\t\tthis.generateMipmaps = false;\n\t\n\t\t}\n\t\n\t\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\t\tCompressedTexture.prototype.constructor = CompressedTexture;\n\t\n\t\tCompressedTexture.prototype.isCompressedTexture = true;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t\t\tthis.needsUpdate = true;\n\t\n\t\t}\n\t\n\t\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\t\tCanvasTexture.prototype.constructor = CanvasTexture;\n\t\n\t\t/**\n\t\t * @author Matt DesLauriers / @mattdesl\n\t\t * @author atix / arthursilber.de\n\t\t */\n\t\n\t\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\t\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\t\n\t\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\t\n\t\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\t\n\t\t\t}\n\t\n\t\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t\t\tthis.image = { width: width, height: height };\n\t\n\t\t\tthis.type = type !== undefined ? type : UnsignedShortType;\n\t\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps\t= false;\n\t\n\t\t}\n\t\n\t\tDepthTexture.prototype = Object.create( Texture.prototype );\n\t\tDepthTexture.prototype.constructor = DepthTexture;\n\t\tDepthTexture.prototype.isDepthTexture = true;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction WireframeGeometry( geometry ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tvar edge = [ 0, 0 ], hash = {};\n\t\n\t\t\tfunction sortFunction( a, b ) {\n\t\n\t\t\t\treturn a - b;\n\t\n\t\t\t}\n\t\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar numEdges = 0;\n\t\n\t\t\t\t// allocate maximal size\n\t\t\t\tvar edges = new Uint32Array( 6 * faces.length );\n\t\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t\t\t\t\t\tvar key = edge.toString();\n\t\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t\t\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\t\n\t\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t// Indexed BufferGeometry\n\t\n\t\t\t\t\tvar indices = geometry.index.array;\n\t\t\t\t\tvar vertices = geometry.attributes.position;\n\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\tvar numEdges = 0;\n\t\n\t\t\t\t\tif ( groups.length === 0 ) {\n\t\n\t\t\t\t\t\tgeometry.addGroup( 0, indices.length );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// allocate maximal size\n\t\t\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\t\n\t\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\t\n\t\t\t\t\t\tvar group = groups[ o ];\n\t\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\t\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t\t\t\t\t\t\t\tvar key = edge.toString();\n\t\n\t\t\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\t\t\tnumEdges ++;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t\t\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\t\n\t\t\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// non-indexed BufferGeometry\n\t\n\t\t\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\t\t\tvar numEdges = vertices.length / 3;\n\t\t\t\t\tvar numTris = numEdges / 3;\n\t\n\t\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t\t\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\t\tvar index = 18 * i + 6 * j;\n\t\n\t\t\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\t\n\t\t\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t *\n\t\t * Parametric Surfaces Geometry\n\t\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t\t */\n\t\n\t\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'ParametricBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t};\n\t\n\t\t\t// generate vertices and uvs\n\t\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = [];\n\t\n\t\t\tvar i, j, p;\n\t\t\tvar u, v;\n\t\n\t\t\tvar sliceCount = slices + 1;\n\t\n\t\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\t\n\t\t\t\tv = i / stacks;\n\t\n\t\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\t\n\t\t\t\t\tu = j / slices;\n\t\n\t\t\t\t\tp = func( u, v );\n\t\t\t\t\tvertices.push( p.x, p.y, p.z );\n\t\n\t\t\t\t\tuvs.push( u, v );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tvar indices = [];\n\t\t\tvar a, b, c, d;\n\t\n\t\t\tfor ( i = 0; i < stacks; i ++ ) {\n\t\n\t\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\t\n\t\t\t\t\ta = i * sliceCount + j;\n\t\t\t\t\tb = i * sliceCount + j + 1;\n\t\t\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\t\td = ( i + 1 ) * sliceCount + j;\n\t\n\t\t\t\t\t// faces one and two\n\t\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// build geometry\n\t\n\t\t\tthis.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t\t\tthis.addAttribute( 'position', Float32Attribute( vertices, 3 ) );\n\t\t\tthis.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );\n\t\n\t\t\t// generate normals\n\t\n\t\t\tthis.computeVertexNormals();\n\t\n\t\t}\n\t\n\t\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\t\n\t\t/**\n\t\t * @author zz85 / https://github.com/zz85\n\t\t *\n\t\t * Parametric Surfaces Geometry\n\t\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t\t */\n\t\n\t\tfunction ParametricGeometry( func, slices, stacks ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'ParametricGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tfunc: func,\n\t\t\t\tslices: slices,\n\t\t\t\tstacks: stacks\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\t\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'PolyhedronBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t\tradius = radius || 1;\n\t\t\tdetail = detail || 0;\n\t\n\t\t\t// default buffer data\n\t\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = [];\n\t\n\t\t\t// the subdivision creates the vertex buffer data\n\t\n\t\t\tsubdivide( detail );\n\t\n\t\t\t// all vertices should lie on a conceptual sphere with a given radius\n\t\n\t\t\tappplyRadius( radius );\n\t\n\t\t\t// finally, create the uv data\n\t\n\t\t\tgenerateUVs();\n\t\n\t\t\t// build non-indexed geometry\n\t\n\t\t\tthis.addAttribute( 'position', Float32Attribute( vertexBuffer, 3 ) );\n\t\t\tthis.addAttribute( 'normal', Float32Attribute( vertexBuffer.slice(), 3 ) );\n\t\t\tthis.addAttribute( 'uv', Float32Attribute( uvBuffer, 2 ) );\n\t\t\tthis.normalizeNormals();\n\t\n\t\t\tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\t\t// helper functions\n\t\n\t\t\tfunction subdivide( detail ) {\n\t\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\n\t\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\t\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t\t\t\t\t// get the vertices of the face\n\t\n\t\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\t\n\t\t\t\t\t// perform subdivision\n\t\n\t\t\t\t\tsubdivideFace( a, b, c, detail );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction subdivideFace( a, b, c, detail ) {\n\t\n\t\t\t\tvar cols = Math.pow( 2, detail );\n\t\n\t\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\t\n\t\t\t\tvar v = [];\n\t\n\t\t\t\tvar i, j;\n\t\n\t\t\t\t// construct all of the vertices for this subdivision\n\t\n\t\t\t\tfor ( i = 0 ; i <= cols; i ++ ) {\n\t\n\t\t\t\t\tv[ i ] = [];\n\t\n\t\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\t\n\t\t\t\t\tvar rows = cols - i;\n\t\n\t\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\t\n\t\t\t\t\t\tif ( j === 0 && i === cols ) {\n\t\n\t\t\t\t\t\t\tv[ i ][ j ] = aj;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// construct all of the faces\n\t\n\t\t\t\tfor ( i = 0; i < cols ; i ++ ) {\n\t\n\t\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\t\n\t\t\t\t\t\tvar k = Math.floor( j / 2 );\n\t\n\t\t\t\t\t\tif ( j % 2 === 0 ) {\n\t\n\t\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction appplyRadius( radius ) {\n\t\n\t\t\t\tvar vertex = new Vector3();\n\t\n\t\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\t\n\t\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\t\n\t\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\t\n\t\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\t\n\t\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction generateUVs() {\n\t\n\t\t\t\tvar vertex = new Vector3();\n\t\n\t\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\t\n\t\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\t\n\t\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push( u, 1 - v );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcorrectUVs();\n\t\n\t\t\t\tcorrectSeam();\n\t\n\t\t\t}\n\t\n\t\t\tfunction correctSeam() {\n\t\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\n\t\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\t\n\t\t\t\t\t// uv data of a single face\n\t\n\t\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\t\n\t\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\t\n\t\t\t\t\t// 0.9 is somewhat arbitrary\n\t\n\t\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\t\n\t\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushVertex( vertex ) {\n\t\n\t\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t}\n\t\n\t\t\tfunction getVertexByIndex( index, vertex ) {\n\t\n\t\t\t\tvar stride = index * 3;\n\t\n\t\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\t\tvertex.z = vertices[ stride + 2 ];\n\t\n\t\t\t}\n\t\n\t\t\tfunction correctUVs() {\n\t\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\n\t\t\t\tvar centroid = new Vector3();\n\t\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\t\n\t\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\t\n\t\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\t\n\t\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\t\n\t\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\t\n\t\t\t\t\tvar azi = azimuth( centroid );\n\t\n\t\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction correctUV( uv, stride, vector, azimuth  ) {\n\t\n\t\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\t\n\t\t\t\t\tuvBuffer[ stride ] =  uv.x - 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\t\n\t\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\t\n\t\t\tfunction azimuth( vector ) {\n\t\n\t\t\t\treturn Math.atan2( vector.z, - vector.x );\n\t\n\t\t\t}\n\t\n\t\n\t\t\t// Angle above the XZ plane.\n\t\n\t\t\tfunction inclination( vector ) {\n\t\n\t\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\t\n\t\t\tvar vertices = [\n\t\t\t\t1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t\t\t];\n\t\n\t\t\tvar indices = [\n\t\t\t\t2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t\t\t];\n\t\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\t\tthis.type = 'TetrahedronBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\t\n\t\t/**\n\t\t * @author timothypratley / https://github.com/timothypratley\n\t\t */\n\t\n\t\tfunction TetrahedronGeometry( radius, detail ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction OctahedronBufferGeometry( radius,detail ) {\n\t\n\t\t\tvar vertices = [\n\t\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t\t\t];\n\t\n\t\t\tvar indices = [\n\t\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t\t\t];\n\t\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\t\tthis.type = 'OctahedronBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\t\n\t\t/**\n\t\t * @author timothypratley / https://github.com/timothypratley\n\t\t */\n\t\n\t\tfunction OctahedronGeometry( radius, detail ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\t\n\t\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\n\t\t\tvar vertices = [\n\t\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t\t\t];\n\t\n\t\t\tvar indices = [\n\t\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t\t\t];\n\t\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\t\tthis.type = 'IcosahedronBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\t\n\t\t/**\n\t\t * @author timothypratley / https://github.com/timothypratley\n\t\t */\n\t\n\t\tfunction IcosahedronGeometry( radius, detail ) {\n\t\n\t\t \tGeometry.call( this );\n\t\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\t\n\t\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\t\tvar r = 1 / t;\n\t\n\t\t\tvar vertices = [\n\t\n\t\t\t\t// (±1, ±1, ±1)\n\t\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t\t\t 1,  1, - 1,     1,  1,  1,\n\t\n\t\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t\t 0, - r, - t,     0, - r,  t,\n\t\t\t\t 0,  r, - t,     0,  r,  t,\n\t\n\t\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t\t- r, - t,  0,    - r,  t,  0,\n\t\t\t\t r, - t,  0,     r,  t,  0,\n\t\n\t\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t\t- t,  0, - r,     t,  0, - r,\n\t\t\t\t- t,  0,  r,     t,  0,  r\n\t\t\t];\n\t\n\t\t\tvar indices = [\n\t\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t\t\t];\n\t\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\t\tthis.type = 'DodecahedronBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\t\n\t\t/**\n\t\t * @author Abe Pazos / https://hamoid.com\n\t\t */\n\t\n\t\tfunction DodecahedronGeometry( radius, detail ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\t\n\t\t/**\n\t\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t\t * @author timothypratley / https://github.com/timothypratley\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t*/\n\t\n\t\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t *\n\t\t * Creates a tube which extrudes along a 3d spline.\n\t\t *\n\t\t */\n\t\n\t\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'TubeBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\n\t\t\ttubularSegments = tubularSegments || 64;\n\t\t\tradius = radius || 1;\n\t\t\tradialSegments = radialSegments || 8;\n\t\t\tclosed = closed || false;\n\t\n\t\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\t\n\t\t\t// expose internals\n\t\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals;\n\t\n\t\t\t// helper variables\n\t\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\n\t\t\tvar i, j;\n\t\n\t\t\t// buffer\n\t\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = [];\n\t\n\t\t\t// create buffer data\n\t\n\t\t\tgenerateBufferData();\n\t\n\t\t\t// build geometry\n\t\n\t\t\tthis.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t\t\tthis.addAttribute( 'position', Float32Attribute( vertices, 3 ) );\n\t\t\tthis.addAttribute( 'normal', Float32Attribute( normals, 3 ) );\n\t\t\tthis.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );\n\t\n\t\t\t// functions\n\t\n\t\t\tfunction generateBufferData() {\n\t\n\t\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\t\n\t\t\t\t\tgenerateSegment( i );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\t\n\t\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\t\n\t\t\t\t// uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\t\n\t\t\t\tgenerateUVs();\n\t\n\t\t\t\t// finally create faces\n\t\n\t\t\t\tgenerateIndices();\n\t\n\t\t\t}\n\t\n\t\t\tfunction generateSegment( i ) {\n\t\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\n\t\t\t\tvar P = path.getPointAt( i / tubularSegments );\n\t\n\t\t\t\t// retrieve corresponding normal and binormal\n\t\n\t\t\t\tvar N = frames.normals[ i ];\n\t\t\t\tvar B = frames.binormals[ i ];\n\t\n\t\t\t\t// generate normals and vertices for the current segment\n\t\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t\t\t\t\tvar sin =   Math.sin( v );\n\t\t\t\t\tvar cos = - Math.cos( v );\n\t\n\t\t\t\t\t// normal\n\t\n\t\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\t\tnormal.normalize();\n\t\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t\t\t\t\t// vertex\n\t\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction generateIndices() {\n\t\n\t\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t\t\t\t\t\t// faces\n\t\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction generateUVs() {\n\t\n\t\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\n\t\t\t\t\t\tuvs.push( uv.x, uv.y );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\t\n\t\t/**\n\t\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t\t * @author WestLangley / https://github.com/WestLangley\n\t\t * @author zz85 / https://github.com/zz85\n\t\t * @author miningold / https://github.com/miningold\n\t\t * @author jonobr1 / https://github.com/jonobr1\n\t\t *\n\t\t * Creates a tube which extrudes along a 3d spline.\n\t\t */\n\t\n\t\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'TubeGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\n\t\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\t\n\t\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\t\n\t\t\t// expose internals\n\t\n\t\t\tthis.tangents = bufferGeometry.tangents;\n\t\t\tthis.normals = bufferGeometry.normals;\n\t\t\tthis.binormals = bufferGeometry.binormals;\n\t\n\t\t\t// create geometry\n\t\n\t\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTubeGeometry.prototype.constructor = TubeGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t *\n\t\t * see: http://www.blackpawn.com/texts/pqtorus/\n\t\t */\n\t\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'TorusKnotBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\n\t\t\tradius = radius || 100;\n\t\t\ttube = tube || 40;\n\t\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\t\tp = p || 2;\n\t\t\tq = q || 3;\n\t\n\t\t\t// used to calculate buffer length\n\t\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t\t\t// buffers\n\t\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t\t// helper variables\n\t\t\tvar i, j, index = 0, indexOffset = 0;\n\t\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3();\n\t\n\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\t\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\t\n\t\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\t\n\t\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\t\n\t\t\t\t// calculate orthonormal basis\n\t\n\t\t\t\tT.subVectors( P2, P1 );\n\t\t\t\tN.addVectors( P2, P1 );\n\t\t\t\tB.crossVectors( T, N );\n\t\t\t\tN.crossVectors( B, T );\n\t\n\t\t\t\t// normalize B, N. T can be ignored, we don't use it\n\t\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\t\n\t\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\t\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\t\tvar cy = tube * Math.sin( v );\n\t\n\t\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\t\n\t\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t\t\t\t\t// face one\n\t\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t\t// face two\n\t\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// build geometry\n\t\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.addAttribute( 'position', vertices );\n\t\t\tthis.addAttribute( 'normal', normals );\n\t\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t\t// this function calculates the current position on the torus curve\n\t\n\t\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\t\n\t\t\t\tvar cu = Math.cos( u );\n\t\t\t\tvar su = Math.sin( u );\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos( quOverP );\n\t\n\t\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\t\n\t\t/**\n\t\t * @author oosmoxiecode\n\t\t */\n\t\n\t\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\n\t\t\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\t\n\t\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'TorusBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\n\t\t\tradius = radius || 100;\n\t\t\ttube = tube || 40;\n\t\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\t\tarc = arc || Math.PI * 2;\n\t\n\t\t\t// used to calculate buffer length\n\t\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t\t\t// buffers\n\t\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t\t\t// offset variables\n\t\t\tvar vertexBufferOffset = 0;\n\t\t\tvar uvBufferOffset = 0;\n\t\t\tvar indexBufferOffset = 0;\n\t\n\t\t\t// helper variables\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\n\t\t\tvar j, i;\n\t\n\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\t\tvertex.z = tube * Math.sin( v );\n\t\n\t\t\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\t\n\t\t\t\t\t// this vector is used to calculate the normal\n\t\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\n\t\t\t\t\t// normal\n\t\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\t\n\t\t\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\t\n\t\t\t\t\t// update offsets\n\t\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\t\tuvBufferOffset += 2;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\t\n\t\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\t\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\t\n\t\t\t\t\t// face one\n\t\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t\t\t\t\t// face two\n\t\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t\t\t\t\t// update offset\n\t\t\t\t\tindexBufferOffset += 6;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// build geometry\n\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t\t}\n\t\n\t\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\t\n\t\t/**\n\t\t * @author oosmoxiecode\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t\t */\n\t\n\t\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'TorusGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\n\t\t}\n\t\n\t\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTorusGeometry.prototype.constructor = TorusGeometry;\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t */\n\t\n\t\tvar ShapeUtils = {\n\t\n\t\t\t// calculate area of the contour polygon\n\t\n\t\t\tarea: function ( contour ) {\n\t\n\t\t\t\tvar n = contour.length;\n\t\t\t\tvar a = 0.0;\n\t\n\t\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\t\n\t\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn a * 0.5;\n\t\n\t\t\t},\n\t\n\t\t\ttriangulate: ( function () {\n\t\n\t\t\t\t/**\n\t\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t\t * See original code and more information here:\n\t\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t\t *\n\t\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t\t * www.actionsnippet.com\n\t\t\t\t *\n\t\t\t\t * ported to javascript by Joshua Koo\n\t\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t\t *\n\t\t\t\t */\n\t\n\t\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\t\n\t\t\t\t\tvar p;\n\t\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\t\tvar cx, cy, px, py;\n\t\n\t\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\t\tay = contour[ verts[ u ] ].y;\n\t\n\t\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\t\tby = contour[ verts[ v ] ].y;\n\t\n\t\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\t\tcy = contour[ verts[ w ] ].y;\n\t\n\t\t\t\t\tif ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;\n\t\n\t\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\t\n\t\t\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\t\t\tcX = bx - ax;  cY = by - ay;\n\t\n\t\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\t\n\t\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\t\n\t\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\t\n\t\t\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\t\n\t\t\t\t\t\t// see if p is inside triangle abc\n\t\n\t\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\t\n\t\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// takes in an contour array and returns\n\t\n\t\t\t\treturn function triangulate( contour, indices ) {\n\t\n\t\t\t\t\tvar n = contour.length;\n\t\n\t\t\t\t\tif ( n < 3 ) return null;\n\t\n\t\t\t\t\tvar result = [],\n\t\t\t\t\t\tverts = [],\n\t\t\t\t\t\tvertIndices = [];\n\t\n\t\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\t\n\t\t\t\t\tvar u, v, w;\n\t\n\t\t\t\t\tif ( ShapeUtils.area( contour ) > 0.0 ) {\n\t\n\t\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar nv = n;\n\t\n\t\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\t\n\t\t\t\t\tvar count = 2 * nv;   /* error detection */\n\t\n\t\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\t\n\t\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\t\n\t\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\t\n\t\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\t\n\t\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\t\n\t\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\t\treturn result;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\t\n\t\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\t\n\t\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\t\n\t\t\t\t\t\t\tvar a, b, c, s, t;\n\t\n\t\t\t\t\t\t\t/* true names of the vertices */\n\t\n\t\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\t\tc = verts[ w ];\n\t\n\t\t\t\t\t\t\t/* output Triangle */\n\t\n\t\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\t\tcontour[ c ] ] );\n\t\n\t\n\t\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\t\n\t\t\t\t\t\t\t/* remove v from the remaining polygon */\n\t\n\t\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\t\n\t\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tnv --;\n\t\n\t\t\t\t\t\t\t/* reset error detection counter */\n\t\n\t\t\t\t\t\t\tcount = 2 * nv;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\treturn result;\n\t\n\t\t\t\t}\n\t\n\t\t\t} )(),\n\t\n\t\t\ttriangulateShape: function ( contour, holes ) {\n\t\n\t\t\t\tfunction removeDupEndPts(points) {\n\t\n\t\t\t\t\tvar l = points.length;\n\t\n\t\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t\t\t\t\t\tpoints.pop();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tremoveDupEndPts( contour );\n\t\t\t\tholes.forEach( removeDupEndPts );\n\t\n\t\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\n\t\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\t\n\t\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\n\t\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\n\t\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\n\t\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\t\n\t\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\t\n\t\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\t\n\t\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t\t// not parallel\n\t\n\t\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\t\tif ( limit > 0 ) {\n\t\n\t\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\t\n\t\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( perpSeg2 === limit ) {\n\t\n\t\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\t\n\t\t\t\t\t\t// return real intersection point\n\t\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\t\n\t\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t\t// both segments are points\n\t\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\n\t\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\t\tif ( seg1Pt ) {\n\t\n\t\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\t\tif ( seg2Pt ) {\n\t\n\t\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\t\tif ( seg1dx !== 0 ) {\n\t\n\t\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\n\t\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\n\t\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\n\t\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\n\t\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\n\t\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\t\n\t\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\t\treturn [ seg2min ];\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\t\n\t\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\t\treturn [ seg1min ];\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\n\t\t\t\t\t// The order of legs is important\n\t\n\t\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\t\n\t\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\t\n\t\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t\t// angle != 180 deg.\n\t\n\t\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\t\n\t\t\t\t\t\tif ( from2toAngle > 0 ) {\n\t\n\t\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\tfunction removeHoles( contour, holes ) {\n\t\n\t\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\t\tvar hole;\n\t\n\t\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\n\t\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\t\n\t\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\t\n\t\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\t\n\t\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\t\tif ( ! insideAngle ) {\n\t\n\t\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\t\n\t\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\t\n\t\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\t\n\t\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\t\tif ( ! insideAngle ) {\n\t\n\t\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn\ttrue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\n\t\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\n\t\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar indepHoles = [];\n\t\n\t\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\n\t\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\n\t\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\n\t\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\t\ttmpHole1, tmpHole2;\n\t\n\t\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\t\tindepHoles.push( h );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\t\twhile ( indepHoles.length > 0 ) {\n\t\n\t\t\t\t\t\tcounter --;\n\t\t\t\t\t\tif ( counter < 0 ) {\n\t\n\t\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\t\n\t\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\t\tholeIndex\t= - 1;\n\t\n\t\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\n\t\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\t\n\t\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\t\n\t\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\t\n\t\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\t\n\t\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\t\n\t\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\t\n\t\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\t\n\t\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\tvar i, il, f, face,\n\t\t\t\t\tkey, index,\n\t\t\t\t\tallPointsMap = {};\n\t\n\t\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\t\n\t\t\t\tvar allpoints = contour.concat();\n\t\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\t\n\t\t\t\t// prepare all points map\n\t\n\t\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\t\n\t\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tallPointsMap[ key ] = i;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\t\n\t\t\t\tvar triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\t\n\t\t\t\t// check all face vertices against all points map\n\t\n\t\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tface = triangles[ i ];\n\t\n\t\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\t\n\t\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\t\n\t\t\t\t\t\tindex = allPointsMap[ key ];\n\t\n\t\t\t\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\t\t\t\tface[ f ] = index;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn triangles.concat();\n\t\n\t\t\t},\n\t\n\t\t\tisClockWise: function ( pts ) {\n\t\n\t\t\t\treturn ShapeUtils.area( pts ) < 0;\n\t\n\t\t\t},\n\t\n\t\t\t// Bezier Curves formulas obtained from\n\t\t\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\t\n\t\t\t// Quad Bezier Functions\n\t\n\t\t\tb2: ( function () {\n\t\n\t\t\t\tfunction b2p0( t, p ) {\n\t\n\t\t\t\t\tvar k = 1 - t;\n\t\t\t\t\treturn k * k * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction b2p1( t, p ) {\n\t\n\t\t\t\t\treturn 2 * ( 1 - t ) * t * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction b2p2( t, p ) {\n\t\n\t\t\t\t\treturn t * t * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn function b2( t, p0, p1, p2 ) {\n\t\n\t\t\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )(),\n\t\n\t\t\t// Cubic Bezier Functions\n\t\n\t\t\tb3: ( function () {\n\t\n\t\t\t\tfunction b3p0( t, p ) {\n\t\n\t\t\t\t\tvar k = 1 - t;\n\t\t\t\t\treturn k * k * k * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction b3p1( t, p ) {\n\t\n\t\t\t\t\tvar k = 1 - t;\n\t\t\t\t\treturn 3 * k * k * t * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction b3p2( t, p ) {\n\t\n\t\t\t\t\tvar k = 1 - t;\n\t\t\t\t\treturn 3 * k * t * t * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction b3p3( t, p ) {\n\t\n\t\t\t\t\treturn t * t * t * p;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\t\n\t\t\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )()\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t * Creates extruded geometry from a path shape.\n\t\t *\n\t\t * parameters = {\n\t\t *\n\t\t *  curveSegments: <int>, // number of points on the curves\n\t\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t\t *  amount: <int>, // Depth to extrude the shape\n\t\t *\n\t\t *  bevelEnabled: <bool>, // turn on bevel\n\t\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t\t *  bevelSegments: <int>, // number of bevel layers\n\t\t *\n\t\t *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t\t *  frames: <Object> // containing arrays of tangents, normals, binormals\n\t\t *\n\t\t *  uvGenerator: <Object> // object that provides UV generator functions\n\t\t *\n\t\t * }\n\t\t **/\n\t\n\t\tfunction ExtrudeGeometry( shapes, options ) {\n\t\n\t\t\tif ( typeof( shapes ) === \"undefined\" ) {\n\t\n\t\t\t\tshapes = [];\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\n\t\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\t\n\t\t\tthis.addShapeList( shapes, options );\n\t\n\t\t\tthis.computeFaceNormals();\n\t\n\t\t\t// can't really use automatic vertex normals\n\t\t\t// as then front and back sides get smoothed too\n\t\t\t// should do separate smoothing just for sides\n\t\n\t\t\t//this.computeVertexNormals();\n\t\n\t\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\t\n\t\t}\n\t\n\t\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\t\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\t\n\t\tExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t\t\tvar sl = shapes.length;\n\t\n\t\t\tfor ( var s = 0; s < sl; s ++ ) {\n\t\n\t\t\t\tvar shape = shapes[ s ];\n\t\t\t\tthis.addShape( shape, options );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\t\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\t\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\n\t\t\tvar extrudePath = options.extrudePath;\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\n\t\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\t\n\t\t\tvar splineTube, binormal, normal, position2;\n\t\t\tif ( extrudePath ) {\n\t\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\t\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\n\t\t\t\t// SETUP TNB variables\n\t\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\t\n\t\t\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\t\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\t\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\t\n\t\t\t}\n\t\n\t\t\t// Safeguards if bevels are not enabled\n\t\n\t\t\tif ( ! bevelEnabled ) {\n\t\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\n\t\t\t}\n\t\n\t\t\t// Variables initialization\n\t\n\t\t\tvar ahole, h, hl; // looping of holes\n\t\t\tvar scope = this;\n\t\n\t\t\tvar shapesOffset = this.vertices.length;\n\t\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\t\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\t\n\t\t\tif ( reverse ) {\n\t\n\t\t\t\tvertices = vertices.reverse();\n\t\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\t\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\tahole = holes[ h ];\n\t\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\t\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\t\n\t\t\t}\n\t\n\t\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t\t\t/* Vertices */\n\t\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\t\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tahole = holes[ h ];\n\t\n\t\t\t\tvertices = vertices.concat( ahole );\n\t\n\t\t\t}\n\t\n\t\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\t\n\t\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\t\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\t\n\t\t\t}\n\t\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\t\n\t\n\t\t\t// Find directions for point movement\n\t\n\t\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\t\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\t\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\t\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t// not collinear\n\t\n\t\t\t\t\t// length of vectors for normalizing\n\t\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\t\n\t\t\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t\t\t\t\t// vector from inPt to intersection point\n\t\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\t\n\t\t\t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// handle special case of collinear edges\n\t\n\t\t\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\t\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\t\n\t\t\t\t\t\t\tdirection_eq = true;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\t\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\t\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\t\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( direction_eq ) {\n\t\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\t\n\t\t\t}\n\t\n\t\n\t\t\tvar contourMovements = [];\n\t\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\t\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\t\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\t\n\t\t\t}\n\t\n\t\t\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\t\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tahole = holes[ h ];\n\t\n\t\t\t\toneHoleMovements = [];\n\t\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\t\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\t\n\t\t\t}\n\t\n\t\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\t\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t\t\t\t// contract shape\n\t\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\n\t\t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// expand holes\n\t\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t\t\t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tbs = bevelSize;\n\t\n\t\t\t// Back facing vertices\n\t\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\t\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\t\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\t\n\t\t\tvar s;\n\t\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\t\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\t\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\t\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\n\t\t\t// Add bevel segments planes\n\t\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\t\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t\t\t\t// contract shape\n\t\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// expand holes\n\t\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t\t\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t/* Faces */\n\t\n\t\t\t// Top and bottom faces\n\t\n\t\t\tbuildLidFaces();\n\t\n\t\t\t// Sides faces\n\t\n\t\t\tbuildSideFaces();\n\t\n\t\n\t\t\t/////  Internal functions\n\t\n\t\t\tfunction buildLidFaces() {\n\t\n\t\t\t\tif ( bevelEnabled ) {\n\t\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\t\n\t\t\t\t\t// Bottom faces\n\t\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\t\n\t\t\t\t\t// Top faces\n\t\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Bottom faces\n\t\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Top faces\n\t\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Create faces for the z-sides of the shape\n\t\n\t\t\tfunction buildSideFaces() {\n\t\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\t\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\t\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\t\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\t\n\t\t\t\twhile ( -- i >= 0 ) {\n\t\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\t\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\t\n\t\t\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\t\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\t\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\t\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\n\t\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\n\t\t\tfunction v( x, y, z ) {\n\t\n\t\t\t\tscope.vertices.push( new Vector3( x, y, z ) );\n\t\n\t\t\t}\n\t\n\t\t\tfunction f3( a, b, c ) {\n\t\n\t\t\t\ta += shapesOffset;\n\t\t\t\tb += shapesOffset;\n\t\t\t\tc += shapesOffset;\n\t\n\t\t\t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\t\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\t\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\t\n\t\t\t}\n\t\n\t\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\t\n\t\t\t\ta += shapesOffset;\n\t\t\t\tb += shapesOffset;\n\t\t\t\tc += shapesOffset;\n\t\t\t\td += shapesOffset;\n\t\n\t\t\t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n\t\t\t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\t\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\t\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tExtrudeGeometry.WorldUVGenerator = {\n\t\n\t\t\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\t\n\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\t\tvar a = vertices[ indexA ];\n\t\t\t\tvar b = vertices[ indexB ];\n\t\t\t\tvar c = vertices[ indexC ];\n\t\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a.x, a.y ),\n\t\t\t\t\tnew Vector2( b.x, b.y ),\n\t\t\t\t\tnew Vector2( c.x, c.y )\n\t\t\t\t];\n\t\n\t\t\t},\n\t\n\t\t\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\t\n\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\t\tvar a = vertices[ indexA ];\n\t\t\t\tvar b = vertices[ indexB ];\n\t\t\t\tvar c = vertices[ indexC ];\n\t\t\t\tvar d = vertices[ indexD ];\n\t\n\t\t\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\n\t\t\t\t\treturn [\n\t\t\t\t\t\tnew Vector2( a.x, 1 - a.z ),\n\t\t\t\t\t\tnew Vector2( b.x, 1 - b.z ),\n\t\t\t\t\t\tnew Vector2( c.x, 1 - c.z ),\n\t\t\t\t\t\tnew Vector2( d.x, 1 - d.z )\n\t\t\t\t\t];\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn [\n\t\t\t\t\t\tnew Vector2( a.y, 1 - a.z ),\n\t\t\t\t\t\tnew Vector2( b.y, 1 - b.z ),\n\t\t\t\t\t\tnew Vector2( c.y, 1 - c.z ),\n\t\t\t\t\t\tnew Vector2( d.y, 1 - d.z )\n\t\t\t\t\t];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * Text = 3D Text\n\t\t *\n\t\t * parameters = {\n\t\t *  font: <THREE.Font>, // font\n\t\t *\n\t\t *  size: <float>, // size of the text\n\t\t *  height: <float>, // thickness to extrude text\n\t\t *  curveSegments: <int>, // number of points on the curves\n\t\t *\n\t\t *  bevelEnabled: <bool>, // turn on bevel\n\t\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t\t *  bevelSize: <float> // how far from text outline is bevel\n\t\t * }\n\t\t */\n\t\n\t\tfunction TextGeometry( text, parameters ) {\n\t\n\t\t\tparameters = parameters || {};\n\t\n\t\t\tvar font = parameters.font;\n\t\n\t\t\tif ( (font && font.isFont) === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\t\treturn new Geometry();\n\t\n\t\t\t}\n\t\n\t\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\t\n\t\t\t// translate parameters to ExtrudeGeometry API\n\t\n\t\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\t\n\t\t\t// defaults\n\t\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\t\n\t\t\tExtrudeGeometry.call( this, shapes, parameters );\n\t\n\t\t\tthis.type = 'TextGeometry';\n\t\n\t\t}\n\t\n\t\tTextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n\t\tTextGeometry.prototype.constructor = TextGeometry;\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t * based on THREE.SphereGeometry\n\t\t */\n\t\n\t\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'SphereBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tradius = radius || 50;\n\t\n\t\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\t\n\t\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\n\t\t\tvar thetaEnd = thetaStart + thetaLength;\n\t\n\t\t\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\t\n\t\t\tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t\tvar index = 0, vertices = [], normal = new Vector3();\n\t\n\t\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\t\n\t\t\t\tvar verticesRow = [];\n\t\n\t\t\t\tvar v = y / heightSegments;\n\t\n\t\t\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\t\n\t\t\t\t\tvar u = x / widthSegments;\n\t\n\t\t\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\n\t\t\t\t\tnormal.set( px, py, pz ).normalize();\n\t\n\t\t\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t\t\t\t\tverticesRow.push( index );\n\t\n\t\t\t\t\tindex ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvertices.push( verticesRow );\n\t\n\t\t\t}\n\t\n\t\t\tvar indices = [];\n\t\n\t\t\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\t\n\t\t\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\t\n\t\t\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\t\n\t\t\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t\t\tthis.addAttribute( 'position', positions );\n\t\t\tthis.addAttribute( 'normal', normals );\n\t\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t\tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\t}\n\t\n\t\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'SphereGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\n\t\t}\n\t\n\t\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\t\tSphereGeometry.prototype.constructor = SphereGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'RingBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tinnerRadius = innerRadius || 20;\n\t\t\touterRadius = outerRadius || 50;\n\t\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\t\n\t\t\t// these are used to calculate buffer length\n\t\t\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t\t\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\t\n\t\t\t// buffers\n\t\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t\t// some helper variables\n\t\t\tvar index = 0, indexOffset = 0, segment;\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar j, i;\n\t\n\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\t// values are generate from the inside of the ring to the outside\n\t\n\t\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\t\n\t\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\t\n\t\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t\t// normal\n\t\t\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// increase the radius for next row of vertices\n\t\t\t\tradius += radiusStep;\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\t\n\t\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\t\n\t\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\t\n\t\t\t\t\tsegment = i + thetaSegmentLevel;\n\t\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = segment;\n\t\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\t\tvar d = segment + 1;\n\t\n\t\t\t\t\t// face one\n\t\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\n\t\t\t\t\t// face two\n\t\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// build geometry\n\t\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.addAttribute( 'position', vertices );\n\t\t\tthis.addAttribute( 'normal', normals );\n\t\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t}\n\t\n\t\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\t\n\t\t/**\n\t\t * @author Kaleb Murphy\n\t\t */\n\t\n\t\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'RingGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\n\t\t}\n\t\n\t\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\t\tRingGeometry.prototype.constructor = RingGeometry;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t\t */\n\t\n\t\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'PlaneGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\n\t\t}\n\t\n\t\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\t\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\t // points - to create a closed torus, one must use a set of points\n\t\t //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t\t // segments - the number of circumference segments to create\n\t\t // phiStart - the starting radian\n\t\t // phiLength - the radian (0 to 2PI) range of the lathed section\n\t\t //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'LatheBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\n\t\t\tsegments = Math.floor( segments ) || 12;\n\t\t\tphiStart = phiStart || 0;\n\t\t\tphiLength = phiLength || Math.PI * 2;\n\t\n\t\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\t\n\t\t\t// these are used to calculate buffer length\n\t\t\tvar vertexCount = ( segments + 1 ) * points.length;\n\t\t\tvar indexCount = segments * points.length * 2 * 3;\n\t\n\t\t\t// buffers\n\t\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t\t// helper variables\n\t\t\tvar index = 0, indexOffset = 0, base;\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar i, j;\n\t\n\t\t\t// generate vertices and uvs\n\t\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\n\t\t\t\tvar sin = Math.sin( phi );\n\t\t\t\tvar cos = Math.cos( phi );\n\t\n\t\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\t\n\t\t\t\t\tbase = j + i * points.length;\n\t\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1;\n\t\n\t\t\t\t\t// face one\n\t\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t\t// face two\n\t\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// build geometry\n\t\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.addAttribute( 'position', vertices );\n\t\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t\t// generate normals\n\t\n\t\t\tthis.computeVertexNormals();\n\t\n\t\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\t\n\t\t\tif( phiLength === Math.PI * 2 ) {\n\t\n\t\t\t\tvar normals = this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3();\n\t\n\t\t\t\t// this is the buffer offset for the last line of vertices\n\t\t\t\tbase = segments * points.length * 3;\n\t\n\t\t\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\t\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\t\tn1.z = normals[ j + 2 ];\n\t\n\t\t\t\t\t// select the normal of the vertex in the last line\n\t\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\t\tn2.z = normals[ base + j + 2 ];\n\t\n\t\t\t\t\t// average normals\n\t\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\t\n\t\t\t\t\t// assign the new values to both normals\n\t\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\t\n\t\t\t\t} // next row\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\t\n\t\t/**\n\t\t * @author astrodud / http://astrodud.isgreat.org/\n\t\t * @author zz85 / https://github.com/zz85\n\t\t * @author bhouston / http://clara.io\n\t\t */\n\t\n\t\t// points - to create a closed torus, one must use a set of points\n\t\t//    like so: [ a, b, c, d, a ], see first is the same as last.\n\t\t// segments - the number of circumference segments to create\n\t\t// phiStart - the starting radian\n\t\t// phiLength - the radian (0 to 2PI) range of the lathed section\n\t\t//    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'LatheGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\t\tLatheGeometry.prototype.constructor = LatheGeometry;\n\t\n\t\t/**\n\t\t * @author jonobr1 / http://jonobr1.com\n\t\t *\n\t\t * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t\t * ExtrudeGeometry.\n\t\t *\n\t\t * parameters = {\n\t\t *\n\t\t *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t\t *\n\t\t *\tmaterial: <int> // material index for front and back faces\n\t\t *\tuvGenerator: <Object> // object that provides UV generator functions\n\t\t *\n\t\t * }\n\t\t **/\n\t\n\t\tfunction ShapeGeometry( shapes, options ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'ShapeGeometry';\n\t\n\t\t\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\t\n\t\t\tthis.addShapeList( shapes, options );\n\t\n\t\t\tthis.computeFaceNormals();\n\t\n\t\t}\n\t\n\t\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\t\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\t\n\t\t/**\n\t\t * Add an array of shapes to THREE.ShapeGeometry.\n\t\t */\n\t\tShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\t\n\t\t\t\tthis.addShape( shapes[ i ], options );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t\t */\n\t\tShapeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t\t\tif ( options === undefined ) options = {};\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t\t\tvar material = options.material;\n\t\t\tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\t\n\t\t\t//\n\t\n\t\t\tvar i, l, hole;\n\t\n\t\t\tvar shapesOffset = this.vertices.length;\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\t\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\t\n\t\t\tif ( reverse ) {\n\t\n\t\t\t\tvertices = vertices.reverse();\n\t\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\t\n\t\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t\t\t\t\thole = holes[ i ];\n\t\n\t\t\t\t\tif ( ShapeUtils.isClockWise( hole ) ) {\n\t\n\t\t\t\t\t\tholes[ i ] = hole.reverse();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treverse = false;\n\t\n\t\t\t}\n\t\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t\t\t// Vertices\n\t\n\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t\t\t\thole = holes[ i ];\n\t\t\t\tvertices = vertices.concat( hole );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar vert, vlen = vertices.length;\n\t\t\tvar face, flen = faces.length;\n\t\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t\t\t\tvert = vertices[ i ];\n\t\n\t\t\t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\tface = faces[ i ];\n\t\n\t\t\t\tvar a = face[ 0 ] + shapesOffset;\n\t\t\t\tvar b = face[ 1 ] + shapesOffset;\n\t\t\t\tvar c = face[ 2 ] + shapesOffset;\n\t\n\t\t\t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\t\n\t\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\n\t\t\tvar edge = [ 0, 0 ], hash = {};\n\t\n\t\t\tfunction sortFunction( a, b ) {\n\t\n\t\t\t\treturn a - b;\n\t\n\t\t\t}\n\t\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t\t\tvar geometry2;\n\t\n\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t\t\t\tgeometry2 = new Geometry();\n\t\t\t\tgeometry2.fromBufferGeometry( geometry );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tgeometry2 = geometry.clone();\n\t\n\t\t\t}\n\t\n\t\t\tgeometry2.mergeVertices();\n\t\t\tgeometry2.computeFaceNormals();\n\t\n\t\t\tvar vertices = geometry2.vertices;\n\t\t\tvar faces = geometry2.faces;\n\t\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t\t\t\t\tvar key = edge.toString();\n\t\n\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t\t\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\thash[ key ].face2 = i;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar coords = [];\n\t\n\t\t\tfor ( var key in hash ) {\n\t\n\t\t\t\tvar h = hash[ key ];\n\t\n\t\t\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\t\n\t\t\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\t\t\tcoords.push( vertex.x );\n\t\t\t\t\tcoords.push( vertex.y );\n\t\t\t\t\tcoords.push( vertex.z );\n\t\n\t\t\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\t\t\tcoords.push( vertex.x );\n\t\t\t\t\tcoords.push( vertex.y );\n\t\t\t\t\tcoords.push( vertex.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\t\n\t\t}\n\t\n\t\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\t\n\t\t/**\n\t\t * @author Mugen87 / https://github.com/Mugen87\n\t\t */\n\t\n\t\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'CylinderBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t\t\theight = height !== undefined ? height : 100;\n\t\n\t\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\n\t\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\t\n\t\t\t// used to calculate buffer length\n\t\n\t\t\tvar nbCap = 0;\n\t\n\t\t\tif ( openEnded === false ) {\n\t\n\t\t\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\t\t\tif ( radiusBottom > 0 ) nbCap ++;\n\t\n\t\t\t}\n\t\n\t\t\tvar vertexCount = calculateVertexCount();\n\t\t\tvar indexCount = calculateIndexCount();\n\t\n\t\t\t// buffers\n\t\n\t\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t\t// helper variables\n\t\n\t\t\tvar index = 0,\n\t\t\t    indexOffset = 0,\n\t\t\t    indexArray = [],\n\t\t\t    halfHeight = height / 2;\n\t\n\t\t\t// group variables\n\t\t\tvar groupStart = 0;\n\t\n\t\t\t// generate geometry\n\t\n\t\t\tgenerateTorso();\n\t\n\t\t\tif ( openEnded === false ) {\n\t\n\t\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\t\n\t\t\t}\n\t\n\t\t\t// build geometry\n\t\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.addAttribute( 'position', vertices );\n\t\t\tthis.addAttribute( 'normal', normals );\n\t\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t\t// helper functions\n\t\n\t\t\tfunction calculateVertexCount() {\n\t\n\t\t\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\t\n\t\t\t\tif ( openEnded === false ) {\n\t\n\t\t\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn count;\n\t\n\t\t\t}\n\t\n\t\t\tfunction calculateIndexCount() {\n\t\n\t\t\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\t\n\t\t\t\tif ( openEnded === false ) {\n\t\n\t\t\t\t\tcount += radialSegments * nbCap * 3;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn count;\n\t\n\t\t\t}\n\t\n\t\t\tfunction generateTorso() {\n\t\n\t\t\t\tvar x, y;\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\n\t\t\t\tvar groupCount = 0;\n\t\n\t\t\t\t// this will be used to calculate the normal\n\t\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\t\n\t\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\t\n\t\t\t\t\tvar indexRow = [];\n\t\n\t\t\t\t\tvar v = y / heightSegments;\n\t\n\t\t\t\t\t// calculate the radius of the current row\n\t\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\t\n\t\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\n\t\t\t\t\t\t// vertex\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t\t\t// normal\n\t\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t\t\t\t\t\t// uv\n\t\t\t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t\t\t\t\t\t// save index of vertex in respective row\n\t\t\t\t\t\tindexRow.push( index );\n\t\n\t\t\t\t\t\t// increase index\n\t\t\t\t\t\tindex ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// now save vertices of the row in our index array\n\t\t\t\t\tindexArray.push( indexRow );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// generate indices\n\t\n\t\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\t\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\t\n\t\t\t\t\t\t// face one\n\t\t\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t\t\t\t\t\t// face two\n\t\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t\t\t\t\t\t// update counters\n\t\t\t\t\t\tgroupCount += 6;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\t\n\t\t\t\t// calculate new start value for groups\n\t\t\t\tgroupStart += groupCount;\n\t\n\t\t\t}\n\t\n\t\t\tfunction generateCap( top ) {\n\t\n\t\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\t\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\n\t\t\t\tvar groupCount = 0;\n\t\n\t\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\t\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tcenterIndexStart = index;\n\t\n\t\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\t\n\t\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\t\n\t\t\t\t\t// normal\n\t\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuv.x = 0.5;\n\t\t\t\t\tuv.y = 0.5;\n\t\n\t\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// save the index of the last center vertex\n\t\t\t\tcenterIndexEnd = index;\n\t\n\t\t\t\t// now we generate the surrounding vertices, normals and uvs\n\t\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t\t// normal\n\t\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// generate indices\n\t\n\t\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\t\tvar i = centerIndexEnd + x;\n\t\n\t\t\t\t\tif ( top === true ) {\n\t\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// update counters\n\t\t\t\t\tgroupCount += 3;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\t\n\t\t\t\t// calculate new start value for groups\n\t\t\t\tgroupStart += groupCount;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'CylinderGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\t\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\t\n\t\t/**\n\t\t * @author abelnation / http://github.com/abelnation\n\t\t */\n\t\n\t\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\t\n\t\t\tthis.type = 'ConeGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\t\tConeGeometry.prototype.constructor = ConeGeometry;\n\t\n\t\t/**\n\t\t * @author: abelnation / http://github.com/abelnation\n\t\t */\n\t\n\t\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\t\n\t\t\tthis.type = 'ConeBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\t\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t */\n\t\n\t\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'CircleBufferGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tradius = radius || 50;\n\t\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\t\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t\t\tvar vertices = segments + 2;\n\t\n\t\t\tvar positions = new Float32Array( vertices * 3 );\n\t\t\tvar normals = new Float32Array( vertices * 3 );\n\t\t\tvar uvs = new Float32Array( vertices * 2 );\n\t\n\t\t\t// center data is already zero, but need to set a few extras\n\t\t\tnormals[ 2 ] = 1.0;\n\t\t\tuvs[ 0 ] = 0.5;\n\t\t\tuvs[ 1 ] = 0.5;\n\t\n\t\t\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\t\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\t\n\t\t\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\t\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\t\n\t\t\t\tnormals[ i + 2 ] = 1; // normal z\n\t\n\t\t\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\t\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\t\n\t\t\t}\n\t\n\t\t\tvar indices = [];\n\t\n\t\t\tfor ( var i = 1; i <= segments; i ++ ) {\n\t\n\t\t\t\tindices.push( i, i + 1, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t\t\tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\t}\n\t\n\t\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\t\n\t\t/**\n\t\t * @author hughes\n\t\t */\n\t\n\t\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'CircleGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\n\t\t}\n\t\n\t\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\t\tCircleGeometry.prototype.constructor = CircleGeometry;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t\t */\n\t\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t\t\tGeometry.call( this );\n\t\n\t\t\tthis.type = 'BoxGeometry';\n\t\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\t\n\t\t}\n\t\n\t\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\t\n\t\n\t\n\t\tvar Geometries = Object.freeze({\n\t\t\tWireframeGeometry: WireframeGeometry,\n\t\t\tParametricGeometry: ParametricGeometry,\n\t\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\t\tOctahedronGeometry: OctahedronGeometry,\n\t\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\t\tTubeGeometry: TubeGeometry,\n\t\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\t\tTorusGeometry: TorusGeometry,\n\t\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\t\tTextGeometry: TextGeometry,\n\t\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\t\tSphereGeometry: SphereGeometry,\n\t\t\tRingGeometry: RingGeometry,\n\t\t\tRingBufferGeometry: RingBufferGeometry,\n\t\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\t\tPlaneGeometry: PlaneGeometry,\n\t\t\tLatheGeometry: LatheGeometry,\n\t\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\t\tShapeGeometry: ShapeGeometry,\n\t\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\t\tEdgesGeometry: EdgesGeometry,\n\t\t\tConeGeometry: ConeGeometry,\n\t\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\t\tCylinderGeometry: CylinderGeometry,\n\t\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\t\tCircleGeometry: CircleGeometry,\n\t\t\tBoxBufferGeometry: BoxBufferGeometry,\n\t\t\tBoxGeometry: BoxGeometry\n\t\t});\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction ShadowMaterial() {\n\t\n\t\t\tShaderMaterial.call( this, {\n\t\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\t\tUniformsLib[ \"lights\" ],\n\t\t\t\t\t{\n\t\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t\t}\n\t\t\t\t] ),\n\t\t\t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t\t\t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t\t\t} );\n\t\n\t\t\tthis.lights = true;\n\t\t\tthis.transparent = true;\n\t\n\t\t\tObject.defineProperties( this, {\n\t\t\t\topacity: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t\t},\n\t\t\t\t\tset: function ( value ) {\n\t\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\tShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\t\n\t\tShadowMaterial.prototype.isShadowMaterial = true;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction RawShaderMaterial( parameters ) {\n\t\n\t\t\tShaderMaterial.call( this, parameters );\n\t\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\n\t\t}\n\t\n\t\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\t\n\t\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction MultiMaterial( materials ) {\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.type = 'MultiMaterial';\n\t\n\t\t\tthis.materials = materials instanceof Array ? materials : [];\n\t\n\t\t\tthis.visible = true;\n\t\n\t\t}\n\t\n\t\tMultiMaterial.prototype = {\n\t\n\t\t\tconstructor: MultiMaterial,\n\t\n\t\t\tisMultiMaterial: true,\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tvar output = {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tversion: 4.2,\n\t\t\t\t\t\ttype: 'material',\n\t\t\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t\t\t},\n\t\t\t\t\tuuid: this.uuid,\n\t\t\t\t\ttype: this.type,\n\t\t\t\t\tmaterials: []\n\t\t\t\t};\n\t\n\t\t\t\tvar materials = this.materials;\n\t\n\t\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\t\t\tdelete material.metadata;\n\t\n\t\t\t\t\toutput.materials.push( material );\n\t\n\t\t\t\t}\n\t\n\t\t\t\toutput.visible = this.visible;\n\t\n\t\t\t\treturn output;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\tvar material = new this.constructor();\n\t\n\t\t\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\t\n\t\t\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmaterial.visible = this.visible;\n\t\n\t\t\t\treturn material;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  roughness: <float>,\n\t\t *  metalness: <float>,\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  lightMap: new THREE.Texture( <Image> ),\n\t\t *  lightMapIntensity: <float>\n\t\t *\n\t\t *  aoMap: new THREE.Texture( <Image> ),\n\t\t *  aoMapIntensity: <float>\n\t\t *\n\t\t *  emissive: <hex>,\n\t\t *  emissiveIntensity: <float>\n\t\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  bumpMap: new THREE.Texture( <Image> ),\n\t\t *  bumpScale: <float>,\n\t\t *\n\t\t *  normalMap: new THREE.Texture( <Image> ),\n\t\t *  normalScale: <Vector2>,\n\t\t *\n\t\t *  displacementMap: new THREE.Texture( <Image> ),\n\t\t *  displacementScale: <float>,\n\t\t *  displacementBias: <float>,\n\t\t *\n\t\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  alphaMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t\t *  envMapIntensity: <float>\n\t\t *\n\t\t *  refractionRatio: <float>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>,\n\t\t *\n\t\t *  skinning: <bool>,\n\t\t *  morphTargets: <bool>,\n\t\t *  morphNormals: <bool>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshStandardMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.defines = { 'STANDARD': '' };\n\t\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\t\tthis.roughness = 0.5;\n\t\t\tthis.metalness = 0.5;\n\t\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\t\tthis.emissive = new Color( 0x000000 );\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\n\t\t\tthis.roughnessMap = null;\n\t\n\t\t\tthis.metalnessMap = null;\n\t\n\t\t\tthis.alphaMap = null;\n\t\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\n\t\t\tthis.refractionRatio = 0.98;\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\t\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\t\n\t\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\t\n\t\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.defines = { 'STANDARD': '' };\n\t\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\t\tthis.emissive.copy( source.emissive );\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalScale.copy( source.normalScale );\n\t\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t *\n\t\t * parameters = {\n\t\t *  reflectivity: <float>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshPhysicalMaterial( parameters ) {\n\t\n\t\t\tMeshStandardMaterial.call( this );\n\t\n\t\t\tthis.defines = { 'PHYSICAL': '' };\n\t\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\n\t\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\t\n\t\t\tthis.clearCoat = 0.0;\n\t\t\tthis.clearCoatRoughness = 0.0;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\t\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\t\n\t\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\t\n\t\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.defines = { 'PHYSICAL': '' };\n\t\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\n\t\t\tthis.clearCoat = source.clearCoat;\n\t\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  specular: <hex>,\n\t\t *  shininess: <float>,\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  lightMap: new THREE.Texture( <Image> ),\n\t\t *  lightMapIntensity: <float>\n\t\t *\n\t\t *  aoMap: new THREE.Texture( <Image> ),\n\t\t *  aoMapIntensity: <float>\n\t\t *\n\t\t *  emissive: <hex>,\n\t\t *  emissiveIntensity: <float>\n\t\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  bumpMap: new THREE.Texture( <Image> ),\n\t\t *  bumpScale: <float>,\n\t\t *\n\t\t *  normalMap: new THREE.Texture( <Image> ),\n\t\t *  normalScale: <Vector2>,\n\t\t *\n\t\t *  displacementMap: new THREE.Texture( <Image> ),\n\t\t *  displacementScale: <float>,\n\t\t *  displacementBias: <float>,\n\t\t *\n\t\t *  specularMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  alphaMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t\t *  combine: THREE.Multiply,\n\t\t *  reflectivity: <float>,\n\t\t *  refractionRatio: <float>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>,\n\t\t *\n\t\t *  skinning: <bool>,\n\t\t *  morphTargets: <bool>,\n\t\t *  morphNormals: <bool>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshPhongMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\t\tthis.specular = new Color( 0x111111 );\n\t\t\tthis.shininess = 30;\n\t\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\t\tthis.emissive = new Color( 0x000000 );\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\n\t\t\tthis.specularMap = null;\n\t\n\t\t\tthis.alphaMap = null;\n\t\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\t\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\t\n\t\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\t\n\t\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.specular.copy( source.specular );\n\t\t\tthis.shininess = source.shininess;\n\t\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\t\tthis.emissive.copy( source.emissive );\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalScale.copy( source.normalScale );\n\t\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\n\t\t\tthis.specularMap = source.specularMap;\n\t\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshNormalMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this, parameters );\n\t\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\n\t\t\tthis.fog = false;\n\t\t\tthis.lights = false;\n\t\t\tthis.morphTargets = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\t\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\t\n\t\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\t\n\t\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  map: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  lightMap: new THREE.Texture( <Image> ),\n\t\t *  lightMapIntensity: <float>\n\t\t *\n\t\t *  aoMap: new THREE.Texture( <Image> ),\n\t\t *  aoMapIntensity: <float>\n\t\t *\n\t\t *  emissive: <hex>,\n\t\t *  emissiveIntensity: <float>\n\t\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  specularMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  alphaMap: new THREE.Texture( <Image> ),\n\t\t *\n\t\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t\t *  combine: THREE.Multiply,\n\t\t *  reflectivity: <float>,\n\t\t *  refractionRatio: <float>,\n\t\t *\n\t\t *  wireframe: <boolean>,\n\t\t *  wireframeLinewidth: <float>,\n\t\t *\n\t\t *  skinning: <bool>,\n\t\t *  morphTargets: <bool>,\n\t\t *  morphNormals: <bool>\n\t\t * }\n\t\t */\n\t\n\t\tfunction MeshLambertMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\n\t\t\tthis.map = null;\n\t\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\t\tthis.emissive = new Color( 0x000000 );\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\n\t\t\tthis.specularMap = null;\n\t\n\t\t\tthis.alphaMap = null;\n\t\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\t\tthis.skinning = false;\n\t\t\tthis.morphTargets = false;\n\t\t\tthis.morphNormals = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\t\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\t\n\t\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\t\n\t\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\n\t\t\tthis.map = source.map;\n\t\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\t\tthis.emissive.copy( source.emissive );\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t\t\tthis.specularMap = source.specularMap;\n\t\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t * parameters = {\n\t\t *  color: <hex>,\n\t\t *  opacity: <float>,\n\t\t *\n\t\t *  linewidth: <float>,\n\t\t *\n\t\t *  scale: <float>,\n\t\t *  dashSize: <float>,\n\t\t *  gapSize: <float>\n\t\t * }\n\t\t */\n\t\n\t\tfunction LineDashedMaterial( parameters ) {\n\t\n\t\t\tMaterial.call( this );\n\t\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\n\t\t\tthis.color = new Color( 0xffffff );\n\t\n\t\t\tthis.linewidth = 1;\n\t\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\n\t\t\tthis.lights = false;\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t\tLineDashedMaterial.prototype = Object.create( Material.prototype );\n\t\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\t\n\t\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\t\n\t\tLineDashedMaterial.prototype.copy = function ( source ) {\n\t\n\t\t\tMaterial.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\n\t\t\tthis.linewidth = source.linewidth;\n\t\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\n\t\n\t\tvar Materials = Object.freeze({\n\t\t\tShadowMaterial: ShadowMaterial,\n\t\t\tSpriteMaterial: SpriteMaterial,\n\t\t\tRawShaderMaterial: RawShaderMaterial,\n\t\t\tShaderMaterial: ShaderMaterial,\n\t\t\tPointsMaterial: PointsMaterial,\n\t\t\tMultiMaterial: MultiMaterial,\n\t\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\t\tLineDashedMaterial: LineDashedMaterial,\n\t\t\tLineBasicMaterial: LineBasicMaterial,\n\t\t\tMaterial: Material\n\t\t});\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tvar Cache = {\n\t\n\t\t\tenabled: false,\n\t\n\t\t\tfiles: {},\n\t\n\t\t\tadd: function ( key, file ) {\n\t\n\t\t\t\tif ( this.enabled === false ) return;\n\t\n\t\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\t\n\t\t\t\tthis.files[ key ] = file;\n\t\n\t\t\t},\n\t\n\t\t\tget: function ( key ) {\n\t\n\t\t\t\tif ( this.enabled === false ) return;\n\t\n\t\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\t\n\t\t\t\treturn this.files[ key ];\n\t\n\t\t\t},\n\t\n\t\t\tremove: function ( key ) {\n\t\n\t\t\t\tdelete this.files[ key ];\n\t\n\t\t\t},\n\t\n\t\t\tclear: function () {\n\t\n\t\t\t\tthis.files = {};\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\t\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\t\n\t\t\tthis.itemStart = function ( url ) {\n\t\n\t\t\t\titemsTotal ++;\n\t\n\t\t\t\tif ( isLoading === false ) {\n\t\n\t\t\t\t\tif ( scope.onStart !== undefined ) {\n\t\n\t\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tisLoading = true;\n\t\n\t\t\t};\n\t\n\t\t\tthis.itemEnd = function ( url ) {\n\t\n\t\t\t\titemsLoaded ++;\n\t\n\t\t\t\tif ( scope.onProgress !== undefined ) {\n\t\n\t\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( itemsLoaded === itemsTotal ) {\n\t\n\t\t\t\t\tisLoading = false;\n\t\n\t\t\t\t\tif ( scope.onLoad !== undefined ) {\n\t\n\t\t\t\t\t\tscope.onLoad();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\tthis.itemError = function ( url ) {\n\t\n\t\t\t\tif ( scope.onError !== undefined ) {\n\t\n\t\t\t\t\tscope.onError( url );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tvar DefaultLoadingManager = new LoadingManager();\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction XHRLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( XHRLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tif ( url === undefined ) url = '';\n\t\n\t\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar cached = Cache.get( url );\n\t\n\t\t\t\tif ( cached !== undefined ) {\n\t\n\t\t\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\t\t\tsetTimeout( function () {\n\t\n\t\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\t\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t\t}, 0 );\n\t\n\t\t\t\t\treturn cached;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Check for data: URI\n\t\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\t\n\t\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\t\tif ( dataUriRegexResult ) {\n\t\n\t\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\t\tvar data = dataUriRegexResult[3];\n\t\n\t\t\t\t\tdata = window.decodeURIComponent(data);\n\t\n\t\t\t\t\tif( isBase64 ) {\n\t\t\t\t\t\tdata = window.atob(data);\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttry {\n\t\n\t\t\t\t\t\tvar response;\n\t\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\t\n\t\t\t\t\t\tswitch ( responseType ) {\n\t\n\t\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\t\tcase 'blob':\n\t\n\t\t\t\t\t\t\t \tresponse = new ArrayBuffer( data.length );\n\t\t\t\t\t\t\t\tvar view = new Uint8Array( response );\n\t\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\t\n\t\t\t\t\t\t\t\t\tresponse = new Blob( [ response ], { \"type\" : mimeType } );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'document':\n\t\n\t\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'json':\n\t\n\t\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tdefault: // 'text' or other\n\t\n\t\t\t\t\t\t\t\tresponse = data;\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\t\twindow.setTimeout( function() {\n\t\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t\t\t}, 0);\n\t\n\t\t\t\t\t} catch ( error ) {\n\t\n\t\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\t\twindow.setTimeout( function() {\n\t\n\t\t\t\t\t\t\tif ( onError ) onError( error );\n\t\n\t\t\t\t\t\t\tscope.manager.itemError( url );\n\t\n\t\t\t\t\t\t}, 0);\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar request = new XMLHttpRequest();\n\t\t\t\t\trequest.open( 'GET', url, true );\n\t\n\t\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\t\n\t\t\t\t\t\tvar response = event.target.response;\n\t\n\t\t\t\t\t\tCache.add( url, response );\n\t\n\t\t\t\t\t\tif ( this.status === 200 ) {\n\t\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t\t\t} else if ( this.status === 0 ) {\n\t\n\t\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\t\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( onError ) onError( event );\n\t\n\t\t\t\t\t\t\tscope.manager.itemError( url );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}, false );\n\t\n\t\t\t\t\tif ( onProgress !== undefined ) {\n\t\n\t\t\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\t\n\t\t\t\t\t\t\tonProgress( event );\n\t\n\t\t\t\t\t\t}, false );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\t\n\t\t\t\t\t\tif ( onError ) onError( event );\n\t\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\n\t\t\t\t\t}, false );\n\t\n\t\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\t\n\t\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\t\n\t\t\t\t\trequest.send( null );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\t\treturn request;\n\t\n\t\t\t},\n\t\n\t\t\tsetPath: function ( value ) {\n\t\n\t\t\t\tthis.path = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetResponseType: function ( value ) {\n\t\n\t\t\t\tthis.responseType = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetWithCredentials: function ( value ) {\n\t\n\t\t\t\tthis.withCredentials = value;\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t *\n\t\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t\t */\n\t\n\t\tfunction CompressedTextureLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t\t// override in sub classes\n\t\t\tthis._parser = null;\n\t\n\t\t}\n\t\n\t\tObject.assign( CompressedTextureLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar images = [];\n\t\n\t\t\t\tvar texture = new CompressedTexture();\n\t\t\t\ttexture.image = images;\n\t\n\t\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t\t\t\tfunction loadTexture( i ) {\n\t\n\t\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\t\n\t\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\tloaded += 1;\n\t\n\t\t\t\t\t\tif ( loaded === 6 ) {\n\t\n\t\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( Array.isArray( url ) ) {\n\t\n\t\t\t\t\tvar loaded = 0;\n\t\n\t\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\t\n\t\t\t\t\t\tloadTexture( i );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\n\t\t\t\t\tloader.load( url, function ( buffer ) {\n\t\n\t\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t\t\t\t\t\tif ( texDatas.isCubemap ) {\n\t\n\t\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\t\n\t\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\t\n\t\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\t\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t},\n\t\n\t\t\tsetPath: function ( value ) {\n\t\n\t\t\t\tthis.path = value;\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author Nikos M. / https://github.com/foo123/\n\t\t *\n\t\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t\t */\n\t\n\t\tvar DataTextureLoader = BinaryTextureLoader;\n\t\tfunction BinaryTextureLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t\t// override in sub classes\n\t\t\tthis._parser = null;\n\t\n\t\t}\n\t\n\t\tObject.assign( BinaryTextureLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar texture = new DataTexture();\n\t\n\t\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t\t\t\tloader.load( url, function ( buffer ) {\n\t\n\t\t\t\t\tvar texData = scope._parser( buffer );\n\t\n\t\t\t\t\tif ( ! texData ) return;\n\t\n\t\t\t\t\tif ( undefined !== texData.image ) {\n\t\n\t\t\t\t\t\ttexture.image = texData.image;\n\t\n\t\t\t\t\t} else if ( undefined !== texData.data ) {\n\t\n\t\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\t\ttexture.image.data = texData.data;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\t\n\t\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\t\n\t\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\t\n\t\t\t\t\tif ( undefined !== texData.format ) {\n\t\n\t\t\t\t\t\ttexture.format = texData.format;\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif ( undefined !== texData.type ) {\n\t\n\t\t\t\t\t\ttexture.type = texData.type;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\t\n\t\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\t\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction ImageLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( ImageLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\t\t\timage.onload = function () {\n\t\n\t\t\t\t\timage.onload = null;\n\t\n\t\t\t\t\tURL.revokeObjectURL( image.src );\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( image );\n\t\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t};\n\t\t\t\timage.onerror = onError;\n\t\n\t\t\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\t\n\t\t\t\t\timage.src = url;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar loader = new XHRLoader();\n\t\t\t\t\tloader.setPath( this.path );\n\t\t\t\t\tloader.setResponseType( 'blob' );\n\t\t\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\t\t\tloader.load( url, function ( blob ) {\n\t\n\t\t\t\t\t\timage.src = URL.createObjectURL( blob );\n\t\n\t\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\t\treturn image;\n\t\n\t\t\t},\n\t\n\t\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\t\tthis.crossOrigin = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetWithCredentials: function ( value ) {\n\t\n\t\t\t\tthis.withCredentials = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetPath: function ( value ) {\n\t\n\t\t\t\tthis.path = value;\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction CubeTextureLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( CubeTextureLoader.prototype, {\n\t\n\t\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar texture = new CubeTexture();\n\t\n\t\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\t\tloader.setPath( this.path );\n\t\n\t\t\t\tvar loaded = 0;\n\t\n\t\t\t\tfunction loadTexture( i ) {\n\t\n\t\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\t\n\t\t\t\t\t\ttexture.images[ i ] = image;\n\t\n\t\t\t\t\t\tloaded ++;\n\t\n\t\t\t\t\t\tif ( loaded === 6 ) {\n\t\n\t\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}, undefined, onError );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\t\n\t\t\t\t\tloadTexture( i );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t},\n\t\n\t\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\t\tthis.crossOrigin = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetPath: function ( value ) {\n\t\n\t\t\t\tthis.path = value;\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction TextureLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( TextureLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar texture = new Texture();\n\t\n\t\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.load( url, function ( image ) {\n\t\n\t\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\t\n\t\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\t\ttexture.image = image;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\tif ( onLoad !== undefined ) {\n\t\n\t\t\t\t\t\tonLoad( texture );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t},\n\t\n\t\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\t\tthis.crossOrigin = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetWithCredentials: function ( value ) {\n\t\n\t\t\t\tthis.withCredentials = value;\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetPath: function ( value ) {\n\t\n\t\t\t\tthis.path = value;\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Light( color, intensity ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Light';\n\t\n\t\t\tthis.color = new Color( color );\n\t\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\t\n\t\t\tthis.receiveShadow = undefined;\n\t\n\t\t}\n\t\n\t\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Light,\n\t\n\t\t\tisLight: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tObject3D.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.color.copy( source.color );\n\t\t\t\tthis.intensity = source.intensity;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\t\tdata.object.color = this.color.getHex();\n\t\t\t\tdata.object.intensity = this.intensity;\n\t\n\t\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\t\n\t\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\t\n\t\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\t\n\t\t\tLight.call( this, skyColor, intensity );\n\t\n\t\t\tthis.type = 'HemisphereLight';\n\t\n\t\t\tthis.castShadow = undefined;\n\t\n\t\t\tthis.position.copy( Object3D.DefaultUp );\n\t\t\tthis.updateMatrix();\n\t\n\t\t\tthis.groundColor = new Color( groundColor );\n\t\n\t\t}\n\t\n\t\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t\t\tconstructor: HemisphereLight,\n\t\n\t\t\tisHemisphereLight: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tLight.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.groundColor.copy( source.groundColor );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction LightShadow( camera ) {\n\t\n\t\t\tthis.camera = camera;\n\t\n\t\t\tthis.bias = 0;\n\t\t\tthis.radius = 1;\n\t\n\t\t\tthis.mapSize = new Vector2( 512, 512 );\n\t\n\t\t\tthis.map = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\n\t\t}\n\t\n\t\tObject.assign( LightShadow.prototype, {\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.camera = source.camera.clone();\n\t\n\t\t\t\tthis.bias = source.bias;\n\t\t\t\tthis.radius = source.radius;\n\t\n\t\t\t\tthis.mapSize.copy( source.mapSize );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function () {\n\t\n\t\t\t\tvar object = {};\n\t\n\t\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\t\n\t\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\t\tdelete object.camera.matrix;\n\t\n\t\t\t\treturn object;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction SpotLightShadow() {\n\t\n\t\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\t\n\t\t}\n\t\n\t\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t\t\tconstructor: SpotLightShadow,\n\t\n\t\t\tisSpotLightShadow: true,\n\t\n\t\t\tupdate: function ( light ) {\n\t\n\t\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\t\tvar far = light.distance || 500;\n\t\n\t\t\t\tvar camera = this.camera;\n\t\n\t\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\t\n\t\t\t\t\tcamera.fov = fov;\n\t\t\t\t\tcamera.aspect = aspect;\n\t\t\t\t\tcamera.far = far;\n\t\t\t\t\tcamera.updateProjectionMatrix();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\t\n\t\t\tLight.call( this, color, intensity );\n\t\n\t\t\tthis.type = 'SpotLight';\n\t\n\t\t\tthis.position.copy( Object3D.DefaultUp );\n\t\t\tthis.updateMatrix();\n\t\n\t\t\tthis.target = new Object3D();\n\t\n\t\t\tObject.defineProperty( this, 'power', {\n\t\t\t\tget: function () {\n\t\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t\t},\n\t\t\t\tset: function ( power ) {\n\t\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\n\t\t}\n\t\n\t\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t\t\tconstructor: SpotLight,\n\t\n\t\t\tisSpotLight: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tLight.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.distance = source.distance;\n\t\t\t\tthis.angle = source.angle;\n\t\t\t\tthis.penumbra = source.penumbra;\n\t\t\t\tthis.decay = source.decay;\n\t\n\t\t\t\tthis.target = source.target.clone();\n\t\n\t\t\t\tthis.shadow = source.shadow.clone();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\n\t\tfunction PointLight( color, intensity, distance, decay ) {\n\t\n\t\t\tLight.call( this, color, intensity );\n\t\n\t\t\tthis.type = 'PointLight';\n\t\n\t\t\tObject.defineProperty( this, 'power', {\n\t\t\t\tget: function () {\n\t\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\n\t\t\t\t},\n\t\t\t\tset: function ( power ) {\n\t\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\t\n\t\t}\n\t\n\t\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t\t\tconstructor: PointLight,\n\t\n\t\t\tisPointLight: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tLight.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.distance = source.distance;\n\t\t\t\tthis.decay = source.decay;\n\t\n\t\t\t\tthis.shadow = source.shadow.clone();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction DirectionalLightShadow( light ) {\n\t\n\t\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\t\n\t\t}\n\t\n\t\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t\t\tconstructor: DirectionalLightShadow\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction DirectionalLight( color, intensity ) {\n\t\n\t\t\tLight.call( this, color, intensity );\n\t\n\t\t\tthis.type = 'DirectionalLight';\n\t\n\t\t\tthis.position.copy( Object3D.DefaultUp );\n\t\t\tthis.updateMatrix();\n\t\n\t\t\tthis.target = new Object3D();\n\t\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\n\t\t}\n\t\n\t\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t\t\tconstructor: DirectionalLight,\n\t\n\t\t\tisDirectionalLight: true,\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tLight.prototype.copy.call( this, source );\n\t\n\t\t\t\tthis.target = source.target.clone();\n\t\n\t\t\t\tthis.shadow = source.shadow.clone();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction AmbientLight( color, intensity ) {\n\t\n\t\t\tLight.call( this, color, intensity );\n\t\n\t\t\tthis.type = 'AmbientLight';\n\t\n\t\t\tthis.castShadow = undefined;\n\t\n\t\t}\n\t\n\t\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t\t\tconstructor: AmbientLight,\n\t\n\t\t\tisAmbientLight: true,\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author tschw\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t */\n\t\n\t\tvar AnimationUtils = {\n\t\n\t\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\t\tarraySlice: function( array, from, to ) {\n\t\n\t\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\t\n\t\t\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn array.slice( from, to );\n\t\n\t\t\t},\n\t\n\t\t\t// converts an array to a specific type\n\t\t\tconvertArray: function( array, type, forceClone ) {\n\t\n\t\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\t\n\t\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\t\n\t\t\t\t\treturn new type( array ); // create typed array\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\t\n\t\t\t},\n\t\n\t\t\tisTypedArray: function( object ) {\n\t\n\t\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t\t! ( object instanceof DataView );\n\t\n\t\t\t},\n\t\n\t\t\t// returns an array by which times and values can be sorted\n\t\t\tgetKeyframeOrder: function( times ) {\n\t\n\t\t\t\tfunction compareTime( i, j ) {\n\t\n\t\t\t\t\treturn times[ i ] - times[ j ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar n = times.length;\n\t\t\t\tvar result = new Array( n );\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\t\n\t\t\t\tresult.sort( compareTime );\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t},\n\t\n\t\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\t\tsortedArray: function( values, stride, order ) {\n\t\n\t\t\t\tvar nValues = values.length;\n\t\t\t\tvar result = new values.constructor( nValues );\n\t\n\t\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\t\n\t\t\t\t\tvar srcOffset = order[ i ] * stride;\n\t\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t},\n\t\n\t\t\t// function for parsing AOS keyframe formats\n\t\t\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\t\n\t\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\t\n\t\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\t\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( key === undefined ) return; // no data\n\t\n\t\t\t\tvar value = key[ valuePropertyName ];\n\t\t\t\tif ( value === undefined ) return; // no data\n\t\n\t\t\t\tif ( Array.isArray( value ) ) {\n\t\n\t\t\t\t\tdo {\n\t\n\t\t\t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t\t} while ( key !== undefined );\n\t\n\t\t\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t\t\t// ...assume THREE.Math-ish\n\t\n\t\t\t\t\tdo {\n\t\n\t\t\t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\t\tvalue.toArray( values, values.length );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t\t} while ( key !== undefined );\n\t\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise push as-is\n\t\n\t\t\t\t\tdo {\n\t\n\t\t\t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\t\tvalues.push( value );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t\t} while ( key !== undefined );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * Abstract base class of interpolants over parametric samples.\n\t\t *\n\t\t * The parameter domain is one dimensional, typically the time or a path\n\t\t * along a curve defined by the data.\n\t\t *\n\t\t * The sample values can have any dimensionality and derived classes may\n\t\t * apply special interpretations to the data.\n\t\t *\n\t\t * This class provides the interval seek in a Template Method, deferring\n\t\t * the actual interpolation to derived classes.\n\t\t *\n\t\t * Time complexity is O(1) for linear access crossing at most two points\n\t\t * and O(log N) for random access, where N is the number of positions.\n\t\t *\n\t\t * References:\n\t\t *\n\t\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t\t *\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction Interpolant(\n\t\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\n\t\t}\n\t\n\t\tInterpolant.prototype = {\n\t\n\t\t\tconstructor: Interpolant,\n\t\n\t\t\tevaluate: function( t ) {\n\t\n\t\t\t\tvar pp = this.parameterPositions,\n\t\t\t\t\ti1 = this._cachedIndex,\n\t\n\t\t\t\t\tt1 = pp[   i1   ],\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t\t\t\tvalidate_interval: {\n\t\n\t\t\t\t\tseek: {\n\t\n\t\t\t\t\t\tvar right;\n\t\n\t\t\t\t\t\tlinear_scan: {\n\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t//- slower code:\n\t\t//-\n\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\t\n\t\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\t\n\t\t\t\t\t\t\t\t\t\t// after end\n\t\n\t\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\t\n\t\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\t\n\t\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\t\tbreak seek;\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\t\tbreak linear_scan;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t//- slower code:\n\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\t\n\t\t\t\t\t\t\t\t// looping?\n\t\n\t\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\t\n\t\t\t\t\t\t\t\tif ( t < t1global ) {\n\t\n\t\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\t\tt0 = t1global;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t// linear reverse scan\n\t\n\t\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\t\n\t\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\t\t// before start\n\t\n\t\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\t\n\t\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\t\n\t\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\t\tbreak seek;\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\t\tbreak linear_scan;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// the interval is valid\n\t\n\t\t\t\t\t\t\tbreak validate_interval;\n\t\n\t\t\t\t\t\t} // linear scan\n\t\n\t\t\t\t\t\t// binary search\n\t\n\t\t\t\t\t\twhile ( i1 < right ) {\n\t\n\t\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\t\n\t\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\t\n\t\t\t\t\t\t\t\tright = mid;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\ti1 = mid + 1;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t\t\t\t\t\t// check boundary cases, again\n\t\n\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} // seek\n\t\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\n\t\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\t\n\t\t\t\t} // validate_interval\n\t\n\t\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\t\n\t\t\t},\n\t\n\t\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t\t// Note: The indirection allows central control of many interpolants.\n\t\n\t\t\t// --- Protected interface\n\t\n\t\t\tDefaultSettings_: {},\n\t\n\t\t\tgetSettings_: function() {\n\t\n\t\t\t\treturn this.settings || this.DefaultSettings_;\n\t\n\t\t\t},\n\t\n\t\t\tcopySampleValue_: function( index ) {\n\t\n\t\t\t\t// copies a sample value to the result buffer\n\t\n\t\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\t\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\tresult[ i ] = values[ offset + i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t},\n\t\n\t\t\t// Template methods for derived classes:\n\t\n\t\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\t\tthrow new Error( \"call to abstract method\" );\n\t\t\t\t// implementations shall return this.resultBuffer\n\t\n\t\t\t},\n\t\n\t\t\tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t\t\t\t// empty\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tObject.assign( Interpolant.prototype, {\n\t\n\t\t\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\t\t\tInterpolant.prototype.copySampleValue_,\n\t\n\t\t\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\t\t\tInterpolant.prototype.copySampleValue_\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * Fast and simple cubic spline interpolant.\n\t\t *\n\t\t * It was derived from a Hermitian construction setting the first derivative\n\t\t * at each sample position to the linear slope between neighboring positions\n\t\t * over their parameter interval.\n\t\t *\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction CubicInterpolant(\n\t\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\t\tInterpolant.call(\n\t\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\n\t\t}\n\t\n\t\tCubicInterpolant.prototype =\n\t\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t\t\tconstructor: CubicInterpolant,\n\t\n\t\t\tDefaultSettings_: {\n\t\n\t\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t\n\t\t\t},\n\t\n\t\t\tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t\t\t\tvar pp = this.parameterPositions,\n\t\t\t\t\tiPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\n\t\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\t\ttNext = pp[ iNext ];\n\t\n\t\t\t\tif ( tPrev === undefined ) {\n\t\n\t\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\t\n\t\t\t\t\t\tcase ZeroSlopeEnding:\n\t\n\t\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase WrapAroundEnding:\n\t\n\t\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\t\ttPrev = t1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( tNext === undefined ) {\n\t\n\t\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\t\n\t\t\t\t\t\tcase ZeroSlopeEnding:\n\t\n\t\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase WrapAroundEnding:\n\t\n\t\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\t\ttNext = t0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\n\t\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\t\tthis._offsetNext = iNext * stride;\n\t\n\t\t\t},\n\t\n\t\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\t\n\t\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p;\n\t\n\t\t\t\t// evaluate polynomials\n\t\n\t\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\t\n\t\t\t\t// combine data linearly\n\t\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\tresult[ i ] =\n\t\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\t\tsN * values[ oN + i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction LinearInterpolant(\n\t\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\t\tInterpolant.call(\n\t\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t\t}\n\t\n\t\tLinearInterpolant.prototype =\n\t\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t\t\tconstructor: LinearInterpolant,\n\t\n\t\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\n\t\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\t\tweight0 = 1 - weight1;\n\t\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\tresult[ i ] =\n\t\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * Interpolant that evaluates to the sample value at the position preceeding\n\t\t * the parameter.\n\t\t *\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction DiscreteInterpolant(\n\t\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\t\tInterpolant.call(\n\t\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t\t}\n\t\n\t\tDiscreteInterpolant.prototype =\n\t\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t\t\tconstructor: DiscreteInterpolant,\n\t\n\t\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\tvar KeyframeTrackPrototype;\n\t\n\t\tKeyframeTrackPrototype = {\n\t\n\t\t\tTimeBufferType: Float32Array,\n\t\t\tValueBufferType: Float32Array,\n\t\n\t\t\tDefaultInterpolation: InterpolateLinear,\n\t\n\t\t\tInterpolantFactoryMethodDiscrete: function( result ) {\n\t\n\t\t\t\treturn new DiscreteInterpolant(\n\t\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t\t},\n\t\n\t\t\tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t\t\t\treturn new LinearInterpolant(\n\t\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t\t},\n\t\n\t\t\tInterpolantFactoryMethodSmooth: function( result ) {\n\t\n\t\t\t\treturn new CubicInterpolant(\n\t\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t\t},\n\t\n\t\t\tsetInterpolation: function( interpolation ) {\n\t\n\t\t\t\tvar factoryMethod;\n\t\n\t\t\t\tswitch ( interpolation ) {\n\t\n\t\t\t\t\tcase InterpolateDiscrete:\n\t\n\t\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase InterpolateLinear:\n\t\n\t\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase InterpolateSmooth:\n\t\n\t\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( factoryMethod === undefined ) {\n\t\n\t\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\t\n\t\t\t\t\tif ( this.createInterpolant === undefined ) {\n\t\n\t\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\t\n\t\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tconsole.warn( message );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.createInterpolant = factoryMethod;\n\t\n\t\t\t},\n\t\n\t\t\tgetInterpolation: function() {\n\t\n\t\t\t\tswitch ( this.createInterpolant ) {\n\t\n\t\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\n\t\t\t\t\t\treturn InterpolateDiscrete;\n\t\n\t\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\n\t\t\t\t\t\treturn InterpolateLinear;\n\t\n\t\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\n\t\t\t\t\t\treturn InterpolateSmooth;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tgetValueSize: function() {\n\t\n\t\t\t\treturn this.values.length / this.times.length;\n\t\n\t\t\t},\n\t\n\t\t\t// move all keyframes either forwards or backwards in time\n\t\t\tshift: function( timeOffset ) {\n\t\n\t\t\t\tif( timeOffset !== 0.0 ) {\n\t\n\t\t\t\t\tvar times = this.times;\n\t\n\t\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\ttimes[ i ] += timeOffset;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\t\tscale: function( timeScale ) {\n\t\n\t\t\t\tif( timeScale !== 1.0 ) {\n\t\n\t\t\t\t\tvar times = this.times;\n\t\n\t\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\ttimes[ i ] *= timeScale;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\t\ttrim: function( startTime, endTime ) {\n\t\n\t\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length,\n\t\t\t\t\tfrom = 0,\n\t\t\t\t\tto = nKeys - 1;\n\t\n\t\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\t\n\t\t\t\t++ to; // inclusive -> exclusive bound\n\t\n\t\t\t\tif( from !== 0 || to !== nKeys ) {\n\t\n\t\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\t\n\t\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\t\tthis.values = AnimationUtils.\n\t\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\t\tvalidate: function() {\n\t\n\t\t\t\tvar valid = true;\n\t\n\t\t\t\tvar valueSize = this.getValueSize();\n\t\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\t\n\t\t\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\t\t\tvalid = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\n\t\t\t\t\tnKeys = times.length;\n\t\n\t\t\t\tif( nKeys === 0 ) {\n\t\n\t\t\t\t\tconsole.error( \"track is empty\", this );\n\t\t\t\t\tvalid = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar prevTime = null;\n\t\n\t\t\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\t\n\t\t\t\t\tvar currTime = times[ i ];\n\t\n\t\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\t\n\t\t\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\t\n\t\t\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tprevTime = currTime;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( values !== undefined ) {\n\t\n\t\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\t\tvar value = values[ i ];\n\t\n\t\t\t\t\t\t\tif ( isNaN( value ) ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn valid;\n\t\n\t\t\t},\n\t\n\t\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\t\toptimize: function() {\n\t\n\t\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tstride = this.getValueSize(),\n\t\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\n\t\t\t\t\twriteIndex = 1,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\n\t\t\t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\t\n\t\t\t\t\tvar keep = false;\n\t\n\t\t\t\t\tvar time = times[ i ];\n\t\t\t\t\tvar timeNext = times[ i + 1 ];\n\t\n\t\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\t\n\t\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\t\n\t\t\t\t\t\tif ( ! smoothInterpolation ) {\n\t\n\t\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\n\t\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\t\n\t\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\t\n\t\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\t\n\t\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else keep = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// in-place compaction\n\t\n\t\t\t\t\tif ( keep ) {\n\t\n\t\t\t\t\t\tif ( i !== writeIndex ) {\n\t\n\t\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\t\n\t\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\t\n\t\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\t\n\t\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t++ writeIndex;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// flush last keyframe (compaction looks ahead)\n\t\n\t\t\t\tif ( lastIndex > 0 ) {\n\t\n\t\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\t\n\t\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\t\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t\t\t\t\t++ writeIndex;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( writeIndex !== times.length ) {\n\t\n\t\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tfunction KeyframeTrackConstructor( name, times, values, interpolation ) {\n\t\n\t\t\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\t\n\t\t\tif( times === undefined || times.length === 0 ) {\n\t\n\t\t\t\tthrow new Error( \"no keyframes in track named \" + name );\n\t\n\t\t\t}\n\t\n\t\t\tthis.name = name;\n\t\n\t\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\t\n\t\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\t\n\t\t\tthis.validate();\n\t\t\tthis.optimize();\n\t\n\t\t}\n\t\n\t\t/**\n\t\t *\n\t\t * A Track of vectored keyframe values.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t\t}\n\t\n\t\tVectorKeyframeTrack.prototype =\n\t\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t\t\tconstructor: VectorKeyframeTrack,\n\t\n\t\t\tValueTypeName: 'vector'\n\t\n\t\t\t// ValueBufferType is inherited\n\t\n\t\t\t// DefaultInterpolation is inherited\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * Spherical linear unit quaternion interpolant.\n\t\t *\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction QuaternionLinearInterpolant(\n\t\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\t\tInterpolant.call(\n\t\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t\t}\n\t\n\t\tQuaternionLinearInterpolant.prototype =\n\t\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t\t\tconstructor: QuaternionLinearInterpolant,\n\t\n\t\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\t\toffset = i1 * stride,\n\t\n\t\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\t\n\t\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\t\n\t\t\t\t\tQuaternion.slerpFlat( result, 0,\n\t\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * A Track of quaternion keyframe values.\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t\t}\n\t\n\t\tQuaternionKeyframeTrack.prototype =\n\t\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t\t\tconstructor: QuaternionKeyframeTrack,\n\t\n\t\t\tValueTypeName: 'quaternion',\n\t\n\t\t\t// ValueBufferType is inherited\n\t\n\t\t\tDefaultInterpolation: InterpolateLinear,\n\t\n\t\t\tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t\t\t\treturn new QuaternionLinearInterpolant(\n\t\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t\t},\n\t\n\t\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * A Track of numeric keyframe values.\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t\t}\n\t\n\t\tNumberKeyframeTrack.prototype =\n\t\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t\t\tconstructor: NumberKeyframeTrack,\n\t\n\t\t\tValueTypeName: 'number',\n\t\n\t\t\t// ValueBufferType is inherited\n\t\n\t\t\t// DefaultInterpolation is inherited\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * A Track that interpolates Strings\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t\t}\n\t\n\t\tStringKeyframeTrack.prototype =\n\t\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t\t\tconstructor: StringKeyframeTrack,\n\t\n\t\t\tValueTypeName: 'string',\n\t\t\tValueBufferType: Array,\n\t\n\t\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t\t\tInterpolantFactoryMethodLinear: undefined,\n\t\n\t\t\tInterpolantFactoryMethodSmooth: undefined\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * A Track of Boolean keyframe values.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction BooleanKeyframeTrack( name, times, values ) {\n\t\n\t\t\tKeyframeTrackConstructor.call( this, name, times, values );\n\t\n\t\t}\n\t\n\t\tBooleanKeyframeTrack.prototype =\n\t\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t\t\tconstructor: BooleanKeyframeTrack,\n\t\n\t\t\tValueTypeName: 'bool',\n\t\t\tValueBufferType: Array,\n\t\n\t\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t\t\tInterpolantFactoryMethodLinear: undefined,\n\t\t\tInterpolantFactoryMethodSmooth: undefined\n\t\n\t\t\t// Note: Actually this track could have a optimized / compressed\n\t\t\t// representation of a single value and a custom interpolant that\n\t\t\t// computes \"firstValue ^ isOdd( index )\".\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * A Track of keyframe values that represent color.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t\t}\n\t\n\t\tColorKeyframeTrack.prototype =\n\t\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t\t\tconstructor: ColorKeyframeTrack,\n\t\n\t\t\tValueTypeName: 'color'\n\t\n\t\t\t// ValueBufferType is inherited\n\t\n\t\t\t// DefaultInterpolation is inherited\n\t\n\t\n\t\t\t// Note: Very basic implementation and nothing special yet.\n\t\t\t// However, this is the place for color space parameterization.\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * A timed sequence of keyframes for a specific property.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\t\n\t\t\tKeyframeTrackConstructor.apply( this, arguments );\n\t\n\t\t}\n\t\n\t\tKeyframeTrack.prototype = KeyframeTrackPrototype;\n\t\tKeyframeTrackPrototype.constructor = KeyframeTrack;\n\t\n\t\t// Static methods:\n\t\n\t\tObject.assign( KeyframeTrack, {\n\t\n\t\t\t// Serialization (in static context, because of constructor invocation\n\t\t\t// and automatic invocation of .toJSON):\n\t\n\t\t\tparse: function( json ) {\n\t\n\t\t\t\tif( json.type === undefined ) {\n\t\n\t\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\t\n\t\t\t\tif ( json.times === undefined ) {\n\t\n\t\t\t\t\tvar times = [], values = [];\n\t\n\t\t\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\t\n\t\t\t\t\tjson.times = times;\n\t\t\t\t\tjson.values = values;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// derived classes can define a static parse method\n\t\t\t\tif ( trackType.parse !== undefined ) {\n\t\n\t\t\t\t\treturn trackType.parse( json );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\t\t\treturn new trackType(\n\t\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\ttoJSON: function( track ) {\n\t\n\t\t\t\tvar trackType = track.constructor;\n\t\n\t\t\t\tvar json;\n\t\n\t\t\t\t// derived classes can define a static toJSON method\n\t\t\t\tif ( trackType.toJSON !== undefined ) {\n\t\n\t\t\t\t\tjson = trackType.toJSON( track );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\t\tjson = {\n\t\n\t\t\t\t\t\t'name': track.name,\n\t\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\t\n\t\t\t\t\t};\n\t\n\t\t\t\t\tvar interpolation = track.getInterpolation();\n\t\n\t\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\t\n\t\t\t\t\t\tjson.interpolation = interpolation;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tjson.type = track.ValueTypeName; // mandatory\n\t\n\t\t\t\treturn json;\n\t\n\t\t\t},\n\t\n\t\t\t_getTrackTypeForValueTypeName: function( typeName ) {\n\t\n\t\t\t\tswitch( typeName.toLowerCase() ) {\n\t\n\t\t\t\t\tcase \"scalar\":\n\t\t\t\t\tcase \"double\":\n\t\t\t\t\tcase \"float\":\n\t\t\t\t\tcase \"number\":\n\t\t\t\t\tcase \"integer\":\n\t\n\t\t\t\t\t\treturn NumberKeyframeTrack;\n\t\n\t\t\t\t\tcase \"vector\":\n\t\t\t\t\tcase \"vector2\":\n\t\t\t\t\tcase \"vector3\":\n\t\t\t\t\tcase \"vector4\":\n\t\n\t\t\t\t\t\treturn VectorKeyframeTrack;\n\t\n\t\t\t\t\tcase \"color\":\n\t\n\t\t\t\t\t\treturn ColorKeyframeTrack;\n\t\n\t\t\t\t\tcase \"quaternion\":\n\t\n\t\t\t\t\t\treturn QuaternionKeyframeTrack;\n\t\n\t\t\t\t\tcase \"bool\":\n\t\t\t\t\tcase \"boolean\":\n\t\n\t\t\t\t\t\treturn BooleanKeyframeTrack;\n\t\n\t\t\t\t\tcase \"string\":\n\t\n\t\t\t\t\t\treturn StringKeyframeTrack;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * Reusable set of Tracks that represent an animation.\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t */\n\t\n\t\tfunction AnimationClip( name, duration, tracks ) {\n\t\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\t// this means it should figure out its duration by scanning the tracks\n\t\t\tif ( this.duration < 0 ) {\n\t\n\t\t\t\tthis.resetDuration();\n\t\n\t\t\t}\n\t\n\t\t\tthis.optimize();\n\t\n\t\t}\n\t\n\t\tAnimationClip.prototype = {\n\t\n\t\t\tconstructor: AnimationClip,\n\t\n\t\t\tresetDuration: function() {\n\t\n\t\t\t\tvar tracks = this.tracks,\n\t\t\t\t\tduration = 0;\n\t\n\t\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar track = this.tracks[ i ];\n\t\n\t\t\t\t\tduration = Math.max(\n\t\t\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.duration = duration;\n\t\n\t\t\t},\n\t\n\t\t\ttrim: function() {\n\t\n\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\toptimize: function() {\n\t\n\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t\t\t\t\tthis.tracks[ i ].optimize();\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// Static methods:\n\t\n\t\tObject.assign( AnimationClip, {\n\t\n\t\t\tparse: function( json ) {\n\t\n\t\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\t\n\t\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\t\n\t\t\t},\n\t\n\t\n\t\t\ttoJSON: function( clip ) {\n\t\n\t\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\n\t\t\t\tvar json = {\n\t\n\t\t\t\t\t'name': clip.name,\n\t\t\t\t\t'duration': clip.duration,\n\t\t\t\t\t'tracks': tracks\n\t\n\t\t\t\t};\n\t\n\t\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn json;\n\t\n\t\t\t},\n\t\n\t\n\t\t\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\t\n\t\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\t\tvar tracks = [];\n\t\n\t\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\t\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\ttimes.push(\n\t\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\t\n\t\t\t\t\tvalues.push( 0, 1, 0 );\n\t\n\t\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\t\n\t\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\t\n\t\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\t\tvalues.push( values[ 0 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttracks.push(\n\t\t\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\t\t\ttimes, values\n\t\t\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t\t\t}\n\t\n\t\t\t\treturn new AnimationClip( name, -1, tracks );\n\t\n\t\t\t},\n\t\n\t\t\tfindByName: function( objectOrClipArray, name ) {\n\t\n\t\t\t\tvar clipArray = objectOrClipArray;\n\t\n\t\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\t\n\t\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\t\n\t\t\t\t\tif ( clipArray[ i ].name === name ) {\n\t\n\t\t\t\t\t\treturn clipArray[ i ];\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t},\n\t\n\t\t\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\t\n\t\t\t\tvar animationToMorphTargets = {};\n\t\n\t\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\t\n\t\t\t\t// sort morph target names into animation groups based\n\t\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\t\n\t\t\t\t\tif ( parts && parts.length > 1 ) {\n\t\n\t\t\t\t\t\tvar name = parts[ 1 ];\n\t\n\t\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\t\tif ( ! animationMorphTargets ) {\n\t\n\t\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar clips = [];\n\t\n\t\t\t\tfor ( var name in animationToMorphTargets ) {\n\t\n\t\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn clips;\n\t\n\t\t\t},\n\t\n\t\t\t// parse the animation.hierarchy format\n\t\t\tparseAnimation: function( animation, bones ) {\n\t\n\t\t\t\tif ( ! animation ) {\n\t\n\t\t\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar addNonemptyTrack = function(\n\t\t\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\t\n\t\t\t\t\t// only return track if there are actually keys.\n\t\t\t\t\tif ( animationKeys.length !== 0 ) {\n\t\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\t\tAnimationUtils.flattenJSON(\n\t\t\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\t\n\t\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\t\tif ( times.length !== 0 ) {\n\t\n\t\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t\tvar tracks = [];\n\t\n\t\t\t\tvar clipName = animation.name || 'default';\n\t\t\t\t// automatic length determination in AnimationClip.\n\t\t\t\tvar duration = animation.length || -1;\n\t\t\t\tvar fps = animation.fps || 30;\n\t\n\t\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\t\n\t\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\t\n\t\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\t\n\t\t\t\t\t// skip empty tracks\n\t\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\t\n\t\t\t\t\t// process morph targets in a way exactly compatible\n\t\t\t\t\t// with AnimationHandler.init( animation )\n\t\t\t\t\tif ( animationKeys[0].morphTargets ) {\n\t\n\t\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\t\n\t\t\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\t\n\t\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\t\n\t\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\n\t\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n\t\t\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ...assume skeletal animation\n\t\n\t\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\t\n\t\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\t\n\t\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\t\n\t\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( tracks.length === 0 ) {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\t\n\t\t\t\treturn clip;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction MaterialLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\t\tthis.textures = {};\n\t\n\t\t}\n\t\n\t\tObject.assign( MaterialLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar loader = new XHRLoader( scope.manager );\n\t\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t},\n\t\n\t\t\tsetTextures: function ( value ) {\n\t\n\t\t\t\tthis.textures = value;\n\t\n\t\t\t},\n\t\n\t\t\tparse: function ( json ) {\n\t\n\t\t\t\tvar textures = this.textures;\n\t\n\t\t\t\tfunction getTexture( name ) {\n\t\n\t\t\t\t\tif ( textures[ name ] === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn textures[ name ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar material = new Materials[ json.type ]();\n\t\n\t\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\n\t\t\t\t// for PointsMaterial\n\t\n\t\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\t\n\t\t\t\t// maps\n\t\n\t\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\n\t\t\t\tif ( json.alphaMap !== undefined ) {\n\t\n\t\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\t\tmaterial.transparent = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\t\n\t\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\t\tif ( json.normalScale !== undefined ) {\n\t\n\t\t\t\t\tvar normalScale = json.normalScale;\n\t\n\t\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\t\n\t\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\n\t\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\t\n\t\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\t\n\t\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\t\n\t\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\n\t\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\n\t\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\n\t\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\t\n\t\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\t\n\t\t\t\t// MultiMaterial\n\t\n\t\t\t\tif ( json.materials !== undefined ) {\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn material;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction BufferGeometryLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( BufferGeometryLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar loader = new XHRLoader( scope.manager );\n\t\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t},\n\t\n\t\t\tparse: function ( json ) {\n\t\n\t\t\t\tvar geometry = new BufferGeometry();\n\t\n\t\t\t\tvar index = json.data.index;\n\t\n\t\t\t\tvar TYPED_ARRAYS = {\n\t\t\t\t\t'Int8Array': Int8Array,\n\t\t\t\t\t'Uint8Array': Uint8Array,\n\t\t\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t\t\t'Int16Array': Int16Array,\n\t\t\t\t\t'Uint16Array': Uint16Array,\n\t\t\t\t\t'Int32Array': Int32Array,\n\t\t\t\t\t'Uint32Array': Uint32Array,\n\t\t\t\t\t'Float32Array': Float32Array,\n\t\t\t\t\t'Float64Array': Float64Array\n\t\t\t\t};\n\t\n\t\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar attributes = json.data.attributes;\n\t\n\t\t\t\tfor ( var key in attributes ) {\n\t\n\t\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\n\t\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\t\n\t\t\t\tif ( groups !== undefined ) {\n\t\n\t\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tvar group = groups[ i ];\n\t\n\t\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar boundingSphere = json.data.boundingSphere;\n\t\n\t\t\t\tif ( boundingSphere !== undefined ) {\n\t\n\t\t\t\t\tvar center = new Vector3();\n\t\n\t\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\t\n\t\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn geometry;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Loader() {\n\t\n\t\t\tthis.onLoadStart = function () {};\n\t\t\tthis.onLoadProgress = function () {};\n\t\t\tthis.onLoadComplete = function () {};\n\t\n\t\t}\n\t\n\t\tLoader.prototype = {\n\t\n\t\t\tconstructor: Loader,\n\t\n\t\t\tcrossOrigin: undefined,\n\t\n\t\t\textractUrlBase: function ( url ) {\n\t\n\t\t\t\tvar parts = url.split( '/' );\n\t\n\t\t\t\tif ( parts.length === 1 ) return './';\n\t\n\t\t\t\tparts.pop();\n\t\n\t\t\t\treturn parts.join( '/' ) + '/';\n\t\n\t\t\t},\n\t\n\t\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\t\n\t\t\t\tvar array = [];\n\t\n\t\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\t\n\t\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t},\n\t\n\t\t\tcreateMaterial: ( function () {\n\t\n\t\t\t\tvar color, textureLoader, materialLoader;\n\t\n\t\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\t\n\t\t\t\t\tif ( color === undefined ) color = new Color();\n\t\t\t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n\t\t\t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\t\n\t\t\t\t\t// convert from old material format\n\t\n\t\t\t\t\tvar textures = {};\n\t\n\t\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\t\n\t\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\t\n\t\t\t\t\t\tvar texture;\n\t\n\t\t\t\t\t\tif ( loader !== null ) {\n\t\n\t\t\t\t\t\t\ttexture = loader.load( fullPath );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( repeat !== undefined ) {\n\t\n\t\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\t\n\t\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( offset !== undefined ) {\n\t\n\t\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( wrap !== undefined ) {\n\t\n\t\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\t\n\t\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( anisotropy !== undefined ) {\n\t\n\t\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar uuid = _Math.generateUUID();\n\t\n\t\t\t\t\t\ttextures[ uuid ] = texture;\n\t\n\t\t\t\t\t\treturn uuid;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t//\n\t\n\t\t\t\t\tvar json = {\n\t\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t\t};\n\t\n\t\t\t\t\tfor ( var name in m ) {\n\t\n\t\t\t\t\t\tvar value = m[ name ];\n\t\n\t\t\t\t\t\tswitch ( name ) {\n\t\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\n\t\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\t\n\t\t\t\t\tmaterialLoader.setTextures( textures );\n\t\n\t\t\t\t\treturn materialLoader.parse( json );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )()\n\t\n\t\t};\n\t\n\t\tLoader.Handlers = {\n\t\n\t\t\thandlers: [],\n\t\n\t\t\tadd: function ( regex, loader ) {\n\t\n\t\t\t\tthis.handlers.push( regex, loader );\n\t\n\t\t\t},\n\t\n\t\t\tget: function ( file ) {\n\t\n\t\t\t\tvar handlers = this.handlers;\n\t\n\t\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\t\tvar loader  = handlers[ i + 1 ];\n\t\n\t\t\t\t\tif ( regex.test( file ) ) {\n\t\n\t\t\t\t\t\treturn loader;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction JSONLoader( manager ) {\n\t\n\t\t\tif ( typeof manager === 'boolean' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\t\tmanager = undefined;\n\t\n\t\t\t}\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t\tthis.withCredentials = false;\n\t\n\t\t}\n\t\n\t\tObject.assign( JSONLoader.prototype, {\n\t\n\t\t\tload: function( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\t\n\t\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\t\tvar metadata = json.metadata;\n\t\n\t\t\t\t\tif ( metadata !== undefined ) {\n\t\n\t\t\t\t\t\tvar type = metadata.type;\n\t\n\t\t\t\t\t\tif ( type !== undefined ) {\n\t\n\t\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\t\tonLoad( object.geometry, object.materials );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t},\n\t\n\t\t\tsetTexturePath: function ( value ) {\n\t\n\t\t\t\tthis.texturePath = value;\n\t\n\t\t\t},\n\t\n\t\t\tparse: function ( json, texturePath ) {\n\t\n\t\t\t\tvar geometry = new Geometry(),\n\t\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\t\n\t\t\t\tparseModel( scale );\n\t\n\t\t\t\tparseSkin();\n\t\t\t\tparseMorphing( scale );\n\t\t\t\tparseAnimations();\n\t\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t\t\tfunction parseModel( scale ) {\n\t\n\t\t\t\t\tfunction isBitSet( value, position ) {\n\t\n\t\t\t\t\t\treturn value & ( 1 << position );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar i, j, fi,\n\t\n\t\t\t\t\toffset, zLength,\n\t\n\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\t\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\t\n\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\t\n\t\t\t\t\tuvLayer, uv, u, v,\n\t\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\t\n\t\t\t\t\tnUvLayers = 0;\n\t\n\t\t\t\t\tif ( json.uvs !== undefined ) {\n\t\n\t\t\t\t\t\t// disregard empty arrays\n\t\n\t\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\t\n\t\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\toffset = 0;\n\t\t\t\t\tzLength = vertices.length;\n\t\n\t\t\t\t\twhile ( offset < zLength ) {\n\t\n\t\t\t\t\t\tvertex = new Vector3();\n\t\n\t\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\t\n\t\t\t\t\t\tgeometry.vertices.push( vertex );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\toffset = 0;\n\t\t\t\t\tzLength = faces.length;\n\t\n\t\t\t\t\twhile ( offset < zLength ) {\n\t\n\t\t\t\t\t\ttype = faces[ offset ++ ];\n\t\n\t\n\t\t\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\t\n\t\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\t\n\t\t\t\t\t\tif ( isQuad ) {\n\t\n\t\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\t\n\t\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\t\n\t\t\t\t\t\t\toffset += 4;\n\t\n\t\t\t\t\t\t\tif ( hasMaterial ) {\n\t\n\t\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t\t\t\t\t\t\tfi = geometry.faces.length;\n\t\n\t\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\t\n\t\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t\t);\n\t\n\t\n\t\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\t\tgeometry.faces.push( faceB );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\t\n\t\t\t\t\t\t\tif ( hasMaterial ) {\n\t\n\t\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t\t\t\t\t\t\tfi = geometry.faces.length;\n\t\n\t\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\n\t\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tgeometry.faces.push( face );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction parseSkin() {\n\t\n\t\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\t\n\t\t\t\t\tif ( json.skinWeights ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\t\n\t\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\t\n\t\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( json.skinIndices ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\t\n\t\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\t\n\t\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.bones = json.bones;\n\t\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction parseMorphing( scale ) {\n\t\n\t\t\t\t\tif ( json.morphTargets !== undefined ) {\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\t\n\t\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\t\n\t\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\t\n\t\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\t\n\t\t\t\t\t\t\t\tdstVertices.push( vertex );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\t\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction parseAnimations() {\n\t\n\t\t\t\t\tvar outputAnimations = [];\n\t\n\t\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\t\tvar animations = [];\n\t\n\t\t\t\t\tif ( json.animation !== undefined ) {\n\t\n\t\t\t\t\t\tanimations.push( json.animation );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( json.animations !== undefined ) {\n\t\n\t\t\t\t\t\tif ( json.animations.length ) {\n\t\n\t\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tanimations.push( json.animations );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// parse implicit morph animations\n\t\t\t\t\tif ( geometry.morphTargets ) {\n\t\n\t\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\t\n\t\t\t\t\treturn { geometry: geometry };\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\t\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction ObjectLoader ( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\t\tthis.texturePath = '';\n\t\n\t\t}\n\t\n\t\tObject.assign( ObjectLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tif ( this.texturePath === '' ) {\n\t\n\t\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar loader = new XHRLoader( scope.manager );\n\t\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t},\n\t\n\t\t\tsetTexturePath: function ( value ) {\n\t\n\t\t\t\tthis.texturePath = value;\n\t\n\t\t\t},\n\t\n\t\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\t\tthis.crossOrigin = value;\n\t\n\t\t\t},\n\t\n\t\t\tparse: function ( json, onLoad ) {\n\t\n\t\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\t\n\t\t\t\tvar images = this.parseImages( json.images, function () {\n\t\n\t\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t\t\t\t} );\n\t\n\t\t\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\t\n\t\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\t\n\t\t\t\tif ( json.animations ) {\n\t\n\t\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\t\n\t\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn object;\n\t\n\t\t\t},\n\t\n\t\t\tparseGeometries: function ( json ) {\n\t\n\t\t\t\tvar geometries = {};\n\t\n\t\t\t\tif ( json !== undefined ) {\n\t\n\t\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar geometry;\n\t\t\t\t\t\tvar data = json[ i ];\n\t\n\t\t\t\t\t\tswitch ( data.type ) {\n\t\n\t\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'BufferGeometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'Geometry':\n\t\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\t\n\t\t\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\n\t\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\n\t\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn geometries;\n\t\n\t\t\t},\n\t\n\t\t\tparseMaterials: function ( json, textures ) {\n\t\n\t\t\t\tvar materials = {};\n\t\n\t\t\t\tif ( json !== undefined ) {\n\t\n\t\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\t\tloader.setTextures( textures );\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\t\t\tmaterials[ material.uuid ] = material;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn materials;\n\t\n\t\t\t},\n\t\n\t\t\tparseAnimations: function ( json ) {\n\t\n\t\t\t\tvar animations = [];\n\t\n\t\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\t\n\t\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\t\n\t\t\t\t\tanimations.push( clip );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn animations;\n\t\n\t\t\t},\n\t\n\t\t\tparseImages: function ( json, onLoad ) {\n\t\n\t\t\t\tvar scope = this;\n\t\t\t\tvar images = {};\n\t\n\t\t\t\tfunction loadImage( url ) {\n\t\n\t\t\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\t\t\treturn loader.load( url, function () {\n\t\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t\t}, undefined, function () {\n\t\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json !== undefined && json.length > 0 ) {\n\t\n\t\t\t\t\tvar manager = new LoadingManager( onLoad );\n\t\n\t\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\t\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn images;\n\t\n\t\t\t},\n\t\n\t\t\tparseTextures: function ( json, images ) {\n\t\n\t\t\t\tfunction parseConstant( value, type ) {\n\t\n\t\t\t\t\tif ( typeof( value ) === 'number' ) return value;\n\t\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\t\n\t\t\t\t\treturn type[ value ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar textures = {};\n\t\n\t\t\t\tif ( json !== undefined ) {\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar data = json[ i ];\n\t\n\t\t\t\t\t\tif ( data.image === undefined ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\t\ttexture.uuid = data.uuid;\n\t\n\t\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\n\t\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\t\n\t\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\t\tif ( data.wrap !== undefined ) {\n\t\n\t\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n\t\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n\t\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n\t\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\n\t\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\t\n\t\t\t\t\t\ttextures[ data.uuid ] = texture;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn textures;\n\t\n\t\t\t},\n\t\n\t\t\tparseObject: function () {\n\t\n\t\t\t\tvar matrix = new Matrix4();\n\t\n\t\t\t\treturn function parseObject( data, geometries, materials ) {\n\t\n\t\t\t\t\tvar object;\n\t\n\t\t\t\t\tfunction getGeometry( name ) {\n\t\n\t\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn geometries[ name ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfunction getMaterial( name ) {\n\t\n\t\t\t\t\t\tif ( name === undefined ) return undefined;\n\t\n\t\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn materials[ name ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tswitch ( data.type ) {\n\t\n\t\t\t\t\t\tcase 'Scene':\n\t\n\t\t\t\t\t\t\tobject = new Scene();\n\t\n\t\t\t\t\t\t\tif ( data.background !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\t\n\t\t\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( data.fog !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\t\n\t\t\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\t\n\t\t\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\t\n\t\t\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'PerspectiveCamera':\n\t\n\t\t\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\t\n\t\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'OrthographicCamera':\n\t\n\t\t\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'AmbientLight':\n\t\n\t\t\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'DirectionalLight':\n\t\n\t\t\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'PointLight':\n\t\n\t\t\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'SpotLight':\n\t\n\t\t\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'HemisphereLight':\n\t\n\t\t\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'Mesh':\n\t\n\t\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\t\tvar material = getMaterial( data.material );\n\t\n\t\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\t\n\t\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'LOD':\n\t\n\t\t\t\t\t\t\tobject = new LOD();\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'Line':\n\t\n\t\t\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'LineSegments':\n\t\n\t\t\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\t\tcase 'Points':\n\t\n\t\t\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'Sprite':\n\t\n\t\t\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'Group':\n\t\n\t\t\t\t\t\t\tobject = new Group();\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\tobject = new Object3D();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.uuid = data.uuid;\n\t\n\t\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\t\tif ( data.matrix !== undefined ) {\n\t\n\t\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\t\n\t\t\t\t\tif ( data.shadow ) {\n\t\n\t\t\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\n\t\t\t\t\tif ( data.children !== undefined ) {\n\t\n\t\t\t\t\t\tfor ( var child in data.children ) {\n\t\n\t\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( data.type === 'LOD' ) {\n\t\n\t\t\t\t\t\tvar levels = data.levels;\n\t\n\t\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\t\n\t\t\t\t\t\t\tif ( child !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn object;\n\t\n\t\t\t\t};\n\t\n\t\t\t}()\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * Extensible curve object\n\t\t *\n\t\t * Some common of Curve methods\n\t\t * .getPoint(t), getTangent(t)\n\t\t * .getPointAt(u), getTangentAt(u)\n\t\t * .getPoints(), .getSpacedPoints()\n\t\t * .getLength()\n\t\t * .updateArcLengths()\n\t\t *\n\t\t * This following classes subclasses THREE.Curve:\n\t\t *\n\t\t * -- 2d classes --\n\t\t * THREE.LineCurve\n\t\t * THREE.QuadraticBezierCurve\n\t\t * THREE.CubicBezierCurve\n\t\t * THREE.SplineCurve\n\t\t * THREE.ArcCurve\n\t\t * THREE.EllipseCurve\n\t\t *\n\t\t * -- 3d classes --\n\t\t * THREE.LineCurve3\n\t\t * THREE.QuadraticBezierCurve3\n\t\t * THREE.CubicBezierCurve3\n\t\t * THREE.SplineCurve3\n\t\t *\n\t\t * A series of curves can be represented as a THREE.CurvePath\n\t\t *\n\t\t **/\n\t\n\t\t/**************************************************************\n\t\t *\tAbstract Curve base class\n\t\t **************************************************************/\n\t\n\t\tfunction Curve() {}\n\t\n\t\tCurve.prototype = {\n\t\n\t\t\tconstructor: Curve,\n\t\n\t\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t\t//\t- t [0 .. 1]\n\t\n\t\t\tgetPoint: function ( t ) {\n\t\n\t\t\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\t\t\treturn null;\n\t\n\t\t\t},\n\t\n\t\t\t// Get point at relative position in curve according to arc length\n\t\t\t// - u [0 .. 1]\n\t\n\t\t\tgetPointAt: function ( u ) {\n\t\n\t\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\t\treturn this.getPoint( t );\n\t\n\t\t\t},\n\t\n\t\t\t// Get sequence of points using getPoint( t )\n\t\n\t\t\tgetPoints: function ( divisions ) {\n\t\n\t\t\t\tif ( ! divisions ) divisions = 5;\n\t\n\t\t\t\tvar points = [];\n\t\n\t\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn points;\n\t\n\t\t\t},\n\t\n\t\t\t// Get sequence of points using getPointAt( u )\n\t\n\t\t\tgetSpacedPoints: function ( divisions ) {\n\t\n\t\t\t\tif ( ! divisions ) divisions = 5;\n\t\n\t\t\t\tvar points = [];\n\t\n\t\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn points;\n\t\n\t\t\t},\n\t\n\t\t\t// Get total curve arc length\n\t\n\t\t\tgetLength: function () {\n\t\n\t\t\t\tvar lengths = this.getLengths();\n\t\t\t\treturn lengths[ lengths.length - 1 ];\n\t\n\t\t\t},\n\t\n\t\t\t// Get list of cumulative segment lengths\n\t\n\t\t\tgetLengths: function ( divisions ) {\n\t\n\t\t\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\t\n\t\t\t\tif ( this.cacheArcLengths\n\t\t\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t\t\t&& ! this.needsUpdate ) {\n\t\n\t\t\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\t\t\treturn this.cacheArcLengths;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.needsUpdate = false;\n\t\n\t\t\t\tvar cache = [];\n\t\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\t\tvar p, sum = 0;\n\t\n\t\t\t\tcache.push( 0 );\n\t\n\t\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\t\n\t\t\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\t\tcache.push( sum );\n\t\t\t\t\tlast = current;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.cacheArcLengths = cache;\n\t\n\t\t\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\t\n\t\t\t},\n\t\n\t\t\tupdateArcLengths: function() {\n\t\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\tthis.getLengths();\n\t\n\t\t\t},\n\t\n\t\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\n\t\t\tgetUtoTmapping: function ( u, distance ) {\n\t\n\t\t\t\tvar arcLengths = this.getLengths();\n\t\n\t\t\t\tvar i = 0, il = arcLengths.length;\n\t\n\t\t\t\tvar targetArcLength; // The targeted u distance value to get\n\t\n\t\t\t\tif ( distance ) {\n\t\n\t\t\t\t\ttargetArcLength = distance;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//var time = Date.now();\n\t\n\t\t\t\t// binary search for the index with largest value smaller than target u distance\n\t\n\t\t\t\tvar low = 0, high = il - 1, comparison;\n\t\n\t\t\t\twhile ( low <= high ) {\n\t\n\t\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\t\n\t\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\t\n\t\t\t\t\tif ( comparison < 0 ) {\n\t\n\t\t\t\t\t\tlow = i + 1;\n\t\n\t\t\t\t\t} else if ( comparison > 0 ) {\n\t\n\t\t\t\t\t\thigh = i - 1;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\thigh = i;\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t// DONE\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\ti = high;\n\t\n\t\t\t\t//console.log('b' , i, low, high, Date.now()- time);\n\t\n\t\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\t\n\t\t\t\t\tvar t = i / ( il - 1 );\n\t\t\t\t\treturn t;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\t\n\t\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\t\n\t\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\t\n\t\t\t\t// determine where we are between the 'before' and 'after' points\n\t\n\t\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\t\n\t\t\t\t// add that fractional amount to t\n\t\n\t\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\t\n\t\t\t\treturn t;\n\t\n\t\t\t},\n\t\n\t\t\t// Returns a unit vector tangent at t\n\t\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t\t// which seems to give a reasonable approximation\n\t\n\t\t\tgetTangent: function( t ) {\n\t\n\t\t\t\tvar delta = 0.0001;\n\t\t\t\tvar t1 = t - delta;\n\t\t\t\tvar t2 = t + delta;\n\t\n\t\t\t\t// Capping in case of danger\n\t\n\t\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\t\tif ( t2 > 1 ) t2 = 1;\n\t\n\t\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\t\tvar pt2 = this.getPoint( t2 );\n\t\n\t\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\t\treturn vec.normalize();\n\t\n\t\t\t},\n\t\n\t\t\tgetTangentAt: function ( u ) {\n\t\n\t\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\t\treturn this.getTangent( t );\n\t\n\t\t\t},\n\t\n\t\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\t\n\t\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\n\t\t\t\tvar normal = new Vector3();\n\t\n\t\t\t\tvar tangents = [];\n\t\t\t\tvar normals = [];\n\t\t\t\tvar binormals = [];\n\t\n\t\t\t\tvar vec = new Vector3();\n\t\t\t\tvar mat = new Matrix4();\n\t\n\t\t\t\tvar i, u, theta;\n\t\n\t\t\t\t// compute the tangent vectors for each segment on the curve\n\t\n\t\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t\t\t\t\tu = i / segments;\n\t\n\t\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\t\ttangents[ i ].normalize();\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t\t// and in the direction of the minimum tangent xyz component\n\t\n\t\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\t\tvar min = Number.MAX_VALUE;\n\t\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\t\n\t\t\t\tif ( tx <= min ) {\n\t\n\t\t\t\t\tmin = tx;\n\t\t\t\t\tnormal.set( 1, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( ty <= min ) {\n\t\n\t\t\t\t\tmin = ty;\n\t\t\t\t\tnormal.set( 0, 1, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( tz <= min ) {\n\t\n\t\t\t\t\tnormal.set( 0, 0, 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\t\n\t\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t\n\t\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\t\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\t\n\t\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\t\n\t\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\t\n\t\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\t\n\t\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\t\n\t\t\t\t\t\tvec.normalize();\n\t\n\t\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\t\n\t\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\t\n\t\t\t\tif ( closed === true ) {\n\t\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\t\ttheta /= segments;\n\t\n\t\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\t\n\t\t\t\t\t\ttheta = - theta;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\t\n\t\t\t\t\t\t// twist a little...\n\t\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\ttangents: tangents,\n\t\t\t\t\tnormals: normals,\n\t\t\t\t\tbinormals: binormals\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// TODO: Transformation for Curves?\n\t\n\t\t/**************************************************************\n\t\t *\t3D Curves\n\t\t **************************************************************/\n\t\n\t\t// A Factory method for creating new curve subclasses\n\t\n\t\tCurve.create = function ( constructor, getPointFunc ) {\n\t\n\t\t\tconstructor.prototype = Object.create( Curve.prototype );\n\t\t\tconstructor.prototype.constructor = constructor;\n\t\t\tconstructor.prototype.getPoint = getPointFunc;\n\t\n\t\t\treturn constructor;\n\t\n\t\t};\n\t\n\t\t/**************************************************************\n\t\t *\tLine\n\t\t **************************************************************/\n\t\n\t\tfunction LineCurve( v1, v2 ) {\n\t\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\n\t\t}\n\t\n\t\tLineCurve.prototype = Object.create( Curve.prototype );\n\t\tLineCurve.prototype.constructor = LineCurve;\n\t\n\t\tLineCurve.prototype.isLineCurve = true;\n\t\n\t\tLineCurve.prototype.getPoint = function ( t ) {\n\t\n\t\t\tif ( t === 1 ) {\n\t\n\t\t\t\treturn this.v2.clone();\n\t\n\t\t\t}\n\t\n\t\t\tvar point = this.v2.clone().sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\t\n\t\t\treturn point;\n\t\n\t\t};\n\t\n\t\t// Line curve is linear, so we can overwrite default getPointAt\n\t\n\t\tLineCurve.prototype.getPointAt = function ( u ) {\n\t\n\t\t\treturn this.getPoint( u );\n\t\n\t\t};\n\t\n\t\tLineCurve.prototype.getTangent = function( t ) {\n\t\n\t\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\t\n\t\t\treturn tangent.normalize();\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t **/\n\t\n\t\t/**************************************************************\n\t\t *\tCurved Path - a curve path is simply a array of connected\n\t\t *  curves, but retains the api of a curve\n\t\t **************************************************************/\n\t\n\t\tfunction CurvePath() {\n\t\n\t\t\tthis.curves = [];\n\t\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\n\t\t}\n\t\n\t\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\t\n\t\t\tconstructor: CurvePath,\n\t\n\t\t\tadd: function ( curve ) {\n\t\n\t\t\t\tthis.curves.push( curve );\n\t\n\t\t\t},\n\t\n\t\t\tclosePath: function () {\n\t\n\t\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\t\n\t\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\t\n\t\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// To get accurate point with reference to\n\t\t\t// entire path distance at time t,\n\t\t\t// following has to be done:\n\t\n\t\t\t// 1. Length of each sub path have to be known\n\t\t\t// 2. Locate and identify type of curve\n\t\t\t// 3. Get t for the curve\n\t\t\t// 4. Return curve.getPointAt(t')\n\t\n\t\t\tgetPoint: function ( t ) {\n\t\n\t\t\t\tvar d = t * this.getLength();\n\t\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\t\tvar i = 0;\n\t\n\t\t\t\t// To think about boundaries points.\n\t\n\t\t\t\twhile ( i < curveLengths.length ) {\n\t\n\t\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\t\n\t\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\t\tvar curve = this.curves[ i ];\n\t\n\t\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\n\t\t\t\t\t\treturn curve.getPointAt( u );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ti ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\t\n\t\t\t},\n\t\n\t\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t\t// getPoint() depends on getLength\n\t\n\t\t\tgetLength: function () {\n\t\n\t\t\t\tvar lens = this.getCurveLengths();\n\t\t\t\treturn lens[ lens.length - 1 ];\n\t\n\t\t\t},\n\t\n\t\t\t// cacheLengths must be recalculated.\n\t\t\tupdateArcLengths: function () {\n\t\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\tthis.cacheLengths = null;\n\t\t\t\tthis.getLengths();\n\t\n\t\t\t},\n\t\n\t\t\t// Compute lengths and cache them\n\t\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\n\t\t\tgetCurveLengths: function () {\n\t\n\t\t\t\t// We use cache values if curves and cache array are same length\n\t\n\t\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\t\n\t\t\t\t\treturn this.cacheLengths;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Get length of sub-curve\n\t\t\t\t// Push sums into cached array\n\t\n\t\t\t\tvar lengths = [], sums = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\t\tlengths.push( sums );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.cacheLengths = lengths;\n\t\n\t\t\t\treturn lengths;\n\t\n\t\t\t},\n\t\n\t\t\tgetSpacedPoints: function ( divisions ) {\n\t\n\t\t\t\tif ( ! divisions ) divisions = 40;\n\t\n\t\t\t\tvar points = [];\n\t\n\t\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\t\n\t\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.autoClose ) {\n\t\n\t\t\t\t\tpoints.push( points[ 0 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn points;\n\t\n\t\t\t},\n\t\n\t\t\tgetPoints: function ( divisions ) {\n\t\n\t\t\t\tdivisions = divisions || 12;\n\t\n\t\t\t\tvar points = [], last;\n\t\n\t\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\t\n\t\t\t\t\tvar curve = curves[ i ];\n\t\t\t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t\t\t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t\t\t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\t\n\t\t\t\t\tvar pts = curve.getPoints( resolution );\n\t\n\t\t\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\t\n\t\t\t\t\t\tvar point = pts[ j ];\n\t\n\t\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\t\n\t\t\t\t\t\tpoints.push( point );\n\t\t\t\t\t\tlast = point;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t\t\t\t\tpoints.push( points[ 0 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn points;\n\t\n\t\t\t},\n\t\n\t\t\t/**************************************************************\n\t\t\t *\tCreate Geometries Helpers\n\t\t\t **************************************************************/\n\t\n\t\t\t/// Generate geometry from path points (for Line or Points objects)\n\t\n\t\t\tcreatePointsGeometry: function ( divisions ) {\n\t\n\t\t\t\tvar pts = this.getPoints( divisions );\n\t\t\t\treturn this.createGeometry( pts );\n\t\n\t\t\t},\n\t\n\t\t\t// Generate geometry from equidistant sampling along the path\n\t\n\t\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\t\n\t\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\t\treturn this.createGeometry( pts );\n\t\n\t\t\t},\n\t\n\t\t\tcreateGeometry: function ( points ) {\n\t\n\t\t\t\tvar geometry = new Geometry();\n\t\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar point = points[ i ];\n\t\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn geometry;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**************************************************************\n\t\t *\tEllipse curve\n\t\t **************************************************************/\n\t\n\t\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\n\t\t\tthis.aClockwise = aClockwise;\n\t\n\t\t\tthis.aRotation = aRotation || 0;\n\t\n\t\t}\n\t\n\t\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\t\tEllipseCurve.prototype.constructor = EllipseCurve;\n\t\n\t\tEllipseCurve.prototype.isEllipseCurve = true;\n\t\n\t\tEllipseCurve.prototype.getPoint = function( t ) {\n\t\n\t\t\tvar twoPi = Math.PI * 2;\n\t\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\t\n\t\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\t\n\t\t\tif ( deltaAngle < Number.EPSILON ) {\n\t\n\t\t\t\tif ( samePoints ) {\n\t\n\t\t\t\t\tdeltaAngle = 0;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.aClockwise === true && ! samePoints ) {\n\t\n\t\t\t\tif ( deltaAngle === twoPi ) {\n\t\n\t\t\t\t\tdeltaAngle = - twoPi;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\t\n\t\t\tif ( this.aRotation !== 0 ) {\n\t\n\t\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\t\tvar sin = Math.sin( this.aRotation );\n\t\n\t\t\t\tvar tx = x - this.aX;\n\t\t\t\tvar ty = y - this.aY;\n\t\n\t\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\n\t\t\t}\n\t\n\t\t\treturn new Vector2( x, y );\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t */\n\t\n\t\tvar CurveUtils = {\n\t\n\t\t\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\t\n\t\t\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\t\n\t\t\t},\n\t\n\t\t\t// Puay Bing, thanks for helping with this derivative!\n\t\n\t\t\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\t\n\t\t\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t\t\t3 * t * t * p3;\n\t\n\t\t\t},\n\t\n\t\t\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\t\n\t\t\t\t// To check if my formulas are correct\n\t\n\t\t\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\t\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\t\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\t\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\t\n\t\t\t\treturn h00 + h10 + h01 + h11;\n\t\n\t\t\t},\n\t\n\t\t\t// Catmull-Rom\n\t\n\t\t\tinterpolate: function( p0, p1, p2, p3, t ) {\n\t\n\t\t\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\t\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t * t2;\n\t\t\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**************************************************************\n\t\t *\tSpline curve\n\t\t **************************************************************/\n\t\n\t\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\t\n\t\t\tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t\t}\n\t\n\t\tSplineCurve.prototype = Object.create( Curve.prototype );\n\t\tSplineCurve.prototype.constructor = SplineCurve;\n\t\n\t\tSplineCurve.prototype.isSplineCurve = true;\n\t\n\t\tSplineCurve.prototype.getPoint = function ( t ) {\n\t\n\t\t\tvar points = this.points;\n\t\t\tvar point = ( points.length - 1 ) * t;\n\t\n\t\t\tvar intPoint = Math.floor( point );\n\t\t\tvar weight = point - intPoint;\n\t\n\t\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\t\tvar point1 = points[ intPoint ];\n\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t\t\tvar interpolate = CurveUtils.interpolate;\n\t\n\t\t\treturn new Vector2(\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t\t\t);\n\t\n\t\t};\n\t\n\t\t/**************************************************************\n\t\t *\tCubic Bezier curve\n\t\t **************************************************************/\n\t\n\t\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\t\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\n\t\t}\n\t\n\t\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\t\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\t\n\t\tCubicBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t\t\tvar b3 = ShapeUtils.b3;\n\t\n\t\t\treturn new Vector2(\n\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t\t);\n\t\n\t\t};\n\t\n\t\tCubicBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t\t\tvar tangentCubicBezier = CurveUtils.tangentCubicBezier;\n\t\n\t\t\treturn new Vector2(\n\t\t\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t\t).normalize();\n\t\n\t\t};\n\t\n\t\t/**************************************************************\n\t\t *\tQuadratic Bezier curve\n\t\t **************************************************************/\n\t\n\t\n\t\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\t\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\n\t\t}\n\t\n\t\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\t\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\t\n\t\n\t\tQuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t\t\tvar b2 = ShapeUtils.b2;\n\t\n\t\t\treturn new Vector2(\n\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t\t);\n\t\n\t\t};\n\t\n\t\n\t\tQuadraticBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t\t\tvar tangentQuadraticBezier = CurveUtils.tangentQuadraticBezier;\n\t\n\t\t\treturn new Vector2(\n\t\t\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t\t).normalize();\n\t\n\t\t};\n\t\n\t\tvar PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\t\n\t\t\tfromPoints: function ( vectors ) {\n\t\n\t\t\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\t\n\t\t\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tmoveTo: function ( x, y ) {\n\t\n\t\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\t\n\t\t\t},\n\t\n\t\t\tlineTo: function ( x, y ) {\n\t\n\t\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\t\tthis.curves.push( curve );\n\t\n\t\t\t\tthis.currentPoint.set( x, y );\n\t\n\t\t\t},\n\t\n\t\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\n\t\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\t\tnew Vector2( aX, aY )\n\t\t\t\t);\n\t\n\t\t\t\tthis.curves.push( curve );\n\t\n\t\t\t\tthis.currentPoint.set( aX, aY );\n\t\n\t\t\t},\n\t\n\t\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\n\t\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\t\tnew Vector2( aX, aY )\n\t\t\t\t);\n\t\n\t\t\t\tthis.curves.push( curve );\n\t\n\t\t\t\tthis.currentPoint.set( aX, aY );\n\t\n\t\t\t},\n\t\n\t\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\t\n\t\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\t\n\t\t\t\tvar curve = new SplineCurve( npts );\n\t\t\t\tthis.curves.push( curve );\n\t\n\t\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\t\n\t\t\t},\n\t\n\t\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t\t\t\tvar x0 = this.currentPoint.x;\n\t\t\t\tvar y0 = this.currentPoint.y;\n\t\n\t\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\t\n\t\t\t},\n\t\n\t\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t\t\t},\n\t\n\t\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t\t\t\tvar x0 = this.currentPoint.x;\n\t\t\t\tvar y0 = this.currentPoint.y;\n\t\n\t\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t\t\t},\n\t\n\t\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t\t\t\tif ( this.curves.length > 0 ) {\n\t\n\t\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\t\n\t\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\t\n\t\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.curves.push( curve );\n\t\n\t\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\t\tthis.currentPoint.copy( lastPoint );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * Defines a 2d shape plane using paths.\n\t\t **/\n\t\n\t\t// STEP 1 Create a path.\n\t\t// STEP 2 Turn path into shape.\n\t\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t\t// STEP 3a - Extract points from each shape, turn to vertices\n\t\t// STEP 3b - Triangulate each shape, add faces.\n\t\n\t\tfunction Shape() {\n\t\n\t\t\tPath.apply( this, arguments );\n\t\n\t\t\tthis.holes = [];\n\t\n\t\t}\n\t\n\t\tShape.prototype = Object.assign( Object.create( PathPrototype ), {\n\t\n\t\t\tconstructor: Shape,\n\t\n\t\t\tgetPointsHoles: function ( divisions ) {\n\t\n\t\t\t\tvar holesPts = [];\n\t\n\t\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn holesPts;\n\t\n\t\t\t},\n\t\n\t\t\t// Get points of shape and holes (keypoints based on segments parameter)\n\t\n\t\t\textractAllPoints: function ( divisions ) {\n\t\n\t\t\t\treturn {\n\t\n\t\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\t\tholes: this.getPointsHoles( divisions )\n\t\n\t\t\t\t};\n\t\n\t\t\t},\n\t\n\t\t\textractPoints: function ( divisions ) {\n\t\n\t\t\t\treturn this.extractAllPoints( divisions );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * Creates free form 2d path using series of points, lines or curves.\n\t\t *\n\t\t **/\n\t\n\t\tfunction Path( points ) {\n\t\n\t\t\tCurvePath.call( this );\n\t\t\tthis.currentPoint = new Vector2();\n\t\n\t\t\tif ( points ) {\n\t\n\t\t\t\tthis.fromPoints( points );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tPath.prototype = PathPrototype;\n\t\tPathPrototype.constructor = Path;\n\t\n\t\n\t\t// minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t\tfunction ShapePath() {\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\t\n\t\tShapePath.prototype = {\n\t\t\tmoveTo: function ( x, y ) {\n\t\t\t\tthis.currentPath = new Path();\n\t\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\t\tthis.currentPath.moveTo( x, y );\n\t\t\t},\n\t\t\tlineTo: function ( x, y ) {\n\t\t\t\tthis.currentPath.lineTo( x, y );\n\t\t\t},\n\t\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t\t\t},\n\t\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t\t\t},\n\t\t\tsplineThru: function ( pts ) {\n\t\t\t\tthis.currentPath.splineThru( pts );\n\t\t\t},\n\t\n\t\t\ttoShapes: function ( isCCW, noHoles ) {\n\t\n\t\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\t\n\t\t\t\t\tvar shapes = [];\n\t\n\t\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\t\n\t\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\n\t\t\t\t\t\tshapes.push( tmpShape );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn shapes;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\n\t\t\t\t\tvar polyLen = inPolygon.length;\n\t\n\t\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\t\tvar inside = false;\n\t\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\n\t\t\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\t\n\t\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\t\n\t\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\t\n\t\t\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\t\n\t\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\t\n\t\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t\t// continue;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn\tinside;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\n\t\t\t\tvar subPaths = this.subPaths;\n\t\t\t\tif ( subPaths.length === 0 ) return [];\n\t\n\t\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\t\n\t\t\t\tif ( subPaths.length === 1 ) {\n\t\n\t\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\t\ttmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push( tmpShape );\n\t\t\t\t\treturn shapes;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\t\n\t\t\t\t// console.log(\"Holes first\", holesFirst);\n\t\n\t\t\t\tvar betterShapeHoles = [];\n\t\t\t\tvar newShapes = [];\n\t\t\t\tvar newShapeHoles = [];\n\t\t\t\tvar mainIdx = 0;\n\t\t\t\tvar tmpPoints;\n\t\n\t\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\t\n\t\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\t\tsolid = isCCW ? ! solid : solid;\n\t\n\t\t\t\t\tif ( solid ) {\n\t\n\t\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\t\n\t\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\t\n\t\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t\t\t\t\t\t//console.log('cw', i);\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\t\n\t\t\t\t\t\t//console.log('ccw', i);\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t\t\t\tif ( newShapes.length > 1 ) {\n\t\n\t\t\t\t\tvar ambiguous = false;\n\t\t\t\t\tvar toChange = [];\n\t\n\t\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\t\n\t\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\n\t\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\t\tvar hole_unassigned = true;\n\t\n\t\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\n\t\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\t\n\t\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\t\n\t\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\t\tif ( toChange.length > 0 ) {\n\t\n\t\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar tmpHoles;\n\t\n\t\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\n\t\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\t\tshapes.push( tmpShape );\n\t\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\t\n\t\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//console.log(\"shape\", shapes);\n\t\n\t\t\t\treturn shapes;\n\t\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Font( data ) {\n\t\n\t\t\tthis.data = data;\n\t\n\t\t}\n\t\n\t\tObject.assign( Font.prototype, {\n\t\n\t\t\tisFont: true,\n\t\n\t\t\tgenerateShapes: function ( text, size, divisions ) {\n\t\n\t\t\t\tfunction createPaths( text ) {\n\t\n\t\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\t\tvar offset = 0;\n\t\n\t\t\t\t\tvar paths = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\t\t\toffset += ret.offset;\n\t\n\t\t\t\t\t\tpaths.push( ret.path );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn paths;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction createPath( c, scale, offset ) {\n\t\n\t\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\t\n\t\t\t\t\tif ( ! glyph ) return;\n\t\n\t\t\t\t\tvar path = new ShapePath();\n\t\n\t\t\t\t\tvar pts = [], b2 = ShapeUtils.b2, b3 = ShapeUtils.b3;\n\t\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\t\n\t\t\t\t\tif ( glyph.o ) {\n\t\n\t\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\t\n\t\t\t\t\t\t\tvar action = outline[ i ++ ];\n\t\n\t\t\t\t\t\t\tswitch ( action ) {\n\t\n\t\t\t\t\t\t\t\tcase 'm': // moveTo\n\t\n\t\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'l': // lineTo\n\t\n\t\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\t\n\t\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\t\n\t\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t\t\t\t\t\t\t\t\tif ( laste ) {\n\t\n\t\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\t\n\t\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\t\n\t\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t\t\t\t\t\t\t\t\tif ( laste ) {\n\t\n\t\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn { offset: glyph.ha * scale, path: path };\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tif ( size === undefined ) size = 100;\n\t\t\t\tif ( divisions === undefined ) divisions = 4;\n\t\n\t\t\t\tvar data = this.data;\n\t\n\t\t\t\tvar paths = createPaths( text );\n\t\t\t\tvar shapes = [];\n\t\n\t\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\t\n\t\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn shapes;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction FontLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( FontLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\t\tvar json;\n\t\n\t\t\t\t\ttry {\n\t\n\t\t\t\t\t\tjson = JSON.parse( text );\n\t\n\t\t\t\t\t} catch ( e ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar font = scope.parse( json );\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( font );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t},\n\t\n\t\t\tparse: function ( json ) {\n\t\n\t\t\t\treturn new Font( json );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\tvar context;\n\t\n\t\tfunction getAudioContext() {\n\t\n\t\t\tif ( context === undefined ) {\n\t\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\t\n\t\t\t}\n\t\n\t\t\treturn context;\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t\t */\n\t\n\t\tfunction AudioLoader( manager ) {\n\t\n\t\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\n\t\t}\n\t\n\t\tObject.assign( AudioLoader.prototype, {\n\t\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\t\tloader.load( url, function ( buffer ) {\n\t\n\t\t\t\t\tvar context = getAudioContext();\n\t\n\t\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\t\n\t\t\t\t\t\tonLoad( audioBuffer );\n\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction StereoCamera() {\n\t\n\t\t\tthis.type = 'StereoCamera';\n\t\n\t\t\tthis.aspect = 1;\n\t\n\t\t\tthis.eyeSep = 0.064;\n\t\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable( 1 );\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable( 2 );\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\n\t\t}\n\t\n\t\tObject.assign( StereoCamera.prototype, {\n\t\n\t\t\tupdate: ( function () {\n\t\n\t\t\t\tvar instance, focus, fov, aspect, near, far, zoom;\n\t\n\t\t\t\tvar eyeRight = new Matrix4();\n\t\t\t\tvar eyeLeft = new Matrix4();\n\t\n\t\t\t\treturn function update( camera ) {\n\t\n\t\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\t\n\t\t\t\t\tif ( needsUpdate ) {\n\t\n\t\t\t\t\t\tinstance = this;\n\t\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\t\tnear = camera.near;\n\t\t\t\t\t\tfar = camera.far;\n\t\t\t\t\t\tzoom = camera.zoom;\n\t\n\t\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\t\n\t\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\t\tvar eyeSep = this.eyeSep / 2;\n\t\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\t\tvar xmin, xmax;\n\t\n\t\t\t\t\t\t// translate xOffset\n\t\n\t\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\t\n\t\t\t\t\t\t// for left eye\n\t\n\t\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\t\n\t\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\t\n\t\t\t\t\t\t// for right eye\n\t\n\t\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\t\n\t\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )()\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * Camera for rendering cube maps\n\t\t *\t- renders scene into axis-aligned cube\n\t\t *\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction CubeCamera( near, far, cubeResolution ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'CubeCamera';\n\t\n\t\t\tvar fov = 90, aspect = 1;\n\t\n\t\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\t\tthis.add( cameraPX );\n\t\n\t\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\t\tthis.add( cameraNX );\n\t\n\t\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\t\tthis.add( cameraPY );\n\t\n\t\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\t\tthis.add( cameraNY );\n\t\n\t\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\t\tthis.add( cameraPZ );\n\t\n\t\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\t\tthis.add( cameraNZ );\n\t\n\t\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\t\n\t\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\n\t\t\tthis.updateCubeMap = function ( renderer, scene ) {\n\t\n\t\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\t\n\t\t\t\tvar renderTarget = this.renderTarget;\n\t\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\n\t\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\n\t\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\t\n\t\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\t\n\t\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\t\n\t\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\t\n\t\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\t\n\t\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\n\t\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\t\n\t\t\t\trenderer.setRenderTarget( null );\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\t\tCubeCamera.prototype.constructor = CubeCamera;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction AudioListener() {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'AudioListener';\n\t\n\t\t\tthis.context = getAudioContext();\n\t\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( this.context.destination );\n\t\n\t\t\tthis.filter = null;\n\t\n\t\t}\n\t\n\t\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: AudioListener,\n\t\n\t\t\tgetInput: function () {\n\t\n\t\t\t\treturn this.gain;\n\t\n\t\t\t},\n\t\n\t\t\tremoveFilter: function ( ) {\n\t\n\t\t\t\tif ( this.filter !== null ) {\n\t\n\t\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\t\tthis.filter = null;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tgetFilter: function () {\n\t\n\t\t\t\treturn this.filter;\n\t\n\t\t\t},\n\t\n\t\t\tsetFilter: function ( value ) {\n\t\n\t\t\t\tif ( this.filter !== null ) {\n\t\n\t\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.gain.disconnect( this.context.destination );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.filter = value;\n\t\t\t\tthis.gain.connect( this.filter );\n\t\t\t\tthis.filter.connect( this.context.destination );\n\t\n\t\t\t},\n\t\n\t\t\tgetMasterVolume: function () {\n\t\n\t\t\t\treturn this.gain.gain.value;\n\t\n\t\t\t},\n\t\n\t\t\tsetMasterVolume: function ( value ) {\n\t\n\t\t\t\tthis.gain.gain.value = value;\n\t\n\t\t\t},\n\t\n\t\t\tupdateMatrixWorld: ( function () {\n\t\n\t\t\t\tvar position = new Vector3();\n\t\t\t\tvar quaternion = new Quaternion();\n\t\t\t\tvar scale = new Vector3();\n\t\n\t\t\t\tvar orientation = new Vector3();\n\t\n\t\t\t\treturn function updateMatrixWorld( force ) {\n\t\n\t\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\t\t\tvar listener = this.context.listener;\n\t\t\t\t\tvar up = this.up;\n\t\n\t\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )()\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t\t */\n\t\n\t\tfunction Audio( listener ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.type = 'Audio';\n\t\n\t\t\tthis.context = listener.context;\n\t\t\tthis.source = this.context.createBufferSource();\n\t\t\tthis.source.onended = this.onEnded.bind( this );\n\t\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( listener.getInput() );\n\t\n\t\t\tthis.autoplay = false;\n\t\n\t\t\tthis.startTime = 0;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.sourceType = 'empty';\n\t\n\t\t\tthis.filters = [];\n\t\n\t\t}\n\t\n\t\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t\t\tconstructor: Audio,\n\t\n\t\t\tgetOutput: function () {\n\t\n\t\t\t\treturn this.gain;\n\t\n\t\t\t},\n\t\n\t\t\tsetNodeSource: function ( audioNode ) {\n\t\n\t\t\t\tthis.hasPlaybackControl = false;\n\t\t\t\tthis.sourceType = 'audioNode';\n\t\t\t\tthis.source = audioNode;\n\t\t\t\tthis.connect();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetBuffer: function ( audioBuffer ) {\n\t\n\t\t\t\tthis.source.buffer = audioBuffer;\n\t\t\t\tthis.sourceType = 'buffer';\n\t\n\t\t\t\tif ( this.autoplay ) this.play();\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tplay: function () {\n\t\n\t\t\t\tif ( this.isPlaying === true ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar source = this.context.createBufferSource();\n\t\n\t\t\t\tsource.buffer = this.source.buffer;\n\t\t\t\tsource.loop = this.source.loop;\n\t\t\t\tsource.onended = this.source.onended;\n\t\t\t\tsource.start( 0, this.startTime );\n\t\t\t\tsource.playbackRate.value = this.playbackRate;\n\t\n\t\t\t\tthis.isPlaying = true;\n\t\n\t\t\t\tthis.source = source;\n\t\n\t\t\t\treturn this.connect();\n\t\n\t\t\t},\n\t\n\t\t\tpause: function () {\n\t\n\t\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.startTime = this.context.currentTime;\n\t\t\t\tthis.isPlaying = false;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tstop: function () {\n\t\n\t\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.startTime = 0;\n\t\t\t\tthis.isPlaying = false;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tconnect: function () {\n\t\n\t\t\t\tif ( this.filters.length > 0 ) {\n\t\n\t\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\t\n\t\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.source.connect( this.getOutput() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tdisconnect: function () {\n\t\n\t\t\t\tif ( this.filters.length > 0 ) {\n\t\n\t\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\t\n\t\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.source.disconnect( this.getOutput() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetFilters: function () {\n\t\n\t\t\t\treturn this.filters;\n\t\n\t\t\t},\n\t\n\t\t\tsetFilters: function ( value ) {\n\t\n\t\t\t\tif ( ! value ) value = [];\n\t\n\t\t\t\tif ( this.isPlaying === true ) {\n\t\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t\tthis.filters = value;\n\t\t\t\t\tthis.connect();\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.filters = value;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetFilter: function () {\n\t\n\t\t\t\treturn this.getFilters()[ 0 ];\n\t\n\t\t\t},\n\t\n\t\t\tsetFilter: function ( filter ) {\n\t\n\t\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\t\n\t\t\t},\n\t\n\t\t\tsetPlaybackRate: function ( value ) {\n\t\n\t\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.playbackRate = value;\n\t\n\t\t\t\tif ( this.isPlaying === true ) {\n\t\n\t\t\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetPlaybackRate: function () {\n\t\n\t\t\t\treturn this.playbackRate;\n\t\n\t\t\t},\n\t\n\t\t\tonEnded: function () {\n\t\n\t\t\t\tthis.isPlaying = false;\n\t\n\t\t\t},\n\t\n\t\t\tgetLoop: function () {\n\t\n\t\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.source.loop;\n\t\n\t\t\t},\n\t\n\t\t\tsetLoop: function ( value ) {\n\t\n\t\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.source.loop = value;\n\t\n\t\t\t},\n\t\n\t\t\tgetVolume: function () {\n\t\n\t\t\t\treturn this.gain.gain.value;\n\t\n\t\t\t},\n\t\n\t\n\t\t\tsetVolume: function ( value ) {\n\t\n\t\t\t\tthis.gain.gain.value = value;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction PositionalAudio( listener ) {\n\t\n\t\t\tAudio.call( this, listener );\n\t\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.connect( this.gain );\n\t\n\t\t}\n\t\n\t\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\t\n\t\t\tconstructor: PositionalAudio,\n\t\n\t\t\tgetOutput: function () {\n\t\n\t\t\t\treturn this.panner;\n\t\n\t\t\t},\n\t\n\t\t\tgetRefDistance: function () {\n\t\n\t\t\t\treturn this.panner.refDistance;\n\t\n\t\t\t},\n\t\n\t\t\tsetRefDistance: function ( value ) {\n\t\n\t\t\t\tthis.panner.refDistance = value;\n\t\n\t\t\t},\n\t\n\t\t\tgetRolloffFactor: function () {\n\t\n\t\t\t\treturn this.panner.rolloffFactor;\n\t\n\t\t\t},\n\t\n\t\t\tsetRolloffFactor: function ( value ) {\n\t\n\t\t\t\tthis.panner.rolloffFactor = value;\n\t\n\t\t\t},\n\t\n\t\t\tgetDistanceModel: function () {\n\t\n\t\t\t\treturn this.panner.distanceModel;\n\t\n\t\t\t},\n\t\n\t\t\tsetDistanceModel: function ( value ) {\n\t\n\t\t\t\tthis.panner.distanceModel = value;\n\t\n\t\t\t},\n\t\n\t\t\tgetMaxDistance: function () {\n\t\n\t\t\t\treturn this.panner.maxDistance;\n\t\n\t\t\t},\n\t\n\t\t\tsetMaxDistance: function ( value ) {\n\t\n\t\t\t\tthis.panner.maxDistance = value;\n\t\n\t\t\t},\n\t\n\t\t\tupdateMatrixWorld: ( function () {\n\t\n\t\t\t\tvar position = new Vector3();\n\t\n\t\t\t\treturn function updateMatrixWorld( force ) {\n\t\n\t\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t\t\t\t};\n\t\n\t\t\t} )()\n\t\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction AudioAnalyser( audio, fftSize ) {\n\t\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\n\t\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\t\n\t\t\taudio.getOutput().connect( this.analyser );\n\t\n\t\t}\n\t\n\t\tObject.assign( AudioAnalyser.prototype, {\n\t\n\t\t\tgetFrequencyData: function () {\n\t\n\t\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\t\n\t\t\t\treturn this.data;\n\t\n\t\t\t},\n\t\n\t\t\tgetAverageFrequency: function () {\n\t\n\t\t\t\tvar value = 0, data = this.getFrequencyData();\n\t\n\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t\t\t\t\tvalue += data[ i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn value / data.length;\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t *\n\t\t * Buffered scene graph property that allows weighted accumulation.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\t\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\n\t\t\tvar bufferType = Float64Array,\n\t\t\t\tmixFunction;\n\t\n\t\t\tswitch ( typeName ) {\n\t\n\t\t\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\t\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\n\t\t\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\t\n\t\t\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\t\n\t\t\t}\n\t\n\t\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\n\t\t\tthis.cumulativeWeight = 0;\n\t\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\n\t\t}\n\t\n\t\tPropertyMixer.prototype = {\n\t\n\t\t\tconstructor: PropertyMixer,\n\t\n\t\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\t\taccumulate: function( accuIndex, weight ) {\n\t\n\t\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t\t// the weight and shouldn't have made the call in the first place\n\t\n\t\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\n\t\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\t\n\t\t\t\tif ( currentWeight === 0 ) {\n\t\n\t\t\t\t\t// accuN := incoming * weight\n\t\n\t\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcurrentWeight = weight;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// accuN := accuN + incoming * weight\n\t\n\t\t\t\t\tcurrentWeight += weight;\n\t\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.cumulativeWeight = currentWeight;\n\t\n\t\t\t},\n\t\n\t\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\t\tapply: function( accuIndex ) {\n\t\n\t\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\n\t\t\t\t\tbinding = this.binding;\n\t\n\t\t\t\tthis.cumulativeWeight = 0;\n\t\n\t\t\t\tif ( weight < 1 ) {\n\t\n\t\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\n\t\t\t\t\tvar originalValueOffset = stride * 3;\n\t\n\t\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\t\n\t\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\t\n\t\t\t\t\t\t// value has changed -> update scene graph\n\t\n\t\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// remember the state of the bound property and copy it to both accus\n\t\t\tsaveOriginalState: function() {\n\t\n\t\t\t\tvar binding = this.binding;\n\t\n\t\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\t\toriginalValueOffset = stride * 3;\n\t\n\t\t\t\tbinding.getValue( buffer, originalValueOffset );\n\t\n\t\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\t\n\t\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.cumulativeWeight = 0;\n\t\n\t\t\t},\n\t\n\t\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\t\trestoreOriginalState: function() {\n\t\n\t\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\t\n\t\t\t},\n\t\n\t\n\t\t\t// mix functions\n\t\n\t\t\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t\t\t\tif ( t >= 0.5 ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t\t\t\tQuaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\t\n\t\t\t},\n\t\n\t\t\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t\t\t\tvar s = 1 - t;\n\t\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\tvar j = dstOffset + i;\n\t\n\t\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t *\n\t\t * A reference to a real property in the scene graph.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\t\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath ||\n\t\t\t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t\t\tthis.node = PropertyBinding.findNode(\n\t\t\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\t\n\t\t\tthis.rootNode = rootNode;\n\t\n\t\t}\n\t\n\t\tPropertyBinding.prototype = {\n\t\n\t\t\tconstructor: PropertyBinding,\n\t\n\t\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\t\n\t\t\t\tthis.bind();\n\t\t\t\tthis.getValue( targetArray, offset );\n\t\n\t\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t\t// prototype version of these methods with one that represents\n\t\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t\t// become no-ops.\n\t\n\t\t\t},\n\t\n\t\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\t\n\t\t\t\tthis.bind();\n\t\t\t\tthis.setValue( sourceArray, offset );\n\t\n\t\t\t},\n\t\n\t\t\t// create getter / setter pair for a property in the scene graph\n\t\t\tbind: function() {\n\t\n\t\t\t\tvar targetObject = this.node,\n\t\t\t\t\tparsedPath = this.parsedPath,\n\t\n\t\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\t\n\t\t\t\tif ( ! targetObject ) {\n\t\n\t\t\t\t\ttargetObject = PropertyBinding.findNode(\n\t\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\t\n\t\t\t\t\tthis.node = targetObject;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// set fail state so we can just 'return' on error\n\t\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\t\tthis.setValue = this._setValue_unavailable;\n\t\n\t\t \t\t// ensure there is a value node\n\t\t\t\tif ( ! targetObject ) {\n\t\n\t\t\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( objectName ) {\n\t\n\t\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\t\n\t\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\t\tswitch ( objectName ) {\n\t\n\t\t\t\t\t\tcase 'materials':\n\t\n\t\t\t\t\t\t\tif ( ! targetObject.material ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'bones':\n\t\n\t\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t\t// and convert the integer string to a true integer.\n\t\n\t\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\t\n\t\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\t\n\t\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\t\n\t\t\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\t\n\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\tif ( objectIndex !== undefined ) {\n\t\n\t\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\t\n\t\t\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// resolve property\n\t\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\t\n\t\t\t\tif ( nodeProperty === undefined ) {\n\t\n\t\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\n\t\t\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// determine versioning scheme\n\t\t\t\tvar versioning = this.Versioning.None;\n\t\n\t\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\t\n\t\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\t\tthis.targetObject = targetObject;\n\t\n\t\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\t\n\t\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\t\tthis.targetObject = targetObject;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// determine how the property gets bound\n\t\t\t\tvar bindingType = this.BindingType.Direct;\n\t\n\t\t\t\tif ( propertyIndex !== undefined ) {\n\t\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\n\t\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tif ( ! targetObject.geometry ) {\n\t\n\t\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\n\t\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\t\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\n\t\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\n\t\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\n\t\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\n\t\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t\t\t\t} else if ( nodeProperty.length !== undefined ) {\n\t\n\t\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\n\t\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.propertyName = propertyName;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// select getter / setter\n\t\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\t\n\t\t\t},\n\t\n\t\t\tunbind: function() {\n\t\n\t\t\t\tthis.node = null;\n\t\n\t\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\t\tthis.setValue = this._setValue_unbound;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\t\n\t\t\t// these are used to \"bind\" a nonexistent property\n\t\t\t_getValue_unavailable: function() {},\n\t\t\t_setValue_unavailable: function() {},\n\t\n\t\t\t// initial state of these methods that calls 'bind'\n\t\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\t\n\t\t\tBindingType: {\n\t\t\t\tDirect: 0,\n\t\t\t\tEntireArray: 1,\n\t\t\t\tArrayElement: 2,\n\t\t\t\tHasFromToArray: 3\n\t\t\t},\n\t\n\t\t\tVersioning: {\n\t\t\t\tNone: 0,\n\t\t\t\tNeedsUpdate: 1,\n\t\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t\t},\n\t\n\t\t\tGetterByBindingType: [\n\t\n\t\t\t\tfunction getValue_direct( buffer, offset ) {\n\t\n\t\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction getValue_array( buffer, offset ) {\n\t\n\t\t\t\t\tvar source = this.resolvedProperty;\n\t\n\t\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\t\n\t\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction getValue_toArray( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\t\n\t\t\t\t}\n\t\n\t\t\t],\n\t\n\t\t\tSetterByBindingTypeAndVersioning: [\n\t\n\t\t\t\t[\n\t\t\t\t\t// Direct\n\t\n\t\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t], [\n\t\n\t\t\t\t\t// EntireArray\n\t\n\t\t\t\t\tfunction setValue_array( buffer, offset ) {\n\t\n\t\t\t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t], [\n\t\n\t\t\t\t\t// ArrayElement\n\t\n\t\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t], [\n\t\n\t\t\t\t\t// HasToFromArray\n\t\n\t\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t]\n\t\n\t\t\t]\n\t\n\t\t} );\n\t\n\t\tPropertyBinding.Composite =\n\t\t\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\t\n\t\t\tvar parsedPath = optionalParsedPath ||\n\t\t\t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\t\n\t\t};\n\t\n\t\tPropertyBinding.Composite.prototype = {\n\t\n\t\t\tconstructor: PropertyBinding.Composite,\n\t\n\t\t\tgetValue: function( array, offset ) {\n\t\n\t\t\t\tthis.bind(); // bind all binding\n\t\n\t\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\t\n\t\t\t\t// and only call .getValue on the first\n\t\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\t\n\t\t\t},\n\t\n\t\t\tsetValue: function( array, offset ) {\n\t\n\t\t\t\tvar bindings = this._bindings;\n\t\n\t\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tbindings[ i ].setValue( array, offset );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tbind: function() {\n\t\n\t\t\t\tvar bindings = this._bindings;\n\t\n\t\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tbindings[ i ].bind();\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tunbind: function() {\n\t\n\t\t\t\tvar bindings = this._bindings;\n\t\n\t\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tbindings[ i ].unbind();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tPropertyBinding.create = function( root, path, parsedPath ) {\n\t\n\t\t\tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\t\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tPropertyBinding.parseTrackName = function( trackName ) {\n\t\n\t\t\t// matches strings in the form of:\n\t\t\t//    nodeName.property\n\t\t\t//    nodeName.property[accessor]\n\t\t\t//    nodeName.material.property[accessor]\n\t\t\t//    uuid.property[accessor]\n\t\t\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t\t\t//    parentName/nodeName.property\n\t\t\t//    parentName/parentName/nodeName.property[index]\n\t\t\t//    .bone[Armature.DEF_cog].position\n\t\t\t//    scene:helium_balloon_model:helium_balloon_model.position\n\t\t\t// created and tested via https://regex101.com/#javascript\n\t\n\t\t\tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n\t\t\tvar matches = re.exec( trackName );\n\t\n\t\t\tif ( ! matches ) {\n\t\n\t\t\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t\n\t\t\t}\n\t\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ],\n\t\t\t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n\t\t\t};\n\t\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\n\t\t\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t\n\t\t\t}\n\t\n\t\t\treturn results;\n\t\n\t\t};\n\t\n\t\tPropertyBinding.findNode = function( root, nodeName ) {\n\t\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\t\n\t\t\t\treturn root;\n\t\n\t\t\t}\n\t\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\t\n\t\t\t\tvar searchSkeleton = function( skeleton ) {\n\t\n\t\t\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\t\n\t\t\t\t\t\tif ( bone.name === nodeName ) {\n\t\n\t\t\t\t\t\t\treturn bone;\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t};\n\t\n\t\t\t\tvar bone = searchSkeleton( root.skeleton );\n\t\n\t\t\t\tif ( bone ) {\n\t\n\t\t\t\t\treturn bone;\n\t\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\t\n\t\t\t\tvar searchNodeSubtree = function( children ) {\n\t\n\t\t\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar childNode = children[ i ];\n\t\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\t\n\t\t\t\t\t\t\treturn childNode;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\t\n\t\t\t\t\t\tif ( result ) return result;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t};\n\t\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\t\n\t\t\t\tif ( subTreeNode ) {\n\t\n\t\t\t\t\treturn subTreeNode;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn null;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t *\n\t\t * A group of objects that receives a shared animation state.\n\t\t *\n\t\t * Usage:\n\t\t *\n\t\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t\t *\n\t\t * \t-\tInstead pass this object as 'root'.\n\t\t *\n\t\t * \t-\tYou can also add and remove objects later when the mixer\n\t\t * \t\tis running.\n\t\t *\n\t\t * Note:\n\t\t *\n\t\t *  \tObjects of this class appear as one object to the mixer,\n\t\t *  \tso cache control of the individual objects must be done\n\t\t *  \ton the group.\n\t\t *\n\t\t * Limitation:\n\t\t *\n\t\t * \t- \tThe animated properties must be compatible among the\n\t\t * \t\tall objects in the group.\n\t\t *\n\t\t *  -\tA single property can either be controlled through a\n\t\t *  \ttarget group or directly, but not both.\n\t\t *\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction AnimationObjectGroup( var_args ) {\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\t// cached objects followed by the active ones\n\t\t\tthis._objects = Array.prototype.slice.call( arguments );\n\t\n\t\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\t\n\t\t\tvar indices = {};\n\t\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\t\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\tindices[ arguments[ i ].uuid ] = i;\n\t\n\t\t\t}\n\t\n\t\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tthis.stats = {\n\t\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() { return scope._objects.length; },\n\t\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t\t\t},\n\t\n\t\t\t\tget bindingsPerObject() { return scope._bindings.length; }\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tAnimationObjectGroup.prototype = {\n\t\n\t\t\tconstructor: AnimationObjectGroup,\n\t\n\t\t\tisAnimationObjectGroup: true,\n\t\n\t\t\tadd: function( var_args ) {\n\t\n\t\t\t\tvar objects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\n\t\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t\t\t\t\tif ( index === undefined ) {\n\t\n\t\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\n\t\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\t\tobjects.push( object );\n\t\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\t\t\tnew PropertyBinding(\n\t\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( index < nCachedObjects ) {\n\t\n\t\t\t\t\t\tvar knownObject = objects[ index ];\n\t\n\t\t\t\t\t\t// move existing object to the ACTIVE region\n\t\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\t\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\t\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\n\t\t\t\t\t\t\tif ( binding === undefined ) {\n\t\n\t\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t\t// or may not exist\n\t\n\t\t\t\t\t\t\t\tbinding = new PropertyBinding(\n\t\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( objects[ index ] !== knownObject) {\n\t\n\t\t\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\t\n\t\t\t\t\t} // else the object is already where we want it to be\n\t\n\t\t\t\t} // for arguments\n\t\n\t\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t\t\t},\n\t\n\t\t\tremove: function( var_args ) {\n\t\n\t\t\t\tvar objects = this._objects,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\n\t\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\t\n\t\t\t\t\t\t// move existing object into the CACHED region\n\t\n\t\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\t\n\t\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\t\n\t\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\t\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} // for arguments\n\t\n\t\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t\t\t},\n\t\n\t\t\t// remove & forget\n\t\t\tuncache: function( var_args ) {\n\t\n\t\t\t\tvar objects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\n\t\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t\t\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\t\n\t\t\t\t\t\tif ( index < nCachedObjects ) {\n\t\n\t\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\n\t\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\t\tobjects.pop();\n\t\n\t\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\t\n\t\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\n\t\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\t\tobjects.pop();\n\t\n\t\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\t\n\t\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} // cached or active\n\t\n\t\t\t\t\t} // if object is known\n\t\n\t\t\t\t} // for arguments\n\t\n\t\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t\t\t},\n\t\n\t\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\t\n\t\t\tsubscribe_: function( path, parsedPath ) {\n\t\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t\t// according to the contained objects in the group\n\t\n\t\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\t\tbindings = this._bindings;\n\t\n\t\t\t\tif ( index !== undefined ) return bindings[ index ];\n\t\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array( nObjects );\n\t\n\t\t\t\tindex = bindings.length;\n\t\n\t\t\t\tindicesByPath[ path ] = index;\n\t\n\t\t\t\tpaths.push( path );\n\t\t\t\tparsedPaths.push( parsedPath );\n\t\t\t\tbindings.push( bindingsForPath );\n\t\n\t\t\t\tfor ( var i = nCachedObjects,\n\t\t\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar object = objects[ i ];\n\t\n\t\t\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn bindingsForPath;\n\t\n\t\t\t},\n\t\n\t\t\tunsubscribe_: function( path ) {\n\t\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t\t// update the array previously obtained with 'subscribe_'\n\t\n\t\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[ path ];\n\t\n\t\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\t\n\t\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\t\n\t\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\t\tbindings.pop();\n\t\n\t\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\t\tparsedPaths.pop();\n\t\n\t\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\t\tpaths.pop();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t *\n\t\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t\t * objects.\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t *\n\t\t */\n\t\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\t\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot || null;\n\t\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tinterpolants = new Array( nTracks );\n\t\n\t\t\tvar interpolantSettings = {\n\t\t\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t\t\t};\n\t\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\t\tinterpolants[ i ] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\n\t\t\t}\n\t\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\n\t\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\t\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\t\t\tthis._propertyBindings = new Array( nTracks );\n\t\n\t\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\t\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1;\n\t\n\t\t\t// global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\t\t\tthis._startTime = null;\n\t\n\t\t\t// scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\t\tthis.time = 0;\n\t\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\n\t\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\t\n\t\t\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t\t\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\t\n\t\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\t\n\t\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\t\n\t\t}\n\t\n\t\tAnimationAction.prototype = {\n\t\n\t\t\tconstructor: AnimationAction,\n\t\n\t\t\t// State & Scheduling\n\t\n\t\t\tplay: function() {\n\t\n\t\t\t\tthis._mixer._activateAction( this );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tstop: function() {\n\t\n\t\t\t\tthis._mixer._deactivateAction( this );\n\t\n\t\t\t\treturn this.reset();\n\t\n\t\t\t},\n\t\n\t\t\treset: function() {\n\t\n\t\t\t\tthis.paused = false;\n\t\t\t\tthis.enabled = true;\n\t\n\t\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\t\tthis._loopCount = -1;\t// forget previous loops\n\t\t\t\tthis._startTime = null;\t// forget scheduling\n\t\n\t\t\t\treturn this.stopFading().stopWarping();\n\t\n\t\t\t},\n\t\n\t\t\tisRunning: function() {\n\t\n\t\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\t\n\t\t\t},\n\t\n\t\t\t// return true when play has been called\n\t\t\tisScheduled: function() {\n\t\n\t\t\t\treturn this._mixer._isActiveAction( this );\n\t\n\t\t\t},\n\t\n\t\t\tstartAt: function( time ) {\n\t\n\t\t\t\tthis._startTime = time;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetLoop: function( mode, repetitions ) {\n\t\n\t\t\t\tthis.loop = mode;\n\t\t\t\tthis.repetitions = repetitions;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// Weight\n\t\n\t\t\t// set the weight stopping any scheduled fading\n\t\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t\t// method does *not* change .enabled, because it would be confusing\n\t\t\tsetEffectiveWeight: function( weight ) {\n\t\n\t\t\t\tthis.weight = weight;\n\t\n\t\t\t\t// note: same logic as when updated at runtime\n\t\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\n\t\t\t\treturn this.stopFading();\n\t\n\t\t\t},\n\t\n\t\t\t// return the weight considering fading and .enabled\n\t\t\tgetEffectiveWeight: function() {\n\t\n\t\t\t\treturn this._effectiveWeight;\n\t\n\t\t\t},\n\t\n\t\t\tfadeIn: function( duration ) {\n\t\n\t\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\t\n\t\t\t},\n\t\n\t\t\tfadeOut: function( duration ) {\n\t\n\t\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\t\n\t\t\t},\n\t\n\t\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\t\n\t\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\t\tthis.fadeIn( duration );\n\t\n\t\t\t\tif( warp ) {\n\t\n\t\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\n\t\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\t\n\t\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\t\n\t\t\t},\n\t\n\t\t\tstopFading: function() {\n\t\n\t\t\t\tvar weightInterpolant = this._weightInterpolant;\n\t\n\t\t\t\tif ( weightInterpolant !== null ) {\n\t\n\t\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// Time Scale Control\n\t\n\t\t\t// set the weight stopping any scheduled warping\n\t\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t\t// method does *not* change .paused, because it would be confusing\n\t\t\tsetEffectiveTimeScale: function( timeScale ) {\n\t\n\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\t\n\t\t\t\treturn this.stopWarping();\n\t\n\t\t\t},\n\t\n\t\t\t// return the time scale considering warping and .paused\n\t\t\tgetEffectiveTimeScale: function() {\n\t\n\t\t\t\treturn this._effectiveTimeScale;\n\t\n\t\t\t},\n\t\n\t\t\tsetDuration: function( duration ) {\n\t\n\t\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\n\t\t\t\treturn this.stopWarping();\n\t\n\t\t\t},\n\t\n\t\t\tsyncWith: function( action ) {\n\t\n\t\t\t\tthis.time = action.time;\n\t\t\t\tthis.timeScale = action.timeScale;\n\t\n\t\t\t\treturn this.stopWarping();\n\t\n\t\t\t},\n\t\n\t\t\thalt: function( duration ) {\n\t\n\t\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\t\n\t\t\t},\n\t\n\t\t\twarp: function( startTimeScale, endTimeScale, duration ) {\n\t\n\t\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\t\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\n\t\t\t\tif ( interpolant === null ) {\n\t\n\t\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\n\t\t\t\ttimes[ 0 ] = now;\n\t\t\t\ttimes[ 1 ] = now + duration;\n\t\n\t\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tstopWarping: function() {\n\t\n\t\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\t\n\t\t\t\tif ( timeScaleInterpolant !== null ) {\n\t\n\t\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// Object Accessors\n\t\n\t\t\tgetMixer: function() {\n\t\n\t\t\t\treturn this._mixer;\n\t\n\t\t\t},\n\t\n\t\t\tgetClip: function() {\n\t\n\t\t\t\treturn this._clip;\n\t\n\t\t\t},\n\t\n\t\t\tgetRoot: function() {\n\t\n\t\t\t\treturn this._localRoot || this._mixer._root;\n\t\n\t\t\t},\n\t\n\t\t\t// Interna\n\t\n\t\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t\t\t// called by the mixer\n\t\n\t\t\t\tvar startTime = this._startTime;\n\t\n\t\t\t\tif ( startTime !== null ) {\n\t\n\t\t\t\t\t// check for scheduled start of action\n\t\n\t\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\t\n\t\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// start\n\t\n\t\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// apply time scale and advance time\n\t\n\t\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\t\tvar clipTime = this._updateTime( deltaTime );\n\t\n\t\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t\t// an effective weight of 0\n\t\n\t\t\t\tvar weight = this._updateWeight( time );\n\t\n\t\t\t\tif ( weight > 0 ) {\n\t\n\t\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\t\tvar propertyMixers = this._propertyBindings;\n\t\n\t\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_updateWeight: function( time ) {\n\t\n\t\t\t\tvar weight = 0;\n\t\n\t\t\t\tif ( this.enabled ) {\n\t\n\t\t\t\t\tweight = this.weight;\n\t\t\t\t\tvar interpolant = this._weightInterpolant;\n\t\n\t\t\t\t\tif ( interpolant !== null ) {\n\t\n\t\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t\t\t\t\t\tweight *= interpolantValue;\n\t\n\t\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t\t\t\t\t\t\tthis.stopFading();\n\t\n\t\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\t\n\t\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\t\tthis.enabled = false;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._effectiveWeight = weight;\n\t\t\t\treturn weight;\n\t\n\t\t\t},\n\t\n\t\t\t_updateTimeScale: function( time ) {\n\t\n\t\t\t\tvar timeScale = 0;\n\t\n\t\t\t\tif ( ! this.paused ) {\n\t\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\n\t\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\t\n\t\t\t\t\tif ( interpolant !== null ) {\n\t\n\t\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t\t\t\t\t\ttimeScale *= interpolantValue;\n\t\n\t\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t\t\t\t\t\t\tthis.stopWarping();\n\t\n\t\t\t\t\t\t\tif ( timeScale === 0 ) {\n\t\n\t\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\t\tthis.paused = true;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\t\treturn timeScale;\n\t\n\t\t\t},\n\t\n\t\t\t_updateTime: function( deltaTime ) {\n\t\n\t\t\t\tvar time = this.time + deltaTime;\n\t\n\t\t\t\tif ( deltaTime === 0 ) return time;\n\t\n\t\t\t\tvar duration = this._clip.duration,\n\t\n\t\t\t\t\tloop = this.loop,\n\t\t\t\t\tloopCount = this._loopCount;\n\t\n\t\t\t\tif ( loop === LoopOnce ) {\n\t\n\t\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t\t// just started\n\t\n\t\t\t\t\t\tthis.loopCount = 0;\n\t\t\t\t\t\tthis._setEndings( true, true, false );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\thandle_stop: {\n\t\n\t\t\t\t\t\tif ( time >= duration ) {\n\t\n\t\t\t\t\t\t\ttime = duration;\n\t\n\t\t\t\t\t\t} else if ( time < 0 ) {\n\t\n\t\t\t\t\t\t\ttime = 0;\n\t\n\t\t\t\t\t\t} else break handle_stop;\n\t\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\t\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else { // repetitive Repeat or PingPong\n\t\n\t\t\t\t\tvar pingPong = ( loop === LoopPingPong );\n\t\n\t\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t\t// just started\n\t\n\t\t\t\t\t\tif ( deltaTime >= 0 ) {\n\t\n\t\t\t\t\t\t\tloopCount = 0;\n\t\n\t\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t\t// so leave loopCount at -1\n\t\n\t\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t\t\t// wrap around\n\t\n\t\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\t\ttime -= duration * loopDelta;\n\t\n\t\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\t\n\t\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\t\n\t\t\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\n\t\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\t\telse this.enabled = false;\n\t\n\t\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\n\t\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// keep running\n\t\n\t\t\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t\t\t// entering the last round\n\t\n\t\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\n\t\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t\t\t// invert time for the \"pong round\"\n\t\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\treturn duration - time;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.time = time;\n\t\t\t\treturn time;\n\t\n\t\t\t},\n\t\n\t\t\t_setEndings: function( atStart, atEnd, pingPong ) {\n\t\n\t\t\t\tvar settings = this._interpolantSettings;\n\t\n\t\t\t\tif ( pingPong ) {\n\t\n\t\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\n\t\t\t\t\tif ( atStart ) {\n\t\n\t\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( atEnd ) {\n\t\n\t\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\t\n\t\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\t\tinterpolant = this._weightInterpolant;\n\t\n\t\t\t\tif ( interpolant === null ) {\n\t\n\t\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\t\tthis._weightInterpolant = interpolant;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\n\t\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t *\n\t\t * Player for AnimationClips.\n\t\t *\n\t\t *\n\t\t * @author Ben Houston / http://clara.io/\n\t\t * @author David Sarno / http://lighthaus.us/\n\t\t * @author tschw\n\t\t */\n\t\n\t\tfunction AnimationMixer( root ) {\n\t\n\t\t\tthis._root = root;\n\t\t\tthis._initMemoryManager();\n\t\t\tthis._accuIndex = 0;\n\t\n\t\t\tthis.time = 0;\n\t\n\t\t\tthis.timeScale = 1.0;\n\t\n\t\t}\n\t\n\t\tObject.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\t\n\t\t\t// return an action for a clip optionally using a custom root target\n\t\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t\t// previously unknown clip/root combination is specified)\n\t\t\tclipAction: function( clip, optionalRoot ) {\n\t\n\t\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\n\t\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\t\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\t\tprototypeAction = null;\n\t\n\t\t\t\tif ( actionsForClip !== undefined ) {\n\t\n\t\t\t\t\tvar existingAction =\n\t\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\t\n\t\t\t\t\tif ( existingAction !== undefined ) {\n\t\n\t\t\t\t\t\treturn existingAction;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t\t// the bindings again but can just copy\n\t\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\t\n\t\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t\tclipObject = prototypeAction._clip;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// clip must be known when specified via string\n\t\t\t\tif ( clipObject === null ) return null;\n\t\n\t\t\t\t// allocate all resources required to run it\n\t\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\t\n\t\t\t\tthis._bindAction( newAction, prototypeAction );\n\t\n\t\t\t\t// and make the action known to the memory manager\n\t\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\t\n\t\t\t\treturn newAction;\n\t\n\t\t\t},\n\t\n\t\t\t// get an existing action\n\t\t\texistingAction: function( clip, optionalRoot ) {\n\t\n\t\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\n\t\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t\t\t\tif ( actionsForClip !== undefined ) {\n\t\n\t\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t},\n\t\n\t\t\t// deactivates all previously scheduled actions\n\t\t\tstopAllAction: function() {\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\t\n\t\t\t\tthis._nActiveActions = 0;\n\t\t\t\tthis._nActiveBindings = 0;\n\t\n\t\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t\t\t\t\tactions[ i ].reset();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t\t\t\t\tbindings[ i ].useCount = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// advance the time and update apply the animation\n\t\t\tupdate: function( deltaTime ) {\n\t\n\t\t\t\tdeltaTime *= this.timeScale;\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\t\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\t\n\t\t\t\t// run active actions\n\t\n\t\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t\t\t\t\tvar action = actions[ i ];\n\t\n\t\t\t\t\tif ( action.enabled ) {\n\t\n\t\t\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// update scene graph\n\t\n\t\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\t\n\t\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t\t\t\t\tbindings[ i ].apply( accuIndex );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// return this mixer's root target object\n\t\t\tgetRoot: function() {\n\t\n\t\t\t\treturn this._root;\n\t\n\t\t\t},\n\t\n\t\t\t// free all resources specific to a particular clip\n\t\t\tuncacheClip: function( clip ) {\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t\t\t\tif ( actionsForClip !== undefined ) {\n\t\n\t\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t\t// just throw away\n\t\n\t\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\t\n\t\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tvar action = actionsToRemove[ i ];\n\t\n\t\t\t\t\t\tthis._deactivateAction( action );\n\t\n\t\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\t\n\t\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\t\taction._byClipCacheIndex = null;\n\t\n\t\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\t\tactions.pop();\n\t\n\t\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// free all resources specific to a particular root target object\n\t\t\tuncacheRoot: function( root ) {\n\t\n\t\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\n\t\t\t\tfor ( var clipUuid in actionsByClip ) {\n\t\n\t\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\t\n\t\t\t\t\tif ( action !== undefined ) {\n\t\n\t\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\t\tthis._removeInactiveAction( action );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\t\n\t\t\t\tif ( bindingByName !== undefined ) {\n\t\n\t\t\t\t\tfor ( var trackName in bindingByName ) {\n\t\n\t\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// remove a targeted clip from the cache\n\t\t\tuncacheAction: function( clip, optionalRoot ) {\n\t\n\t\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\t\n\t\t\t\tif ( action !== null ) {\n\t\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t\t// Implementation details:\n\t\n\t\tObject.assign( AnimationMixer.prototype, {\n\t\n\t\t\t_bindAction: function( action, prototypeAction ) {\n\t\n\t\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\t\n\t\t\t\tif ( bindingsByName === undefined ) {\n\t\n\t\t\t\t\tbindingsByName = {};\n\t\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\t\n\t\t\t\t\tif ( binding !== undefined ) {\n\t\n\t\t\t\t\t\tbindings[ i ] = binding;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tbinding = bindings[ i ];\n\t\n\t\t\t\t\t\tif ( binding !== undefined ) {\n\t\n\t\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\n\t\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\t\n\t\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\t\n\t\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\t\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t\t\t\t\t\tbindings[ i ] = binding;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_activateAction: function( action ) {\n\t\n\t\t\t\tif ( ! this._isActiveAction( action ) ) {\n\t\n\t\t\t\t\tif ( action._cacheIndex === null ) {\n\t\n\t\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t\t// appears to be still using it -> rebind\n\t\n\t\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\t\n\t\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar bindings = action._propertyBindings;\n\t\n\t\t\t\t\t// increment reference counts / sort out state\n\t\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tvar binding = bindings[ i ];\n\t\n\t\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\t\n\t\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\t\tbinding.saveOriginalState();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis._lendAction( action );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_deactivateAction: function( action ) {\n\t\n\t\t\t\tif ( this._isActiveAction( action ) ) {\n\t\n\t\t\t\t\tvar bindings = action._propertyBindings;\n\t\n\t\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tvar binding = bindings[ i ];\n\t\n\t\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\t\n\t\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\t\tthis._takeBackBinding( binding );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis._takeBackAction( action );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// Memory manager\n\t\n\t\t\t_initMemoryManager: function() {\n\t\n\t\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\t\tthis._nActiveActions = 0;\n\t\n\t\t\t\tthis._actionsByClip = {};\n\t\t\t\t// inside:\n\t\t\t\t// {\n\t\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t\t// }\n\t\n\t\n\t\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\t\tthis._nActiveBindings = 0;\n\t\n\t\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\t\n\t\n\t\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\t\tthis._nActiveControlInterpolants = 0;\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tthis.stats = {\n\t\n\t\t\t\t\tactions: {\n\t\t\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t\t\t},\n\t\t\t\t\tbindings: {\n\t\t\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t\t\t},\n\t\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t},\n\t\n\t\t\t// Memory management for AnimationAction objects\n\t\n\t\t\t_isActiveAction: function( action ) {\n\t\n\t\t\t\tvar index = action._cacheIndex;\n\t\t\t\treturn index !== null && index < this._nActiveActions;\n\t\n\t\t\t},\n\t\n\t\t\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t\t\t\tif ( actionsForClip === undefined ) {\n\t\n\t\t\t\t\tactionsForClip = {\n\t\n\t\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\t\tactionByRoot: {}\n\t\n\t\t\t\t\t};\n\t\n\t\t\t\t\taction._byClipCacheIndex = 0;\n\t\n\t\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\n\t\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\t\tknownActions.push( action );\n\t\n\t\t\t\t}\n\t\n\t\t\t\taction._cacheIndex = actions.length;\n\t\t\t\tactions.push( action );\n\t\n\t\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\t\n\t\t\t},\n\t\n\t\t\t_removeInactiveAction: function( action ) {\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\t\n\t\t\t\taction._cacheIndex = null;\n\t\n\t\n\t\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\n\t\t\t\t\tlastKnownAction =\n\t\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\t\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\n\t\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\t\tknownActionsForClip.pop();\n\t\n\t\t\t\taction._byClipCacheIndex = null;\n\t\n\t\n\t\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\t\n\t\t\t\tdelete actionByRoot[ rootUuid ];\n\t\n\t\t\t\tif ( knownActionsForClip.length === 0 ) {\n\t\n\t\t\t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t\t\t},\n\t\n\t\t\t_removeInactiveBindingsForAction: function( action ) {\n\t\n\t\t\t\tvar bindings = action._propertyBindings;\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar binding = bindings[ i ];\n\t\n\t\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\t\n\t\t\t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_lendAction: function( action ) {\n\t\n\t\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t\t// [  active actions >| inactive actions ]\n\t\t\t\t//                 s        a\n\t\t\t\t//                  <-swap->\n\t\t\t\t//                 a        s\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\n\t\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\t\n\t\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\t\n\t\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\t\tactions[ lastActiveIndex ] = action;\n\t\n\t\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\t\n\t\t\t},\n\t\n\t\t\t_takeBackAction: function( action ) {\n\t\n\t\t\t\t// [  active actions  | inactive actions ]\n\t\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t\t//        a        s\n\t\t\t\t//         <-swap->\n\t\t\t\t//        s        a\n\t\n\t\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\n\t\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\t\n\t\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\t\n\t\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\t\tactions[ firstInactiveIndex ] = action;\n\t\n\t\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\t\tactions[ prevIndex ] = lastActiveAction;\n\t\n\t\t\t},\n\t\n\t\t\t// Memory management for PropertyMixer objects\n\t\n\t\t\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\t\n\t\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t\t\t\t\tbindings = this._bindings;\n\t\n\t\t\t\tif ( bindingByName === undefined ) {\n\t\n\t\t\t\t\tbindingByName = {};\n\t\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tbindingByName[ trackName ] = binding;\n\t\n\t\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\t\tbindings.push( binding );\n\t\n\t\t\t},\n\t\n\t\t\t_removeInactiveBinding: function( binding ) {\n\t\n\t\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\n\t\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\t\tbindings.pop();\n\t\n\t\t\t\tdelete bindingByName[ trackName ];\n\t\n\t\t\t\tremove_empty_map: {\n\t\n\t\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\t\n\t\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t_lendBinding: function( binding ) {\n\t\n\t\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\t\n\t\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\t\n\t\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\t\tbindings[ lastActiveIndex ] = binding;\n\t\n\t\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\t\n\t\t\t},\n\t\n\t\t\t_takeBackBinding: function( binding ) {\n\t\n\t\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\n\t\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\t\n\t\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\t\n\t\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\t\tbindings[ firstInactiveIndex ] = binding;\n\t\n\t\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\t\n\t\t\t},\n\t\n\t\n\t\t\t// Memory management of Interpolants for weight and time scale\n\t\n\t\t\t_lendControlInterpolant: function() {\n\t\n\t\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\t\n\t\t\t\tif ( interpolant === undefined ) {\n\t\n\t\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\t\n\t\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn interpolant;\n\t\n\t\t\t},\n\t\n\t\t\t_takeBackControlInterpolant: function( interpolant ) {\n\t\n\t\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\n\t\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\t\n\t\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\t\n\t\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\t\n\t\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\t\n\t\t\t},\n\t\n\t\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\t\n\t\t} );\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Uniform( value ) {\n\t\n\t\t\tif ( typeof value === 'string' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\t\tvalue = arguments[ 1 ];\n\t\n\t\t\t}\n\t\n\t\t\tthis.value = value;\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t */\n\t\n\t\tfunction InstancedBufferGeometry() {\n\t\n\t\t\tBufferGeometry.call( this );\n\t\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.maxInstancedCount = undefined;\n\t\n\t\t}\n\t\n\t\tInstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tInstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\t\n\t\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\t\n\t\tInstancedBufferGeometry.prototype.addGroup = function ( start, count, materialIndex ) {\n\t\n\t\t\tthis.groups.push( {\n\t\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\n\t\t\t} );\n\t\n\t\t};\n\t\n\t\tInstancedBufferGeometry.prototype.copy = function ( source ) {\n\t\n\t\t\tvar index = source.index;\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\tthis.setIndex( index.clone() );\n\t\n\t\t\t}\n\t\n\t\t\tvar attributes = source.attributes;\n\t\n\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t\t\t}\n\t\n\t\t\tvar groups = source.groups;\n\t\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t */\n\t\n\t\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\n\t\t\tthis.normalized = normalized === true;\n\t\n\t\t}\n\t\n\t\n\t\tInterleavedBufferAttribute.prototype = {\n\t\n\t\t\tconstructor: InterleavedBufferAttribute,\n\t\n\t\t\tisInterleavedBufferAttribute: true,\n\t\n\t\t\tget count() {\n\t\n\t\t\t\treturn this.data.count;\n\t\n\t\t\t},\n\t\n\t\t\tget array() {\n\t\n\t\t\t\treturn this.data.array;\n\t\n\t\t\t},\n\t\n\t\t\tsetX: function ( index, x ) {\n\t\n\t\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetY: function ( index, y ) {\n\t\n\t\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetZ: function ( index, z ) {\n\t\n\t\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetW: function ( index, w ) {\n\t\n\t\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tgetX: function ( index ) {\n\t\n\t\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\t\n\t\t\t},\n\t\n\t\t\tgetY: function ( index ) {\n\t\n\t\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\t\n\t\t\t},\n\t\n\t\t\tgetZ: function ( index ) {\n\t\n\t\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\t\n\t\t\t},\n\t\n\t\t\tgetW: function ( index ) {\n\t\n\t\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\t\n\t\t\t},\n\t\n\t\t\tsetXY: function ( index, x, y ) {\n\t\n\t\t\t\tindex = index * this.data.stride + this.offset;\n\t\n\t\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\t\tthis.data.array[ index + 1 ] = y;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetXYZ: function ( index, x, y, z ) {\n\t\n\t\t\t\tindex = index * this.data.stride + this.offset;\n\t\n\t\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\t\tthis.data.array[ index + 2 ] = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t\t\t\tindex = index * this.data.stride + this.offset;\n\t\n\t\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\t\tthis.data.array[ index + 3 ] = w;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t */\n\t\n\t\tfunction InterleavedBuffer( array, stride ) {\n\t\n\t\t\tthis.uuid = _Math.generateUUID();\n\t\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\n\t\t\tthis.dynamic = false;\n\t\t\tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t\t\tthis.version = 0;\n\t\n\t\t}\n\t\n\t\tInterleavedBuffer.prototype = {\n\t\n\t\t\tconstructor: InterleavedBuffer,\n\t\n\t\t\tisInterleavedBuffer: true,\n\t\n\t\t\tset needsUpdate( value ) {\n\t\n\t\t\t\tif ( value === true ) this.version ++;\n\t\n\t\t\t},\n\t\n\t\t\tsetArray: function ( array ) {\n\t\n\t\t\t\tif ( Array.isArray( array ) ) {\n\t\n\t\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\t\tthis.array = array;\n\t\n\t\t\t},\n\t\n\t\t\tsetDynamic: function ( value ) {\n\t\n\t\t\t\tthis.dynamic = value;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( source ) {\n\t\n\t\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\t\tthis.count = source.count;\n\t\t\t\tthis.stride = source.stride;\n\t\t\t\tthis.dynamic = source.dynamic;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t\t\t\tindex1 *= this.stride;\n\t\t\t\tindex2 *= attribute.stride;\n\t\n\t\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\t\n\t\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value, offset ) {\n\t\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\t\tthis.array.set( value, offset );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t */\n\t\n\t\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\t\n\t\t\tInterleavedBuffer.call( this, array, stride );\n\t\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t\t}\n\t\n\t\tInstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n\t\tInstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\t\n\t\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\t\n\t\tInstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\t\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\t\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author benaadams / https://twitter.com/ben_a_adams\n\t\t */\n\t\n\t\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\t\n\t\t\tBufferAttribute.call( this, array, itemSize );\n\t\n\t\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t\t}\n\t\n\t\tInstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\t\tInstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\t\n\t\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\t\n\t\tInstancedBufferAttribute.prototype.copy = function ( source ) {\n\t\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\t\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author bhouston / http://clara.io/\n\t\t * @author stephomi / http://stephaneginier.com/\n\t\t */\n\t\n\t\tfunction Raycaster( origin, direction, near, far ) {\n\t\n\t\t\tthis.ray = new Ray( origin, direction );\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t\t\tthis.near = near || 0;\n\t\t\tthis.far = far || Infinity;\n\t\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: { threshold: 1 },\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\n\t\t\tObject.defineProperties( this.params, {\n\t\t\t\tPointCloud: {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\t\treturn this.Points;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\tfunction ascSort( a, b ) {\n\t\n\t\t\treturn a.distance - b.distance;\n\t\n\t\t}\n\t\n\t\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\t\n\t\t\tif ( object.visible === false ) return;\n\t\n\t\t\tobject.raycast( raycaster, intersects );\n\t\n\t\t\tif ( recursive === true ) {\n\t\n\t\t\t\tvar children = object.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tRaycaster.prototype = {\n\t\n\t\t\tconstructor: Raycaster,\n\t\n\t\t\tlinePrecision: 1,\n\t\n\t\t\tset: function ( origin, direction ) {\n\t\n\t\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t\t\t\tthis.ray.set( origin, direction );\n\t\n\t\t\t},\n\t\n\t\t\tsetFromCamera: function ( coords, camera ) {\n\t\n\t\t\t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\t\n\t\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\n\t\t\t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\t\n\t\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tintersectObject: function ( object, recursive ) {\n\t\n\t\t\t\tvar intersects = [];\n\t\n\t\t\t\tintersectObject( object, this, intersects, recursive );\n\t\n\t\t\t\tintersects.sort( ascSort );\n\t\n\t\t\t\treturn intersects;\n\t\n\t\t\t},\n\t\n\t\t\tintersectObjects: function ( objects, recursive ) {\n\t\n\t\t\t\tvar intersects = [];\n\t\n\t\t\t\tif ( Array.isArray( objects ) === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\t\treturn intersects;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tintersects.sort( ascSort );\n\t\n\t\t\t\treturn intersects;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Clock( autoStart ) {\n\t\n\t\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\t\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\n\t\t\tthis.running = false;\n\t\n\t\t}\n\t\n\t\tClock.prototype = {\n\t\n\t\t\tconstructor: Clock,\n\t\n\t\t\tstart: function () {\n\t\n\t\t\t\tthis.startTime = ( performance || Date ).now();\n\t\n\t\t\t\tthis.oldTime = this.startTime;\n\t\t\t\tthis.elapsedTime = 0;\n\t\t\t\tthis.running = true;\n\t\n\t\t\t},\n\t\n\t\t\tstop: function () {\n\t\n\t\t\t\tthis.getElapsedTime();\n\t\t\t\tthis.running = false;\n\t\n\t\t\t},\n\t\n\t\t\tgetElapsedTime: function () {\n\t\n\t\t\t\tthis.getDelta();\n\t\t\t\treturn this.elapsedTime;\n\t\n\t\t\t},\n\t\n\t\t\tgetDelta: function () {\n\t\n\t\t\t\tvar diff = 0;\n\t\n\t\t\t\tif ( this.autoStart && ! this.running ) {\n\t\n\t\t\t\t\tthis.start();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.running ) {\n\t\n\t\t\t\t\tvar newTime = ( performance || Date ).now();\n\t\n\t\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\t\tthis.oldTime = newTime;\n\t\n\t\t\t\t\tthis.elapsedTime += diff;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn diff;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * Spline from Tween.js, slightly optimized (and trashed)\n\t\t * http://sole.github.com/tween.js/examples/05_spline.html\n\t\t *\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction Spline( points ) {\n\t\n\t\t\tthis.points = points;\n\t\n\t\t\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t\t\tpoint, intPoint, weight, w2, w3,\n\t\t\tpa, pb, pc, pd;\n\t\n\t\t\tthis.initFromArray = function ( a ) {\n\t\n\t\t\t\tthis.points = [];\n\t\n\t\t\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\t\n\t\t\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\tthis.getPoint = function ( k ) {\n\t\n\t\t\t\tpoint = ( this.points.length - 1 ) * k;\n\t\t\t\tintPoint = Math.floor( point );\n\t\t\t\tweight = point - intPoint;\n\t\n\t\t\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\t\t\tc[ 1 ] = intPoint;\n\t\t\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\t\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\t\n\t\t\t\tpa = this.points[ c[ 0 ] ];\n\t\t\t\tpb = this.points[ c[ 1 ] ];\n\t\t\t\tpc = this.points[ c[ 2 ] ];\n\t\t\t\tpd = this.points[ c[ 3 ] ];\n\t\n\t\t\t\tw2 = weight * weight;\n\t\t\t\tw3 = weight * w2;\n\t\n\t\t\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\t\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\t\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\t\n\t\t\t\treturn v3;\n\t\n\t\t\t};\n\t\n\t\t\tthis.getControlPointsArray = function () {\n\t\n\t\t\t\tvar i, p, l = this.points.length,\n\t\t\t\t\tcoords = [];\n\t\n\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\t\n\t\t\t\t\tp = this.points[ i ];\n\t\t\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn coords;\n\t\n\t\t\t};\n\t\n\t\t\t// approximate length by summing linear segments\n\t\n\t\t\tthis.getLength = function ( nSubDivisions ) {\n\t\n\t\t\t\tvar i, index, nSamples, position,\n\t\t\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\t\t\toldPosition = new Vector3(),\n\t\t\t\t\ttmpVec = new Vector3(),\n\t\t\t\t\tchunkLengths = [],\n\t\t\t\t\ttotalLength = 0;\n\t\n\t\t\t\t// first point has 0 length\n\t\n\t\t\t\tchunkLengths[ 0 ] = 0;\n\t\n\t\t\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\t\n\t\t\t\tnSamples = this.points.length * nSubDivisions;\n\t\n\t\t\t\toldPosition.copy( this.points[ 0 ] );\n\t\n\t\t\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\t\n\t\t\t\t\tindex = i / nSamples;\n\t\n\t\t\t\t\tposition = this.getPoint( index );\n\t\t\t\t\ttmpVec.copy( position );\n\t\n\t\t\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\t\n\t\t\t\t\toldPosition.copy( position );\n\t\n\t\t\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\t\t\tintPoint = Math.floor( point );\n\t\n\t\t\t\t\tif ( intPoint !== oldIntPoint ) {\n\t\n\t\t\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\t\t\toldIntPoint = intPoint;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// last point ends with total length\n\t\n\t\t\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\t\n\t\t\t\treturn { chunks: chunkLengths, total: totalLength };\n\t\n\t\t\t};\n\t\n\t\t\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\t\n\t\t\t\tvar i, j,\n\t\t\t\t\tindex, indexCurrent, indexNext,\n\t\t\t\t\trealDistance,\n\t\t\t\t\tsampling, position,\n\t\t\t\t\tnewpoints = [],\n\t\t\t\t\ttmpVec = new Vector3(),\n\t\t\t\t\tsl = this.getLength();\n\t\n\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\t\n\t\t\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\t\n\t\t\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\t\n\t\t\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\t\n\t\t\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\t\n\t\t\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\t\t\tindexNext = i / ( this.points.length - 1 );\n\t\n\t\t\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\t\n\t\t\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\t\n\t\t\t\t\t\tposition = this.getPoint( index );\n\t\t\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.points = newpoints;\n\t\n\t\t\t};\n\t\n\t\t\t// Catmull-Rom\n\t\n\t\t\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\t\n\t\t\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\t\n\t\t\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/**\n\t\t * @author bhouston / http://clara.io\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t *\n\t\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t\t *\n\t\t * The poles (phi) are at the positive and negative y axis.\n\t\t * The equator starts at positive z.\n\t\t */\n\t\n\t\tfunction Spherical( radius, phi, theta ) {\n\t\n\t\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t\tSpherical.prototype = {\n\t\n\t\t\tconstructor: Spherical,\n\t\n\t\t\tset: function ( radius, phi, theta ) {\n\t\n\t\t\t\tthis.radius = radius;\n\t\t\t\tthis.phi = phi;\n\t\t\t\tthis.theta = theta;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tclone: function () {\n\t\n\t\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t\t},\n\t\n\t\t\tcopy: function ( other ) {\n\t\n\t\t\t\tthis.radius = other.radius;\n\t\t\t\tthis.phi = other.phi;\n\t\t\t\tthis.theta = other.theta;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\t\tmakeSafe: function() {\n\t\n\t\t\t\tvar EPS = 0.000001;\n\t\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t\tsetFromVector3: function( vec3 ) {\n\t\n\t\t\t\tthis.radius = vec3.length();\n\t\n\t\t\t\tif ( this.radius === 0 ) {\n\t\n\t\t\t\t\tthis.theta = 0;\n\t\t\t\t\tthis.phi = 0;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t},\n\t\n\t\t};\n\t\n\t\t/**\r\n\t\t * @author alteredq / http://alteredqualia.com/\r\n\t\t */\r\n\t\r\n\t\tfunction MorphBlendMesh( geometry, material ) {\n\t\r\n\t\t\tMesh.call( this, geometry, material );\r\n\t\r\n\t\t\tthis.animationsMap = {};\r\n\t\t\tthis.animationsList = [];\r\n\t\r\n\t\t\t// prepare default animation\r\n\t\t\t// (all frames played together in 1 second)\r\n\t\r\n\t\t\tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t\t\tvar name = \"__default\";\r\n\t\r\n\t\t\tvar startFrame = 0;\r\n\t\t\tvar endFrame = numFrames - 1;\r\n\t\r\n\t\t\tvar fps = numFrames / 1;\r\n\t\r\n\t\t\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t\t\tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tMorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\t\tMorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\t\r\n\t\tMorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t\t\tvar animation = {\r\n\t\r\n\t\t\t\tstart: start,\r\n\t\t\t\tend: end,\r\n\t\r\n\t\t\t\tlength: end - start + 1,\r\n\t\r\n\t\t\t\tfps: fps,\r\n\t\t\t\tduration: ( end - start ) / fps,\r\n\t\r\n\t\t\t\tlastFrame: 0,\r\n\t\t\t\tcurrentFrame: 0,\r\n\t\r\n\t\t\t\tactive: false,\r\n\t\r\n\t\t\t\ttime: 0,\r\n\t\t\t\tdirection: 1,\r\n\t\t\t\tweight: 1,\r\n\t\r\n\t\t\t\tdirectionBackwards: false,\r\n\t\t\t\tmirroredLoop: false\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tthis.animationsMap[ name ] = animation;\r\n\t\t\tthis.animationsList.push( animation );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\t\r\n\t\t\tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t\t\tvar geometry = this.geometry;\r\n\t\r\n\t\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\t\t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t\t\t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t\t\t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t\t\t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t\t\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var name in frameRanges ) {\r\n\t\r\n\t\t\t\tvar range = frameRanges[ name ];\r\n\t\t\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.direction = 1;\r\n\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.direction = - 1;\r\n\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.fps = fps;\r\n\t\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.duration = duration;\r\n\t\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.weight = weight;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.time = time;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t\t\tvar time = 0;\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\ttime = animation.time;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn time;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t\t\tvar duration = - 1;\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tduration = animation.duration;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn duration;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.time = 0;\r\n\t\t\t\tanimation.active = true;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\t\tif ( animation ) {\r\n\t\r\n\t\t\t\tanimation.active = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tMorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t\t\t\tif ( ! animation.active ) continue;\r\n\t\r\n\t\t\t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t\t\t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t\t\t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t\t\t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t\t\t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t\t\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t\t\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\t\t\tvar weight = animation.weight;\r\n\t\r\n\t\t\t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t\t\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tfunction ImmediateRenderObject( material ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.material = material;\n\t\t\tthis.render = function ( renderCallback ) {};\n\t\n\t\t}\n\t\n\t\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\t\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\t\n\t\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t*/\n\t\n\t\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t\t\tthis.object = object;\n\t\n\t\t\tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\t\n\t\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t\t\t//\n\t\n\t\t\tvar nNormals = 0;\n\t\n\t\t\tvar objGeometry = this.object.geometry;\n\t\n\t\t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t\t\t\tnNormals = objGeometry.faces.length * 3;\n\t\n\t\t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t\t\t\tnNormals = objGeometry.attributes.normal.count;\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\n\t\t\tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t\t\tgeometry.addAttribute( 'position', positions );\n\t\n\t\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t\t\t//\n\t\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\t\n\t\tVertexNormalsHelper.prototype.update = ( function () {\n\t\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\t\t\tvar normalMatrix = new Matrix3();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t\t\t\tthis.object.updateMatrixWorld( true );\n\t\n\t\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t\t\t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t\t\t\tvar position = this.geometry.attributes.position;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tvar objGeometry = this.object.geometry;\n\t\n\t\t\t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t\t\t\t\tvar vertices = objGeometry.vertices;\n\t\n\t\t\t\t\tvar faces = objGeometry.faces;\n\t\n\t\t\t\t\tvar idx = 0;\n\t\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\t\n\t\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\t\n\t\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t\t\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t\t\t\t\tvar objPos = objGeometry.attributes.position;\n\t\n\t\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\t\n\t\t\t\t\tvar idx = 0;\n\t\n\t\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\t\n\t\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\t\n\t\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tposition.needsUpdate = true;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}() );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t*/\n\t\n\t\tfunction SpotLightHelper( light ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\n\t\t\tvar positions = [\n\t\t\t\t0, 0, 0,   0,   0,   1,\n\t\t\t\t0, 0, 0,   1,   0,   1,\n\t\t\t\t0, 0, 0, - 1,   0,   1,\n\t\t\t\t0, 0, 0,   0,   1,   1,\n\t\t\t\t0, 0, 0,   0, - 1,   1\n\t\t\t];\n\t\n\t\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\t\n\t\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\t\n\t\t\t\tpositions.push(\n\t\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t\t);\n\t\n\t\t\t}\n\t\n\t\t\tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\t\n\t\t\tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t\t\tthis.cone = new LineSegments( geometry, material );\n\t\t\tthis.add( this.cone );\n\t\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\t\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\t\n\t\tSpotLightHelper.prototype.dispose = function () {\n\t\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\n\t\t};\n\t\n\t\tSpotLightHelper.prototype.update = function () {\n\t\n\t\t\tvar vector = new Vector3();\n\t\t\tvar vector2 = new Vector3();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\t\n\t\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\t\n\t\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\n\t\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\t\n\t\t\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t/**\n\t\t * @author Sean Griffin / http://twitter.com/sgrif\n\t\t * @author Michael Guerrero / http://realitymeltdown.com\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author ikerr / http://verold.com\n\t\t */\n\t\n\t\tfunction SkeletonHelper( object ) {\n\t\n\t\t\tthis.bones = this.getBoneList( object );\n\t\n\t\t\tvar geometry = new Geometry();\n\t\n\t\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t\t\t\tvar bone = this.bones[ i ];\n\t\n\t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t\t\t\t\tgeometry.vertices.push( new Vector3() );\n\t\t\t\t\tgeometry.vertices.push( new Vector3() );\n\t\t\t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n\t\t\t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tgeometry.dynamic = true;\n\t\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\t\n\t\t\tLineSegments.call( this, geometry, material );\n\t\n\t\t\tthis.root = object;\n\t\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\n\t\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\t\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\t\n\t\tSkeletonHelper.prototype.getBoneList = function( object ) {\n\t\n\t\t\tvar boneList = [];\n\t\n\t\t\tif ( (object && object.isBone) ) {\n\t\n\t\t\t\tboneList.push( object );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\t\n\t\t\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn boneList;\n\t\n\t\t};\n\t\n\t\tSkeletonHelper.prototype.update = function () {\n\t\n\t\t\tvar geometry = this.geometry;\n\t\n\t\t\tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\t\n\t\t\tvar boneMatrix = new Matrix4();\n\t\n\t\t\tvar j = 0;\n\t\n\t\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t\t\t\tvar bone = this.bones[ i ];\n\t\n\t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\t\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\t\n\t\t\t\t\tj += 2;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tgeometry.verticesNeedUpdate = true;\n\t\n\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction PointLightHelper( light, sphereSize ) {\n\t\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\n\t\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t\tMesh.call( this, geometry, material );\n\t\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\t/*\n\t\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\n\t\t\tvar d = light.distance;\n\t\n\t\t\tif ( d === 0.0 ) {\n\t\n\t\t\t\tthis.lightDistance.visible = false;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t\t\t}\n\t\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\n\t\t}\n\t\n\t\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\t\tPointLightHelper.prototype.constructor = PointLightHelper;\n\t\n\t\tPointLightHelper.prototype.dispose = function () {\n\t\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\n\t\t};\n\t\n\t\tPointLightHelper.prototype.update = function () {\n\t\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t\t/*\n\t\t\tvar d = this.light.distance;\n\t\n\t\t\tif ( d === 0.0 ) {\n\t\n\t\t\t\tthis.lightDistance.visible = false;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t\t\t}\n\t\t\t*/\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction HemisphereLightHelper( light, sphereSize ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\tthis.colors = [ new Color(), new Color() ];\n\t\n\t\t\tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\t\tgeometry.rotateX( - Math.PI / 2 );\n\t\n\t\t\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\t\n\t\t\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\t\n\t\t\t}\n\t\n\t\t\tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\t\n\t\t\tthis.lightSphere = new Mesh( geometry, material );\n\t\t\tthis.add( this.lightSphere );\n\t\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\t\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\t\n\t\tHemisphereLightHelper.prototype.dispose = function () {\n\t\n\t\t\tthis.lightSphere.geometry.dispose();\n\t\t\tthis.lightSphere.material.dispose();\n\t\n\t\t};\n\t\n\t\tHemisphereLightHelper.prototype.update = function () {\n\t\n\t\t\tvar vector = new Vector3();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\t\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\t\n\t\t\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\t\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction GridHelper( size, divisions, color1, color2 ) {\n\t\n\t\t\tdivisions = divisions || 1;\n\t\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\t\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = ( size * 2 ) / divisions;\n\t\t\tvar vertices = [], colors = [];\n\t\n\t\t\tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\t\n\t\t\t\tvertices.push( - size, 0, k, size, 0, k );\n\t\t\t\tvertices.push( k, 0, - size, k, 0, size );\n\t\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\n\t\t\t}\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n\t\t\tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\t\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t\t\tLineSegments.call( this, geometry, material );\n\t\n\t\t}\n\t\n\t\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\t\tGridHelper.prototype.constructor = GridHelper;\n\t\n\t\tGridHelper.prototype.setColors = function () {\n\t\n\t\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t*/\n\t\n\t\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t\t\t// FaceNormalsHelper only supports THREE.Geometry\n\t\n\t\t\tthis.object = object;\n\t\n\t\t\tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\t\n\t\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t\t\t//\n\t\n\t\t\tvar nNormals = 0;\n\t\n\t\t\tvar objGeometry = this.object.geometry;\n\t\n\t\t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t\t\t\tnNormals = objGeometry.faces.length;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\n\t\t\tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t\t\tgeometry.addAttribute( 'position', positions );\n\t\n\t\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t\t\t//\n\t\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\t\n\t\tFaceNormalsHelper.prototype.update = ( function () {\n\t\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\t\t\tvar normalMatrix = new Matrix3();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tthis.object.updateMatrixWorld( true );\n\t\n\t\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t\t\t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t\t\t\tvar position = this.geometry.attributes.position;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tvar objGeometry = this.object.geometry;\n\t\n\t\t\t\tvar vertices = objGeometry.vertices;\n\t\n\t\t\t\tvar faces = objGeometry.faces;\n\t\n\t\t\t\tvar idx = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t\tvar normal = face.normal;\n\t\n\t\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t\t.applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tposition.needsUpdate = true;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}() );\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\tfunction DirectionalLightHelper( light, size ) {\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\tif ( size === undefined ) size = 1;\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new Float32Attribute( [\n\t\t\t\t- size,   size, 0,\n\t\t\t\t  size,   size, 0,\n\t\t\t\t  size, - size, 0,\n\t\t\t\t- size, - size, 0,\n\t\t\t\t- size,   size, 0\n\t\t\t], 3 ) );\n\t\n\t\t\tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t\t\tthis.add( new Line( geometry, material ) );\n\t\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\t\n\t\t\tthis.add( new Line( geometry, material ));\n\t\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\t\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\t\n\t\tDirectionalLightHelper.prototype.dispose = function () {\n\t\n\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\tvar targetLine = this.children[ 1 ];\n\t\n\t\t\tlightPlane.geometry.dispose();\n\t\t\tlightPlane.material.dispose();\n\t\t\ttargetLine.geometry.dispose();\n\t\t\ttargetLine.material.dispose();\n\t\n\t\t};\n\t\n\t\tDirectionalLightHelper.prototype.update = function () {\n\t\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\t\t\tvar v3 = new Vector3();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\t\tv3.subVectors( v2, v1 );\n\t\n\t\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\t\tvar targetLine = this.children[ 1 ];\n\t\n\t\t\t\tlightPlane.lookAt( v3 );\n\t\t\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t\t\ttargetLine.lookAt( v3 );\n\t\t\t\ttargetLine.scale.z = v3.length();\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t *\n\t\t *\t- shows frustum, line of sight and up of the camera\n\t\t *\t- suitable for fast updates\n\t\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t\t */\n\t\n\t\tfunction CameraHelper( camera ) {\n\t\n\t\t\tvar geometry = new Geometry();\n\t\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\t\n\t\t\tvar pointMap = {};\n\t\n\t\t\t// colors\n\t\n\t\t\tvar hexFrustum = 0xffaa00;\n\t\t\tvar hexCone = 0xff0000;\n\t\t\tvar hexUp = 0x00aaff;\n\t\t\tvar hexTarget = 0xffffff;\n\t\t\tvar hexCross = 0x333333;\n\t\n\t\t\t// near\n\t\n\t\t\taddLine( \"n1\", \"n2\", hexFrustum );\n\t\t\taddLine( \"n2\", \"n4\", hexFrustum );\n\t\t\taddLine( \"n4\", \"n3\", hexFrustum );\n\t\t\taddLine( \"n3\", \"n1\", hexFrustum );\n\t\n\t\t\t// far\n\t\n\t\t\taddLine( \"f1\", \"f2\", hexFrustum );\n\t\t\taddLine( \"f2\", \"f4\", hexFrustum );\n\t\t\taddLine( \"f4\", \"f3\", hexFrustum );\n\t\t\taddLine( \"f3\", \"f1\", hexFrustum );\n\t\n\t\t\t// sides\n\t\n\t\t\taddLine( \"n1\", \"f1\", hexFrustum );\n\t\t\taddLine( \"n2\", \"f2\", hexFrustum );\n\t\t\taddLine( \"n3\", \"f3\", hexFrustum );\n\t\t\taddLine( \"n4\", \"f4\", hexFrustum );\n\t\n\t\t\t// cone\n\t\n\t\t\taddLine( \"p\", \"n1\", hexCone );\n\t\t\taddLine( \"p\", \"n2\", hexCone );\n\t\t\taddLine( \"p\", \"n3\", hexCone );\n\t\t\taddLine( \"p\", \"n4\", hexCone );\n\t\n\t\t\t// up\n\t\n\t\t\taddLine( \"u1\", \"u2\", hexUp );\n\t\t\taddLine( \"u2\", \"u3\", hexUp );\n\t\t\taddLine( \"u3\", \"u1\", hexUp );\n\t\n\t\t\t// target\n\t\n\t\t\taddLine( \"c\", \"t\", hexTarget );\n\t\t\taddLine( \"p\", \"c\", hexCross );\n\t\n\t\t\t// cross\n\t\n\t\t\taddLine( \"cn1\", \"cn2\", hexCross );\n\t\t\taddLine( \"cn3\", \"cn4\", hexCross );\n\t\n\t\t\taddLine( \"cf1\", \"cf2\", hexCross );\n\t\t\taddLine( \"cf3\", \"cf4\", hexCross );\n\t\n\t\t\tfunction addLine( a, b, hex ) {\n\t\n\t\t\t\taddPoint( a, hex );\n\t\t\t\taddPoint( b, hex );\n\t\n\t\t\t}\n\t\n\t\t\tfunction addPoint( id, hex ) {\n\t\n\t\t\t\tgeometry.vertices.push( new Vector3() );\n\t\t\t\tgeometry.colors.push( new Color( hex ) );\n\t\n\t\t\t\tif ( pointMap[ id ] === undefined ) {\n\t\n\t\t\t\t\tpointMap[ id ] = [];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\t\n\t\t\t}\n\t\n\t\t\tLineSegments.call( this, geometry, material );\n\t\n\t\t\tthis.camera = camera;\n\t\t\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\t\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t\tthis.pointMap = pointMap;\n\t\n\t\t\tthis.update();\n\t\n\t\t}\n\t\n\t\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\t\tCameraHelper.prototype.constructor = CameraHelper;\n\t\n\t\tCameraHelper.prototype.update = function () {\n\t\n\t\t\tvar geometry, pointMap;\n\t\n\t\t\tvar vector = new Vector3();\n\t\t\tvar camera = new Camera();\n\t\n\t\t\tfunction setPoint( point, x, y, z ) {\n\t\n\t\t\t\tvector.set( x, y, z ).unproject( camera );\n\t\n\t\t\t\tvar points = pointMap[ point ];\n\t\n\t\t\t\tif ( points !== undefined ) {\n\t\n\t\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tgeometry = this.geometry;\n\t\t\t\tpointMap = this.pointMap;\n\t\n\t\t\t\tvar w = 1, h = 1;\n\t\n\t\t\t\t// we need just camera projection matrix\n\t\t\t\t// world matrix must be identity\n\t\n\t\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\t\n\t\t\t\t// center / target\n\t\n\t\t\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\t\t\tsetPoint( \"t\", 0, 0,  1 );\n\t\n\t\t\t\t// near\n\t\n\t\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\t\n\t\t\t\t// far\n\t\n\t\t\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\t\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\t\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\t\t\tsetPoint( \"f4\",   w,   h, 1 );\n\t\n\t\t\t\t// up\n\t\n\t\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\t\n\t\t\t\t// cross\n\t\n\t\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\t\n\t\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\t\n\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t/**\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t */\n\t\n\t\t// a helper to show the world-axis-aligned bounding box for an object\n\t\n\t\tfunction BoundingBoxHelper( object, hex ) {\n\t\n\t\t\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\t\n\t\t\tthis.object = object;\n\t\n\t\t\tthis.box = new Box3();\n\t\n\t\t\tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\t\n\t\t}\n\t\n\t\tBoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n\t\tBoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\t\n\t\tBoundingBoxHelper.prototype.update = function () {\n\t\n\t\t\tthis.box.setFromObject( this.object );\n\t\n\t\t\tthis.box.getSize( this.scale );\n\t\n\t\t\tthis.box.getCenter( this.position );\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction BoxHelper( object, color ) {\n\t\n\t\t\tif ( color === undefined ) color = 0xffff00;\n\t\n\t\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\t\tvar positions = new Float32Array( 8 * 3 );\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\n\t\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\t\n\t\t\tif ( object !== undefined ) {\n\t\n\t\t\t\tthis.update( object );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\t\tBoxHelper.prototype.constructor = BoxHelper;\n\t\n\t\tBoxHelper.prototype.update = ( function () {\n\t\n\t\t\tvar box = new Box3();\n\t\n\t\t\treturn function update( object ) {\n\t\n\t\t\t\tif ( (object && object.isBox3) ) {\n\t\n\t\t\t\t\tbox.copy( object );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tbox.setFromObject( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( box.isEmpty() ) return;\n\t\n\t\t\t\tvar min = box.min;\n\t\t\t\tvar max = box.max;\n\t\n\t\t\t\t/*\n\t\t\t\t  5____4\n\t\t\t\t1/___0/|\n\t\t\t\t| 6__|_7\n\t\t\t\t2/___3/\n\t\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t\t1: min.x, max.y, max.z\n\t\t\t\t2: min.x, min.y, max.z\n\t\t\t\t3: max.x, min.y, max.z\n\t\t\t\t4: max.x, max.y, min.z\n\t\t\t\t5: min.x, max.y, min.z\n\t\t\t\t6: min.x, min.y, min.z\n\t\t\t\t7: max.x, min.y, min.z\n\t\t\t\t*/\n\t\n\t\t\t\tvar position = this.geometry.attributes.position;\n\t\t\t\tvar array = position.array;\n\t\n\t\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\t\n\t\t\t\tposition.needsUpdate = true;\n\t\n\t\t\t\tthis.geometry.computeBoundingSphere();\n\t\n\t\t\t};\n\t\n\t\t} )();\n\t\n\t\t/**\n\t\t * @author WestLangley / http://github.com/WestLangley\n\t\t * @author zz85 / http://github.com/zz85\n\t\t * @author bhouston / http://clara.io\n\t\t *\n\t\t * Creates an arrow for visualizing directions\n\t\t *\n\t\t * Parameters:\n\t\t *  dir - Vector3\n\t\t *  origin - Vector3\n\t\t *  length - Number\n\t\t *  color - color in hex value\n\t\t *  headLength - Number\n\t\t *  headWidth - Number\n\t\t */\n\t\n\t\tvar lineGeometry = new BufferGeometry();\n\t\tlineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\t\n\t\tvar coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\t\n\t\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\t\n\t\t\t// dir is assumed to be normalized\n\t\n\t\t\tObject3D.call( this );\n\t\n\t\t\tif ( color === undefined ) color = 0xffff00;\n\t\t\tif ( length === undefined ) length = 1;\n\t\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t\t\tthis.position.copy( origin );\n\t\n\t\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add( this.line );\n\t\n\t\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add( this.cone );\n\t\n\t\t\tthis.setDirection( dir );\n\t\t\tthis.setLength( length, headLength, headWidth );\n\t\n\t\t}\n\t\n\t\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\t\tArrowHelper.prototype.constructor = ArrowHelper;\n\t\n\t\tArrowHelper.prototype.setDirection = ( function () {\n\t\n\t\t\tvar axis = new Vector3();\n\t\t\tvar radians;\n\t\n\t\t\treturn function setDirection( dir ) {\n\t\n\t\t\t\t// dir is assumed to be normalized\n\t\n\t\t\t\tif ( dir.y > 0.99999 ) {\n\t\n\t\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\t\n\t\t\t\t} else if ( dir.y < - 0.99999 ) {\n\t\n\t\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\t\n\t\t\t\t\tradians = Math.acos( dir.y );\n\t\n\t\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}() );\n\t\n\t\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\t\n\t\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\t\tthis.line.updateMatrix();\n\t\n\t\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\n\t\t};\n\t\n\t\tArrowHelper.prototype.setColor = function ( color ) {\n\t\n\t\t\tthis.line.material.color.copy( color );\n\t\t\tthis.cone.material.color.copy( color );\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author sroucheray / http://sroucheray.org/\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction AxisHelper( size ) {\n\t\n\t\t\tsize = size || 1;\n\t\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t0, 0, 0,  size, 0, 0,\n\t\t\t\t0, 0, 0,  0, size, 0,\n\t\t\t\t0, 0, 0,  0, 0, size\n\t\t\t] );\n\t\n\t\t\tvar colors = new Float32Array( [\n\t\t\t\t1, 0, 0,  1, 0.6, 0,\n\t\t\t\t0, 1, 0,  0.6, 1, 0,\n\t\t\t\t0, 0, 1,  0, 0.6, 1\n\t\t\t] );\n\t\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t\t\tLineSegments.call( this, geometry, material );\n\t\n\t\t}\n\t\n\t\tAxisHelper.prototype = Object.create( LineSegments.prototype );\n\t\tAxisHelper.prototype.constructor = AxisHelper;\n\t\n\t\t/**\n\t\t * @author zz85 https://github.com/zz85\n\t\t *\n\t\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t\t *\n\t\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t\t * curve.tension is used for catmullrom which defaults to 0.5\n\t\t */\n\t\n\t\tvar CatmullRomCurve3 = ( function() {\n\t\n\t\t\tvar\n\t\t\t\ttmp = new Vector3(),\n\t\t\t\tpx = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\t\n\t\t\t/*\n\t\t\tBased on an optimized c++ solution in\n\t\t\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t\t\t - http://ideone.com/NoEbVM\n\t\n\t\t\tThis CubicPoly class could be used for reusing some variables and calculations,\n\t\t\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t\t\twhich can be placed in CurveUtils.\n\t\t\t*/\n\t\n\t\t\tfunction CubicPoly() {}\n\t\n\t\t\t/*\n\t\t\t * Compute coefficients for a cubic polynomial\n\t\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t\t * such that\n\t\t\t *   p(0) = x0, p(1) = x1\n\t\t\t *  and\n\t\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t\t */\n\t\t\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\t\n\t\t\t\tthis.c0 = x0;\n\t\t\t\tthis.c1 = t0;\n\t\t\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\n\t\t\t};\n\t\n\t\t\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\t\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\t\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\n\t\t\t\t// initCubicPoly\n\t\t\t\tthis.init( x1, x2, t1, t2 );\n\t\n\t\t\t};\n\t\n\t\t\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t\t\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\t\n\t\t\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\t\n\t\t\t};\n\t\n\t\t\tCubicPoly.prototype.calc = function( t ) {\n\t\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\t\n\t\t\t};\n\t\n\t\t\t// Subclass Three.js curve\n\t\t\treturn Curve.create(\n\t\n\t\t\t\tfunction ( p /* array of Vector3 */ ) {\n\t\n\t\t\t\t\tthis.points = p || [];\n\t\t\t\t\tthis.closed = false;\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction ( t ) {\n\t\n\t\t\t\t\tvar points = this.points,\n\t\t\t\t\t\tpoint, intPoint, weight, l;\n\t\n\t\t\t\t\tl = points.length;\n\t\n\t\t\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\t\n\t\t\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\t\t\tintPoint = Math.floor( point );\n\t\t\t\t\tweight = point - intPoint;\n\t\n\t\t\t\t\tif ( this.closed ) {\n\t\n\t\t\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\t\n\t\t\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\t\n\t\t\t\t\t\tintPoint = l - 2;\n\t\t\t\t\t\tweight = 1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar p0, p1, p2, p3; // 4 points\n\t\n\t\t\t\t\tif ( this.closed || intPoint > 0 ) {\n\t\n\t\t\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// extrapolate first point\n\t\t\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\t\t\tp0 = tmp;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tp1 = points[ intPoint % l ];\n\t\t\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\t\n\t\t\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\t\n\t\t\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// extrapolate last point\n\t\t\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\t\t\tp3 = tmp;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\t\n\t\t\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\t\n\t\t\t\t\t\t// safety check for repeated points\n\t\t\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\t\n\t\t\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\t\n\t\t\t\t\t} else if ( this.type === 'catmullrom' ) {\n\t\n\t\t\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar v = new Vector3(\n\t\t\t\t\t\tpx.calc( weight ),\n\t\t\t\t\t\tpy.calc( weight ),\n\t\t\t\t\t\tpz.calc( weight )\n\t\t\t\t\t);\n\t\n\t\t\t\t\treturn v;\n\t\n\t\t\t\t}\n\t\n\t\t\t);\n\t\n\t\t} )();\n\t\n\t\t/**************************************************************\n\t\t *\tClosed Spline 3D curve\n\t\t **************************************************************/\n\t\n\t\n\t\tfunction ClosedSplineCurve3( points ) {\n\t\n\t\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\t\n\t\t\tCatmullRomCurve3.call( this, points );\n\t\t\tthis.type = 'catmullrom';\n\t\t\tthis.closed = true;\n\t\n\t\t}\n\t\n\t\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\t\n\t\t/**************************************************************\n\t\t *\tSpline 3D curve\n\t\t **************************************************************/\n\t\n\t\n\t\tvar SplineCurve3 = Curve.create(\n\t\n\t\t\tfunction ( points /* array of Vector3 */ ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\t\t\tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t\t\t},\n\t\n\t\t\tfunction ( t ) {\n\t\n\t\t\t\tvar points = this.points;\n\t\t\t\tvar point = ( points.length - 1 ) * t;\n\t\n\t\t\t\tvar intPoint = Math.floor( point );\n\t\t\t\tvar weight = point - intPoint;\n\t\n\t\t\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\t\t\tvar point1 = points[ intPoint ];\n\t\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t\t\t\tvar interpolate = CurveUtils.interpolate;\n\t\n\t\t\t\treturn new Vector3(\n\t\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t\t\t);\n\t\n\t\t\t}\n\t\n\t\t);\n\t\n\t\t/**************************************************************\n\t\t *\tCubic Bezier 3D curve\n\t\t **************************************************************/\n\t\n\t\tvar CubicBezierCurve3 = Curve.create(\n\t\n\t\t\tfunction ( v0, v1, v2, v3 ) {\n\t\n\t\t\t\tthis.v0 = v0;\n\t\t\t\tthis.v1 = v1;\n\t\t\t\tthis.v2 = v2;\n\t\t\t\tthis.v3 = v3;\n\t\n\t\t\t},\n\t\n\t\t\tfunction ( t ) {\n\t\n\t\t\t\tvar b3 = ShapeUtils.b3;\n\t\n\t\t\t\treturn new Vector3(\n\t\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t\t\t);\n\t\n\t\t\t}\n\t\n\t\t);\n\t\n\t\t/**************************************************************\n\t\t *\tQuadratic Bezier 3D curve\n\t\t **************************************************************/\n\t\n\t\tvar QuadraticBezierCurve3 = Curve.create(\n\t\n\t\t\tfunction ( v0, v1, v2 ) {\n\t\n\t\t\t\tthis.v0 = v0;\n\t\t\t\tthis.v1 = v1;\n\t\t\t\tthis.v2 = v2;\n\t\n\t\t\t},\n\t\n\t\t\tfunction ( t ) {\n\t\n\t\t\t\tvar b2 = ShapeUtils.b2;\n\t\n\t\t\t\treturn new Vector3(\n\t\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t\t\t);\n\t\n\t\t\t}\n\t\n\t\t);\n\t\n\t\t/**************************************************************\n\t\t *\tLine3D\n\t\t **************************************************************/\n\t\n\t\tvar LineCurve3 = Curve.create(\n\t\n\t\t\tfunction ( v1, v2 ) {\n\t\n\t\t\t\tthis.v1 = v1;\n\t\t\t\tthis.v2 = v2;\n\t\n\t\t\t},\n\t\n\t\t\tfunction ( t ) {\n\t\n\t\t\t\tif ( t === 1 ) {\n\t\n\t\t\t\t\treturn this.v2.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar vector = new Vector3();\n\t\n\t\t\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\t\t\tvector.multiplyScalar( t );\n\t\t\t\tvector.add( this.v1 );\n\t\n\t\t\t\treturn vector;\n\t\n\t\t\t}\n\t\n\t\t);\n\t\n\t\t/**************************************************************\n\t\t *\tArc curve\n\t\t **************************************************************/\n\t\n\t\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t\t}\n\t\n\t\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\t\tArcCurve.prototype.constructor = ArcCurve;\n\t\n\t\t/**\n\t\t * @author alteredq / http://alteredqualia.com/\n\t\t */\n\t\n\t\tvar SceneUtils = {\n\t\n\t\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\t\n\t\t\t\tvar group = new Group();\n\t\n\t\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn group;\n\t\n\t\t\t},\n\t\n\t\t\tdetach: function ( child, parent, scene ) {\n\t\n\t\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\t\tparent.remove( child );\n\t\t\t\tscene.add( child );\n\t\n\t\t\t},\n\t\n\t\t\tattach: function ( child, scene, parent ) {\n\t\n\t\t\t\tvar matrixWorldInverse = new Matrix4();\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\t\t\tchild.applyMatrix( matrixWorldInverse );\n\t\n\t\t\t\tscene.remove( child );\n\t\t\t\tparent.add( child );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t/**\n\t\t * @author mrdoob / http://mrdoob.com/\n\t\t */\n\t\n\t\tfunction Face4 ( a, b, c, d, normal, color, materialIndex ) {\n\t\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\t\t}\n\t\n\t\tvar LineStrip = 0;\n\t\n\t\tvar LinePieces = 1;\n\t\n\t\tfunction PointCloud ( geometry, material ) {\n\t\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\t\treturn new Points( geometry, material );\n\t\t}\n\t\n\t\tfunction ParticleSystem ( geometry, material ) {\n\t\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\t\treturn new Points( geometry, material );\n\t\t}\n\t\n\t\tfunction PointCloudMaterial ( parameters ) {\n\t\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new PointsMaterial( parameters );\n\t\t}\n\t\n\t\tfunction ParticleBasicMaterial ( parameters ) {\n\t\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new PointsMaterial( parameters );\n\t\t}\n\t\n\t\tfunction ParticleSystemMaterial ( parameters ) {\n\t\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new PointsMaterial( parameters );\n\t\t}\n\t\n\t\tfunction Vertex ( x, y, z ) {\n\t\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\t\treturn new Vector3( x, y, z );\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction EdgesHelper( object, hex ) {\n\t\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t\t}\n\t\n\t\tfunction WireframeHelper( object, hex ) {\n\t\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t\t}\n\t\n\t\t//\n\t\n\t\tObject.assign( Box2.prototype, {\n\t\t\tcenter: function ( optionalTarget ) {\n\t\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\t\treturn this.getCenter( optionalTarget );\n\t\t\t},\n\t\t\tempty: function () {\n\t\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\t\treturn this.isEmpty();\n\t\t\t},\n\t\t\tisIntersectionBox: function ( box ) {\n\t\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\t\treturn this.intersectsBox( box );\n\t\t\t},\n\t\t\tsize: function ( optionalTarget ) {\n\t\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\t\treturn this.getSize( optionalTarget );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Box3.prototype, {\n\t\t\tcenter: function ( optionalTarget ) {\n\t\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\t\treturn this.getCenter( optionalTarget );\n\t\t\t},\n\t\t\tempty: function () {\n\t\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\t\treturn this.isEmpty();\n\t\t\t},\n\t\t\tisIntersectionBox: function ( box ) {\n\t\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\t\treturn this.intersectsBox( box );\n\t\t\t},\n\t\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\t\treturn this.intersectsSphere( sphere );\n\t\t\t},\n\t\t\tsize: function ( optionalTarget ) {\n\t\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\t\treturn this.getSize( optionalTarget );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Line3.prototype, {\n\t\t\tcenter: function ( optionalTarget ) {\n\t\t\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\t\t\treturn this.getCenter( optionalTarget );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Matrix3.prototype, {\n\t\t\tmultiplyVector3: function ( vector ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\t\treturn vector.applyMatrix3( this );\n\t\t\t},\n\t\t\tmultiplyVector3Array: function ( a ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\t\treturn this.applyToVector3Array( a );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Matrix4.prototype, {\n\t\t\textractPosition: function ( m ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\t\treturn this.copyPosition( m );\n\t\t\t},\n\t\t\tsetRotationFromQuaternion: function ( q ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\t\treturn this.makeRotationFromQuaternion( q );\n\t\t\t},\n\t\t\tmultiplyVector3: function ( vector ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\t\t\treturn vector.applyProjection( this );\n\t\t\t},\n\t\t\tmultiplyVector4: function ( vector ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\t\treturn vector.applyMatrix4( this );\n\t\t\t},\n\t\t\tmultiplyVector3Array: function ( a ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\t\treturn this.applyToVector3Array( a );\n\t\t\t},\n\t\t\trotateAxis: function ( v ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\t\tv.transformDirection( this );\n\t\t\t},\n\t\t\tcrossVector: function ( vector ) {\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\t\treturn vector.applyMatrix4( this );\n\t\t\t},\n\t\t\ttranslate: function ( v ) {\n\t\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t\t\t},\n\t\t\trotateX: function ( angle ) {\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t\t\t},\n\t\t\trotateY: function ( angle ) {\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t\t\t},\n\t\t\trotateZ: function ( angle ) {\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t\t\t},\n\t\t\trotateByAxis: function ( axis, angle ) {\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Plane.prototype, {\n\t\t\tisIntersectionLine: function ( line ) {\n\t\t\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\t\t\treturn this.intersectsLine( line );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Quaternion.prototype, {\n\t\t\tmultiplyVector3: function ( vector ) {\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\t\t\treturn vector.applyQuaternion( this );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Ray.prototype, {\n\t\t\tisIntersectionBox: function ( box ) {\n\t\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\t\treturn this.intersectsBox( box );\n\t\t\t},\n\t\t\tisIntersectionPlane: function ( plane ) {\n\t\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\t\treturn this.intersectsPlane( plane );\n\t\t\t},\n\t\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\t\treturn this.intersectsSphere( sphere );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Shape.prototype, {\n\t\t\textrude: function ( options ) {\n\t\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\t\treturn new ExtrudeGeometry( this, options );\n\t\t\t},\n\t\t\tmakeGeometry: function ( options ) {\n\t\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\t\treturn new ShapeGeometry( this, options );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( Vector3.prototype, {\n\t\t\tsetEulerFromRotationMatrix: function () {\n\t\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t\t\t},\n\t\t\tsetEulerFromQuaternion: function () {\n\t\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t\t\t},\n\t\t\tgetPositionFromMatrix: function ( m ) {\n\t\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\t\treturn this.setFromMatrixPosition( m );\n\t\t\t},\n\t\t\tgetScaleFromMatrix: function ( m ) {\n\t\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\t\treturn this.setFromMatrixScale( m );\n\t\t\t},\n\t\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tObject.assign( Object3D.prototype, {\n\t\t\tgetChildByName: function ( name ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\t\treturn this.getObjectByName( name );\n\t\t\t},\n\t\t\trenderDepth: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t\t\t},\n\t\t\ttranslate: function ( distance, axis ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\t\treturn this.translateOnAxis( axis, distance );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( Object3D.prototype, {\n\t\t\teulerOrder: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\t\treturn this.rotation.order;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\t\tthis.rotation.order = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tuseQuaternion: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( LOD.prototype, {\n\t\t\tobjects: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\t\treturn this.levels;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\t\n\t\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\t\n\t\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\t\tthis.setFocalLength( focalLength );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tObject.defineProperties( Light.prototype, {\n\t\t\tonlyShadow: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraFov: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraLeft: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraRight: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraTop: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraBottom: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraNear: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraFar: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowCameraVisible: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowBias: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\t\tthis.shadow.bias = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowDarkness: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowMapWidth: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowMapHeight: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tObject.defineProperties( BufferAttribute.prototype, {\n\t\t\tlength: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\t\t\treturn this.array.length;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( BufferGeometry.prototype, {\n\t\t\taddIndex: function ( index ) {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\t\tthis.setIndex( index );\n\t\t\t},\n\t\t\taddDrawCall: function ( start, count, indexOffset ) {\n\t\t\t\tif ( indexOffset !== undefined ) {\n\t\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t\t\t}\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\t\tthis.addGroup( start, count );\n\t\t\t},\n\t\t\tclearDrawCalls: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\t\tthis.clearGroups();\n\t\t\t},\n\t\t\tcomputeTangents: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t\t\t},\n\t\t\tcomputeOffsets: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( BufferGeometry.prototype, {\n\t\t\tdrawcalls: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\t\treturn this.groups;\n\t\t\t\t}\n\t\t\t},\n\t\t\toffsets: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\t\treturn this.groups;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tObject.defineProperties( Material.prototype, {\n\t\t\twrapAround: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t\t}\n\t\t\t},\n\t\t\twrapRGB: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\t\t\treturn new Color();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\t\t\tmetal: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( ShaderMaterial.prototype, {\n\t\t\tderivatives: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\t\treturn this.extensions.derivatives;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tEventDispatcher.prototype = Object.assign( Object.create( {\n\t\n\t\t\t// Note: Extra base ensures these properties are not 'assign'ed.\n\t\n\t\t\tconstructor: EventDispatcher,\n\t\n\t\t\tapply: function ( target ) {\n\t\n\t\t\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\t\n\t\t\t\tObject.assign( target, this );\n\t\n\t\t\t}\n\t\n\t\t} ), EventDispatcher.prototype );\n\t\n\t\t//\n\t\n\t\tObject.defineProperties( Uniform.prototype, {\n\t\t\tdynamic: {\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tonUpdate: {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tObject.assign( WebGLRenderer.prototype, {\n\t\t\tsupportsFloatTextures: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\t\t\t},\n\t\t\tsupportsHalfFloatTextures: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t\t\t},\n\t\t\tsupportsStandardDerivatives: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t\t\t},\n\t\t\tsupportsCompressedTextureS3TC: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\t\t},\n\t\t\tsupportsCompressedTexturePVRTC: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\t\t},\n\t\t\tsupportsBlendMinMax: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t\t\t},\n\t\t\tsupportsVertexTextures: function () {\n\t\t\t\treturn this.capabilities.vertexTextures;\n\t\t\t},\n\t\t\tsupportsInstancedArrays: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t},\n\t\t\tenableScissorTest: function ( boolean ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\t\tthis.setScissorTest( boolean );\n\t\t\t},\n\t\t\tinitMaterial: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t\t\t},\n\t\t\taddPrePlugin: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t\t\t},\n\t\t\taddPostPlugin: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t\t\t},\n\t\t\tupdateShadowMap: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( WebGLRenderer.prototype, {\n\t\t\tshadowMapEnabled: {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowMapType: {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.shadowMap.type;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\t\tthis.shadowMap.type = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tshadowMapCullFace: {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.shadowMap.cullFace;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\t\tthis.shadowMap.cullFace = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.defineProperties( WebGLShadowMap.prototype, {\n\t\t\tcullFace: {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\t\t\t\t},\n\t\t\t\tset: function ( cullFace ) {\n\t\t\t\t\tvar value = ( cullFace !== CullFaceBack );\n\t\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\t\tthis.renderReverseSided = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\t\t\twrapS: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\t\treturn this.texture.wrapS;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\t\tthis.texture.wrapS = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\twrapT: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\t\treturn this.texture.wrapT;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\t\tthis.texture.wrapT = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tmagFilter: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\t\treturn this.texture.magFilter;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\t\tthis.texture.magFilter = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tminFilter: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\t\treturn this.texture.minFilter;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\t\tthis.texture.minFilter = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tanisotropy: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\t\treturn this.texture.anisotropy;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\toffset: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\t\treturn this.texture.offset;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\t\tthis.texture.offset = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\trepeat: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\t\treturn this.texture.repeat;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\t\tthis.texture.repeat = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tformat: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\t\treturn this.texture.format;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\t\tthis.texture.format = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttype: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\t\treturn this.texture.type;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\t\tthis.texture.type = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tgenerateMipmaps: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tObject.assign( Audio.prototype, {\n\t\t\tload: function ( file ) {\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\t\t\tscope.setBuffer( buffer );\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} );\n\t\n\t\tObject.assign( AudioAnalyser.prototype, {\n\t\t\tgetData: function ( file ) {\n\t\t\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\t\t\treturn this.getFrequencyData();\n\t\t\t}\n\t\t} );\n\t\n\t\t//\n\t\n\t\tvar GeometryUtils = {\n\t\n\t\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\n\t\t\t\tvar matrix;\n\t\n\t\t\t\tif ( geometry2.isMesh ) {\n\t\n\t\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\n\t\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\t\tgeometry2 = geometry2.geometry;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\t\n\t\t\t},\n\t\n\t\t\tcenter: function ( geometry ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\t\treturn geometry.center();\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar ImageUtils = {\n\t\n\t\t\tcrossOrigin: undefined,\n\t\n\t\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\t\n\t\t\t\tvar loader = new TextureLoader();\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\t\n\t\t\t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t},\n\t\n\t\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\t\n\t\t\t\tvar loader = new CubeTextureLoader();\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\t\n\t\t\t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t\t\t\treturn texture;\n\t\n\t\t\t},\n\t\n\t\t\tloadCompressedTexture: function () {\n\t\n\t\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t\t\t},\n\t\n\t\t\tloadCompressedTextureCube: function () {\n\t\n\t\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tfunction Projector () {\n\t\n\t\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\t\n\t\t\tthis.projectVector = function ( vector, camera ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\t\tvector.project( camera );\n\t\n\t\t\t};\n\t\n\t\t\tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\t\tvector.unproject( camera );\n\t\n\t\t\t};\n\t\n\t\t\tthis.pickingRay = function ( vector, camera ) {\n\t\n\t\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction CanvasRenderer () {\n\t\n\t\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\t\n\t\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tthis.clear = function () {};\n\t\t\tthis.render = function () {};\n\t\t\tthis.setClearColor = function () {};\n\t\t\tthis.setSize = function () {};\n\t\n\t\t}\n\t\n\t\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\t\texports.WebGLRenderTarget = WebGLRenderTarget;\n\t\texports.WebGLRenderer = WebGLRenderer;\n\t\texports.ShaderLib = ShaderLib;\n\t\texports.UniformsLib = UniformsLib;\n\t\texports.UniformsUtils = UniformsUtils;\n\t\texports.ShaderChunk = ShaderChunk;\n\t\texports.FogExp2 = FogExp2;\n\t\texports.Fog = Fog;\n\t\texports.Scene = Scene;\n\t\texports.LensFlare = LensFlare;\n\t\texports.Sprite = Sprite;\n\t\texports.LOD = LOD;\n\t\texports.SkinnedMesh = SkinnedMesh;\n\t\texports.Skeleton = Skeleton;\n\t\texports.Bone = Bone;\n\t\texports.Mesh = Mesh;\n\t\texports.LineSegments = LineSegments;\n\t\texports.Line = Line;\n\t\texports.Points = Points;\n\t\texports.Group = Group;\n\t\texports.VideoTexture = VideoTexture;\n\t\texports.DataTexture = DataTexture;\n\t\texports.CompressedTexture = CompressedTexture;\n\t\texports.CubeTexture = CubeTexture;\n\t\texports.CanvasTexture = CanvasTexture;\n\t\texports.DepthTexture = DepthTexture;\n\t\texports.TextureIdCount = TextureIdCount;\n\t\texports.Texture = Texture;\n\t\texports.MaterialIdCount = MaterialIdCount;\n\t\texports.CompressedTextureLoader = CompressedTextureLoader;\n\t\texports.BinaryTextureLoader = BinaryTextureLoader;\n\t\texports.DataTextureLoader = DataTextureLoader;\n\t\texports.CubeTextureLoader = CubeTextureLoader;\n\t\texports.TextureLoader = TextureLoader;\n\t\texports.ObjectLoader = ObjectLoader;\n\t\texports.MaterialLoader = MaterialLoader;\n\t\texports.BufferGeometryLoader = BufferGeometryLoader;\n\t\texports.DefaultLoadingManager = DefaultLoadingManager;\n\t\texports.LoadingManager = LoadingManager;\n\t\texports.JSONLoader = JSONLoader;\n\t\texports.ImageLoader = ImageLoader;\n\t\texports.FontLoader = FontLoader;\n\t\texports.XHRLoader = XHRLoader;\n\t\texports.Loader = Loader;\n\t\texports.Cache = Cache;\n\t\texports.AudioLoader = AudioLoader;\n\t\texports.SpotLightShadow = SpotLightShadow;\n\t\texports.SpotLight = SpotLight;\n\t\texports.PointLight = PointLight;\n\t\texports.HemisphereLight = HemisphereLight;\n\t\texports.DirectionalLightShadow = DirectionalLightShadow;\n\t\texports.DirectionalLight = DirectionalLight;\n\t\texports.AmbientLight = AmbientLight;\n\t\texports.LightShadow = LightShadow;\n\t\texports.Light = Light;\n\t\texports.StereoCamera = StereoCamera;\n\t\texports.PerspectiveCamera = PerspectiveCamera;\n\t\texports.OrthographicCamera = OrthographicCamera;\n\t\texports.CubeCamera = CubeCamera;\n\t\texports.Camera = Camera;\n\t\texports.AudioListener = AudioListener;\n\t\texports.PositionalAudio = PositionalAudio;\n\t\texports.getAudioContext = getAudioContext;\n\t\texports.AudioAnalyser = AudioAnalyser;\n\t\texports.Audio = Audio;\n\t\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\t\texports.StringKeyframeTrack = StringKeyframeTrack;\n\t\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\t\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\t\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\t\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\t\texports.PropertyMixer = PropertyMixer;\n\t\texports.PropertyBinding = PropertyBinding;\n\t\texports.KeyframeTrack = KeyframeTrack;\n\t\texports.AnimationUtils = AnimationUtils;\n\t\texports.AnimationObjectGroup = AnimationObjectGroup;\n\t\texports.AnimationMixer = AnimationMixer;\n\t\texports.AnimationClip = AnimationClip;\n\t\texports.Uniform = Uniform;\n\t\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\t\texports.BufferGeometry = BufferGeometry;\n\t\texports.GeometryIdCount = GeometryIdCount;\n\t\texports.Geometry = Geometry;\n\t\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\t\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\t\texports.InterleavedBuffer = InterleavedBuffer;\n\t\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\t\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\t\texports.Float64Attribute = Float64Attribute;\n\t\texports.Float32Attribute = Float32Attribute;\n\t\texports.Uint32Attribute = Uint32Attribute;\n\t\texports.Int32Attribute = Int32Attribute;\n\t\texports.Uint16Attribute = Uint16Attribute;\n\t\texports.Int16Attribute = Int16Attribute;\n\t\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\t\texports.Uint8Attribute = Uint8Attribute;\n\t\texports.Int8Attribute = Int8Attribute;\n\t\texports.BufferAttribute = BufferAttribute;\n\t\texports.Face3 = Face3;\n\t\texports.Object3DIdCount = Object3DIdCount;\n\t\texports.Object3D = Object3D;\n\t\texports.Raycaster = Raycaster;\n\t\texports.Layers = Layers;\n\t\texports.EventDispatcher = EventDispatcher;\n\t\texports.Clock = Clock;\n\t\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\t\texports.LinearInterpolant = LinearInterpolant;\n\t\texports.DiscreteInterpolant = DiscreteInterpolant;\n\t\texports.CubicInterpolant = CubicInterpolant;\n\t\texports.Interpolant = Interpolant;\n\t\texports.Triangle = Triangle;\n\t\texports.Spline = Spline;\n\t\texports.Math = _Math;\n\t\texports.Spherical = Spherical;\n\t\texports.Plane = Plane;\n\t\texports.Frustum = Frustum;\n\t\texports.Sphere = Sphere;\n\t\texports.Ray = Ray;\n\t\texports.Matrix4 = Matrix4;\n\t\texports.Matrix3 = Matrix3;\n\t\texports.Box3 = Box3;\n\t\texports.Box2 = Box2;\n\t\texports.Line3 = Line3;\n\t\texports.Euler = Euler;\n\t\texports.Vector4 = Vector4;\n\t\texports.Vector3 = Vector3;\n\t\texports.Vector2 = Vector2;\n\t\texports.Quaternion = Quaternion;\n\t\texports.ColorKeywords = ColorKeywords;\n\t\texports.Color = Color;\n\t\texports.MorphBlendMesh = MorphBlendMesh;\n\t\texports.ImmediateRenderObject = ImmediateRenderObject;\n\t\texports.VertexNormalsHelper = VertexNormalsHelper;\n\t\texports.SpotLightHelper = SpotLightHelper;\n\t\texports.SkeletonHelper = SkeletonHelper;\n\t\texports.PointLightHelper = PointLightHelper;\n\t\texports.HemisphereLightHelper = HemisphereLightHelper;\n\t\texports.GridHelper = GridHelper;\n\t\texports.FaceNormalsHelper = FaceNormalsHelper;\n\t\texports.DirectionalLightHelper = DirectionalLightHelper;\n\t\texports.CameraHelper = CameraHelper;\n\t\texports.BoundingBoxHelper = BoundingBoxHelper;\n\t\texports.BoxHelper = BoxHelper;\n\t\texports.ArrowHelper = ArrowHelper;\n\t\texports.AxisHelper = AxisHelper;\n\t\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\t\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\t\texports.SplineCurve3 = SplineCurve3;\n\t\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\t\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\t\texports.LineCurve3 = LineCurve3;\n\t\texports.ArcCurve = ArcCurve;\n\t\texports.EllipseCurve = EllipseCurve;\n\t\texports.SplineCurve = SplineCurve;\n\t\texports.CubicBezierCurve = CubicBezierCurve;\n\t\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\t\texports.LineCurve = LineCurve;\n\t\texports.Shape = Shape;\n\t\texports.ShapePath = ShapePath;\n\t\texports.Path = Path;\n\t\texports.Font = Font;\n\t\texports.CurvePath = CurvePath;\n\t\texports.Curve = Curve;\n\t\texports.ShapeUtils = ShapeUtils;\n\t\texports.SceneUtils = SceneUtils;\n\t\texports.CurveUtils = CurveUtils;\n\t\texports.WireframeGeometry = WireframeGeometry;\n\t\texports.ParametricGeometry = ParametricGeometry;\n\t\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\t\texports.TetrahedronGeometry = TetrahedronGeometry;\n\t\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\t\texports.OctahedronGeometry = OctahedronGeometry;\n\t\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\t\texports.IcosahedronGeometry = IcosahedronGeometry;\n\t\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\t\texports.DodecahedronGeometry = DodecahedronGeometry;\n\t\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\t\texports.PolyhedronGeometry = PolyhedronGeometry;\n\t\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\t\texports.TubeGeometry = TubeGeometry;\n\t\texports.TubeBufferGeometry = TubeBufferGeometry;\n\t\texports.TorusKnotGeometry = TorusKnotGeometry;\n\t\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\t\texports.TorusGeometry = TorusGeometry;\n\t\texports.TorusBufferGeometry = TorusBufferGeometry;\n\t\texports.TextGeometry = TextGeometry;\n\t\texports.SphereBufferGeometry = SphereBufferGeometry;\n\t\texports.SphereGeometry = SphereGeometry;\n\t\texports.RingGeometry = RingGeometry;\n\t\texports.RingBufferGeometry = RingBufferGeometry;\n\t\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\t\texports.PlaneGeometry = PlaneGeometry;\n\t\texports.LatheGeometry = LatheGeometry;\n\t\texports.LatheBufferGeometry = LatheBufferGeometry;\n\t\texports.ShapeGeometry = ShapeGeometry;\n\t\texports.ExtrudeGeometry = ExtrudeGeometry;\n\t\texports.EdgesGeometry = EdgesGeometry;\n\t\texports.ConeGeometry = ConeGeometry;\n\t\texports.ConeBufferGeometry = ConeBufferGeometry;\n\t\texports.CylinderGeometry = CylinderGeometry;\n\t\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\t\texports.CircleBufferGeometry = CircleBufferGeometry;\n\t\texports.CircleGeometry = CircleGeometry;\n\t\texports.BoxBufferGeometry = BoxBufferGeometry;\n\t\texports.BoxGeometry = BoxGeometry;\n\t\texports.ShadowMaterial = ShadowMaterial;\n\t\texports.SpriteMaterial = SpriteMaterial;\n\t\texports.RawShaderMaterial = RawShaderMaterial;\n\t\texports.ShaderMaterial = ShaderMaterial;\n\t\texports.PointsMaterial = PointsMaterial;\n\t\texports.MultiMaterial = MultiMaterial;\n\t\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\t\texports.MeshStandardMaterial = MeshStandardMaterial;\n\t\texports.MeshPhongMaterial = MeshPhongMaterial;\n\t\texports.MeshNormalMaterial = MeshNormalMaterial;\n\t\texports.MeshLambertMaterial = MeshLambertMaterial;\n\t\texports.MeshDepthMaterial = MeshDepthMaterial;\n\t\texports.MeshBasicMaterial = MeshBasicMaterial;\n\t\texports.LineDashedMaterial = LineDashedMaterial;\n\t\texports.LineBasicMaterial = LineBasicMaterial;\n\t\texports.Material = Material;\n\t\texports.REVISION = REVISION;\n\t\texports.MOUSE = MOUSE;\n\t\texports.CullFaceNone = CullFaceNone;\n\t\texports.CullFaceBack = CullFaceBack;\n\t\texports.CullFaceFront = CullFaceFront;\n\t\texports.CullFaceFrontBack = CullFaceFrontBack;\n\t\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\t\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\t\texports.BasicShadowMap = BasicShadowMap;\n\t\texports.PCFShadowMap = PCFShadowMap;\n\t\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\t\texports.FrontSide = FrontSide;\n\t\texports.BackSide = BackSide;\n\t\texports.DoubleSide = DoubleSide;\n\t\texports.FlatShading = FlatShading;\n\t\texports.SmoothShading = SmoothShading;\n\t\texports.NoColors = NoColors;\n\t\texports.FaceColors = FaceColors;\n\t\texports.VertexColors = VertexColors;\n\t\texports.NoBlending = NoBlending;\n\t\texports.NormalBlending = NormalBlending;\n\t\texports.AdditiveBlending = AdditiveBlending;\n\t\texports.SubtractiveBlending = SubtractiveBlending;\n\t\texports.MultiplyBlending = MultiplyBlending;\n\t\texports.CustomBlending = CustomBlending;\n\t\texports.BlendingMode = BlendingMode;\n\t\texports.AddEquation = AddEquation;\n\t\texports.SubtractEquation = SubtractEquation;\n\t\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\t\texports.MinEquation = MinEquation;\n\t\texports.MaxEquation = MaxEquation;\n\t\texports.ZeroFactor = ZeroFactor;\n\t\texports.OneFactor = OneFactor;\n\t\texports.SrcColorFactor = SrcColorFactor;\n\t\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\t\texports.SrcAlphaFactor = SrcAlphaFactor;\n\t\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\t\texports.DstAlphaFactor = DstAlphaFactor;\n\t\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\t\texports.DstColorFactor = DstColorFactor;\n\t\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\t\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\t\texports.NeverDepth = NeverDepth;\n\t\texports.AlwaysDepth = AlwaysDepth;\n\t\texports.LessDepth = LessDepth;\n\t\texports.LessEqualDepth = LessEqualDepth;\n\t\texports.EqualDepth = EqualDepth;\n\t\texports.GreaterEqualDepth = GreaterEqualDepth;\n\t\texports.GreaterDepth = GreaterDepth;\n\t\texports.NotEqualDepth = NotEqualDepth;\n\t\texports.MultiplyOperation = MultiplyOperation;\n\t\texports.MixOperation = MixOperation;\n\t\texports.AddOperation = AddOperation;\n\t\texports.NoToneMapping = NoToneMapping;\n\t\texports.LinearToneMapping = LinearToneMapping;\n\t\texports.ReinhardToneMapping = ReinhardToneMapping;\n\t\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\t\texports.CineonToneMapping = CineonToneMapping;\n\t\texports.UVMapping = UVMapping;\n\t\texports.CubeReflectionMapping = CubeReflectionMapping;\n\t\texports.CubeRefractionMapping = CubeRefractionMapping;\n\t\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\t\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\t\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\t\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\t\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\t\texports.TextureMapping = TextureMapping;\n\t\texports.RepeatWrapping = RepeatWrapping;\n\t\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\t\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\t\texports.TextureWrapping = TextureWrapping;\n\t\texports.NearestFilter = NearestFilter;\n\t\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\t\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\t\texports.LinearFilter = LinearFilter;\n\t\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\t\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\t\texports.TextureFilter = TextureFilter;\n\t\texports.UnsignedByteType = UnsignedByteType;\n\t\texports.ByteType = ByteType;\n\t\texports.ShortType = ShortType;\n\t\texports.UnsignedShortType = UnsignedShortType;\n\t\texports.IntType = IntType;\n\t\texports.UnsignedIntType = UnsignedIntType;\n\t\texports.FloatType = FloatType;\n\t\texports.HalfFloatType = HalfFloatType;\n\t\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\t\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\t\texports.UnsignedShort565Type = UnsignedShort565Type;\n\t\texports.UnsignedInt248Type = UnsignedInt248Type;\n\t\texports.AlphaFormat = AlphaFormat;\n\t\texports.RGBFormat = RGBFormat;\n\t\texports.RGBAFormat = RGBAFormat;\n\t\texports.LuminanceFormat = LuminanceFormat;\n\t\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\t\texports.RGBEFormat = RGBEFormat;\n\t\texports.DepthFormat = DepthFormat;\n\t\texports.DepthStencilFormat = DepthStencilFormat;\n\t\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\t\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\t\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\t\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\t\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\t\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\t\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\t\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\t\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\t\texports.LoopOnce = LoopOnce;\n\t\texports.LoopRepeat = LoopRepeat;\n\t\texports.LoopPingPong = LoopPingPong;\n\t\texports.InterpolateDiscrete = InterpolateDiscrete;\n\t\texports.InterpolateLinear = InterpolateLinear;\n\t\texports.InterpolateSmooth = InterpolateSmooth;\n\t\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\t\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\t\texports.WrapAroundEnding = WrapAroundEnding;\n\t\texports.TrianglesDrawMode = TrianglesDrawMode;\n\t\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\t\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\t\texports.LinearEncoding = LinearEncoding;\n\t\texports.sRGBEncoding = sRGBEncoding;\n\t\texports.GammaEncoding = GammaEncoding;\n\t\texports.RGBEEncoding = RGBEEncoding;\n\t\texports.LogLuvEncoding = LogLuvEncoding;\n\t\texports.RGBM7Encoding = RGBM7Encoding;\n\t\texports.RGBM16Encoding = RGBM16Encoding;\n\t\texports.RGBDEncoding = RGBDEncoding;\n\t\texports.BasicDepthPacking = BasicDepthPacking;\n\t\texports.RGBADepthPacking = RGBADepthPacking;\n\t\texports.CubeGeometry = BoxGeometry;\n\t\texports.Face4 = Face4;\n\t\texports.LineStrip = LineStrip;\n\t\texports.LinePieces = LinePieces;\n\t\texports.MeshFaceMaterial = MultiMaterial;\n\t\texports.PointCloud = PointCloud;\n\t\texports.Particle = Sprite;\n\t\texports.ParticleSystem = ParticleSystem;\n\t\texports.PointCloudMaterial = PointCloudMaterial;\n\t\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\t\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\t\texports.Vertex = Vertex;\n\t\texports.EdgesHelper = EdgesHelper;\n\t\texports.WireframeHelper = WireframeHelper;\n\t\texports.GeometryUtils = GeometryUtils;\n\t\texports.ImageUtils = ImageUtils;\n\t\texports.Projector = Projector;\n\t\texports.CanvasRenderer = CanvasRenderer;\n\t\n\t\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t\tObject.defineProperty( exports, 'AudioContext', {\n\t\t\tget: function () {\n\t\t\t\treturn exports.getAudioContext();\n\t\t\t}\n\t\t});\n\t\n\t})));\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\t\n\t// This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\t\n\tTHREE.OrbitControls = function (object, domElement) {\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.domElement = domElement !== undefined ? domElement : document;\n\t\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\t\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\t\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\t\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\t\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\t\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = -Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\t\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\t\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\t\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\t\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\t\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\t\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\t\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\t\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\t\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\t\n\t\t//\n\t\t// public methods\n\t\t//\n\t\n\t\tthis.getPolarAngle = function () {\n\t\n\t\t\treturn spherical.phi;\n\t\t};\n\t\n\t\tthis.getAzimuthalAngle = function () {\n\t\n\t\t\treturn spherical.theta;\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tscope.target.copy(scope.target0);\n\t\t\tscope.object.position.copy(scope.position0);\n\t\t\tscope.object.zoom = scope.zoom0;\n\t\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent(changeEvent);\n\t\n\t\t\tscope.update();\n\t\n\t\t\tstate = STATE.NONE;\n\t\t};\n\t\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function () {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\n\t\t\tvar quatInverse = quat.clone().inverse();\n\t\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\tvar position = scope.object.position;\n\t\n\t\t\t\toffset.copy(position).sub(scope.target);\n\t\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion(quat);\n\t\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3(offset);\n\t\n\t\t\t\tif (scope.autoRotate && state === STATE.NONE) {\n\t\n\t\t\t\t\trotateLeft(getAutoRotationAngle());\n\t\t\t\t}\n\t\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\t\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));\n\t\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n\t\n\t\t\t\tspherical.makeSafe();\n\t\n\t\t\t\tspherical.radius *= scale;\n\t\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));\n\t\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add(panOffset);\n\t\n\t\t\t\toffset.setFromSpherical(spherical);\n\t\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion(quatInverse);\n\t\n\t\t\t\tposition.copy(scope.target).add(offset);\n\t\n\t\t\t\tscope.object.lookAt(scope.target);\n\t\n\t\t\t\tif (scope.enableDamping === true) {\n\t\n\t\t\t\t\tsphericalDelta.theta *= 1 - scope.dampingFactor;\n\t\t\t\t\tsphericalDelta.phi *= 1 - scope.dampingFactor;\n\t\t\t\t} else {\n\t\n\t\t\t\t\tsphericalDelta.set(0, 0, 0);\n\t\t\t\t}\n\t\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set(0, 0, 0);\n\t\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\n\t\t\t\tif (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n\t\n\t\t\t\t\tscope.dispatchEvent(changeEvent);\n\t\n\t\t\t\t\tlastPosition.copy(scope.object.position);\n\t\t\t\t\tlastQuaternion.copy(scope.object.quaternion);\n\t\t\t\t\tzoomChanged = false;\n\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}();\n\t\n\t\tthis.dispose = function () {\n\t\n\t\t\tscope.domElement.removeEventListener('contextmenu', onContextMenu, false);\n\t\t\tscope.domElement.removeEventListener('mousedown', onMouseDown, false);\n\t\t\tscope.domElement.removeEventListener('wheel', onMouseWheel, false);\n\t\n\t\t\tscope.domElement.removeEventListener('touchstart', onTouchStart, false);\n\t\t\tscope.domElement.removeEventListener('touchend', onTouchEnd, false);\n\t\t\tscope.domElement.removeEventListener('touchmove', onTouchMove, false);\n\t\n\t\t\tdocument.removeEventListener('mousemove', onMouseMove, false);\n\t\t\tdocument.removeEventListener('mouseup', onMouseUp, false);\n\t\n\t\t\twindow.removeEventListener('keydown', onKeyDown, false);\n\t\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\t\t};\n\t\n\t\t//\n\t\t// internals\n\t\t//\n\t\n\t\tvar scope = this;\n\t\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\t\n\t\tvar STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };\n\t\n\t\tvar state = STATE.NONE;\n\t\n\t\tvar EPS = 0.000001;\n\t\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\t\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\t\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\t\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\t\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\t\n\t\tfunction getAutoRotationAngle() {\n\t\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\t\t}\n\t\n\t\tfunction getZoomScale() {\n\t\n\t\t\treturn Math.pow(0.95, scope.zoomSpeed);\n\t\t}\n\t\n\t\tfunction rotateLeft(angle) {\n\t\n\t\t\tsphericalDelta.theta -= angle;\n\t\t}\n\t\n\t\tfunction rotateUp(angle) {\n\t\n\t\t\tsphericalDelta.phi -= angle;\n\t\t}\n\t\n\t\tvar panLeft = function () {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panLeft(distance, objectMatrix) {\n\t\n\t\t\t\tv.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar(-distance);\n\t\n\t\t\t\tpanOffset.add(v);\n\t\t\t};\n\t\t}();\n\t\n\t\tvar panUp = function () {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panUp(distance, objectMatrix) {\n\t\n\t\t\t\tv.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar(distance);\n\t\n\t\t\t\tpanOffset.add(v);\n\t\t\t};\n\t\t}();\n\t\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function () {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\treturn function pan(deltaX, deltaY) {\n\t\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\tif (scope.object instanceof THREE.PerspectiveCamera) {\n\t\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy(position).sub(scope.target);\n\t\t\t\t\tvar targetDistance = offset.length();\n\t\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);\n\t\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n\t\t\t\t\tpanUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n\t\t\t\t} else if (scope.object instanceof THREE.OrthographicCamera) {\n\t\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n\t\t\t\t\tpanUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\t\t\t\t\tscope.enablePan = false;\n\t\t\t\t}\n\t\t\t};\n\t\t}();\n\t\n\t\tfunction dollyIn(dollyScale) {\n\t\n\t\t\tif (scope.object instanceof THREE.PerspectiveCamera) {\n\t\n\t\t\t\tscale /= dollyScale;\n\t\t\t} else if (scope.object instanceof THREE.OrthographicCamera) {\n\t\n\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\tscope.enableZoom = false;\n\t\t\t}\n\t\t}\n\t\n\t\tfunction dollyOut(dollyScale) {\n\t\n\t\t\tif (scope.object instanceof THREE.PerspectiveCamera) {\n\t\n\t\t\t\tscale *= dollyScale;\n\t\t\t} else if (scope.object instanceof THREE.OrthographicCamera) {\n\t\n\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\tscope.enableZoom = false;\n\t\t\t}\n\t\t}\n\t\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\t\n\t\tfunction handleMouseDownRotate(event) {\n\t\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\t\n\t\t\trotateStart.set(event.clientX, event.clientY);\n\t\t}\n\t\n\t\tfunction handleMouseDownDolly(event) {\n\t\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\t\n\t\t\tdollyStart.set(event.clientX, event.clientY);\n\t\t}\n\t\n\t\tfunction handleMouseDownPan(event) {\n\t\n\t\t\t//console.log( 'handleMouseDownPan' );\n\t\n\t\t\tpanStart.set(event.clientX, event.clientY);\n\t\t}\n\t\n\t\tfunction handleMouseMoveRotate(event) {\n\t\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\t\n\t\t\trotateEnd.set(event.clientX, event.clientY);\n\t\t\trotateDelta.subVectors(rotateEnd, rotateStart);\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\t\n\t\t\trotateStart.copy(rotateEnd);\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleMouseMoveDolly(event) {\n\t\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\t\n\t\t\tdollyEnd.set(event.clientX, event.clientY);\n\t\n\t\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\t\n\t\t\tif (dollyDelta.y > 0) {\n\t\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t} else if (dollyDelta.y < 0) {\n\t\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t}\n\t\n\t\t\tdollyStart.copy(dollyEnd);\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleMouseMovePan(event) {\n\t\n\t\t\t//console.log( 'handleMouseMovePan' );\n\t\n\t\t\tpanEnd.set(event.clientX, event.clientY);\n\t\n\t\t\tpanDelta.subVectors(panEnd, panStart);\n\t\n\t\t\tpan(panDelta.x, panDelta.y);\n\t\n\t\t\tpanStart.copy(panEnd);\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleMouseUp(event) {\n\t\n\t\t\t//console.log( 'handleMouseUp' );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseWheel(event) {\n\t\n\t\t\t//console.log( 'handleMouseWheel' );\n\t\n\t\t\tif (event.deltaY < 0) {\n\t\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t} else if (event.deltaY > 0) {\n\t\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t}\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleKeyDown(event) {\n\t\n\t\t\t//console.log( 'handleKeyDown' );\n\t\n\t\t\tswitch (event.keyCode) {\n\t\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan(0, scope.keyPanSpeed);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan(0, -scope.keyPanSpeed);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan(scope.keyPanSpeed, 0);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan(-scope.keyPanSpeed, 0);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t}\n\t\t}\n\t\n\t\tfunction handleTouchStartRotate(event) {\n\t\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\t\n\t\t\trotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n\t\t}\n\t\n\t\tfunction handleTouchStartDolly(event) {\n\t\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\t\n\t\t\tvar dx = event.touches[0].pageX - event.touches[1].pageX;\n\t\t\tvar dy = event.touches[0].pageY - event.touches[1].pageY;\n\t\n\t\t\tvar distance = Math.sqrt(dx * dx + dy * dy);\n\t\n\t\t\tdollyStart.set(0, distance);\n\t\t}\n\t\n\t\tfunction handleTouchStartPan(event) {\n\t\n\t\t\t//console.log( 'handleTouchStartPan' );\n\t\n\t\t\tpanStart.set(event.touches[0].pageX, event.touches[0].pageY);\n\t\t}\n\t\n\t\tfunction handleTouchMoveRotate(event) {\n\t\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\t\n\t\t\trotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n\t\t\trotateDelta.subVectors(rotateEnd, rotateStart);\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\t\n\t\t\trotateStart.copy(rotateEnd);\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleTouchMoveDolly(event) {\n\t\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\t\n\t\t\tvar dx = event.touches[0].pageX - event.touches[1].pageX;\n\t\t\tvar dy = event.touches[0].pageY - event.touches[1].pageY;\n\t\n\t\t\tvar distance = Math.sqrt(dx * dx + dy * dy);\n\t\n\t\t\tdollyEnd.set(0, distance);\n\t\n\t\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\t\n\t\t\tif (dollyDelta.y > 0) {\n\t\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t} else if (dollyDelta.y < 0) {\n\t\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t}\n\t\n\t\t\tdollyStart.copy(dollyEnd);\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleTouchMovePan(event) {\n\t\n\t\t\t//console.log( 'handleTouchMovePan' );\n\t\n\t\t\tpanEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n\t\n\t\t\tpanDelta.subVectors(panEnd, panStart);\n\t\n\t\t\tpan(panDelta.x, panDelta.y);\n\t\n\t\t\tpanStart.copy(panEnd);\n\t\n\t\t\tscope.update();\n\t\t}\n\t\n\t\tfunction handleTouchEnd(event) {}\n\t\n\t\t//console.log( 'handleTouchEnd' );\n\t\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\t\n\t\tfunction onMouseDown(event) {\n\t\n\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif (event.button === scope.mouseButtons.ORBIT) {\n\t\n\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\thandleMouseDownRotate(event);\n\t\n\t\t\t\tstate = STATE.ROTATE;\n\t\t\t} else if (event.button === scope.mouseButtons.ZOOM) {\n\t\n\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\thandleMouseDownDolly(event);\n\t\n\t\t\t\tstate = STATE.DOLLY;\n\t\t\t} else if (event.button === scope.mouseButtons.PAN) {\n\t\n\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\thandleMouseDownPan(event);\n\t\n\t\t\t\tstate = STATE.PAN;\n\t\t\t}\n\t\n\t\t\tif (state !== STATE.NONE) {\n\t\n\t\t\t\tdocument.addEventListener('mousemove', onMouseMove, false);\n\t\t\t\tdocument.addEventListener('mouseup', onMouseUp, false);\n\t\n\t\t\t\tscope.dispatchEvent(startEvent);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onMouseMove(event) {\n\t\n\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif (state === STATE.ROTATE) {\n\t\n\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\thandleMouseMoveRotate(event);\n\t\t\t} else if (state === STATE.DOLLY) {\n\t\n\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\thandleMouseMoveDolly(event);\n\t\t\t} else if (state === STATE.PAN) {\n\t\n\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\thandleMouseMovePan(event);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onMouseUp(event) {\n\t\n\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\thandleMouseUp(event);\n\t\n\t\t\tdocument.removeEventListener('mousemove', onMouseMove, false);\n\t\t\tdocument.removeEventListener('mouseup', onMouseUp, false);\n\t\n\t\t\tscope.dispatchEvent(endEvent);\n\t\n\t\t\tstate = STATE.NONE;\n\t\t}\n\t\n\t\tfunction onMouseWheel(event) {\n\t\n\t\t\tif (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\thandleMouseWheel(event);\n\t\n\t\t\tscope.dispatchEvent(startEvent); // not sure why these are here...\n\t\t\tscope.dispatchEvent(endEvent);\n\t\t}\n\t\n\t\tfunction onKeyDown(event) {\n\t\n\t\t\tif (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n\t\n\t\t\thandleKeyDown(event);\n\t\t}\n\t\n\t\tfunction onTouchStart(event) {\n\t\n\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\tswitch (event.touches.length) {\n\t\n\t\t\t\tcase 1:\n\t\t\t\t\t// one-fingered touch: rotate\n\t\n\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\t\thandleTouchStartRotate(event);\n\t\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2:\n\t\t\t\t\t// two-fingered touch: dolly\n\t\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\t\thandleTouchStartDolly(event);\n\t\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3:\n\t\t\t\t\t// three-fingered touch: pan\n\t\n\t\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\t\thandleTouchStartPan(event);\n\t\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t\tif (state !== STATE.NONE) {\n\t\n\t\t\t\tscope.dispatchEvent(startEvent);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onTouchMove(event) {\n\t\n\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\tswitch (event.touches.length) {\n\t\n\t\t\t\tcase 1:\n\t\t\t\t\t// one-fingered touch: rotate\n\t\n\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\tif (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveRotate(event);\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2:\n\t\t\t\t\t// two-fingered touch: dolly\n\t\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\tif (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveDolly(event);\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3:\n\t\t\t\t\t// three-fingered touch: pan\n\t\n\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\tif (state !== STATE.TOUCH_PAN) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMovePan(event);\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onTouchEnd(event) {\n\t\n\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\thandleTouchEnd(event);\n\t\n\t\t\tscope.dispatchEvent(endEvent);\n\t\n\t\t\tstate = STATE.NONE;\n\t\t}\n\t\n\t\tfunction onContextMenu(event) {\n\t\n\t\t\tevent.preventDefault();\n\t\t}\n\t\n\t\t//\n\t\n\t\tscope.domElement.addEventListener('contextmenu', onContextMenu, false);\n\t\n\t\tscope.domElement.addEventListener('mousedown', onMouseDown, false);\n\t\tscope.domElement.addEventListener('wheel', onMouseWheel, false);\n\t\n\t\tscope.domElement.addEventListener('touchstart', onTouchStart, false);\n\t\tscope.domElement.addEventListener('touchend', onTouchEnd, false);\n\t\tscope.domElement.addEventListener('touchmove', onTouchMove, false);\n\t\n\t\twindow.addEventListener('keydown', onKeyDown, false);\n\t\n\t\t// force an update at start\n\t\n\t\tthis.update();\n\t};\n\t\n\tTHREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\n\tTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\t\n\tObject.defineProperties(THREE.OrbitControls.prototype, {\n\t\n\t\tcenter: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .center has been renamed to .target');\n\t\t\t\treturn this.target;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// backward compatibility\n\t\n\t\tnoZoom: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n\t\t\t\treturn !this.enableZoom;\n\t\t\t},\n\t\n\t\t\tset: function set(value) {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n\t\t\t\tthis.enableZoom = !value;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoRotate: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n\t\t\t\treturn !this.enableRotate;\n\t\t\t},\n\t\n\t\t\tset: function set(value) {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n\t\t\t\tthis.enableRotate = !value;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoPan: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n\t\t\t\treturn !this.enablePan;\n\t\t\t},\n\t\n\t\t\tset: function set(value) {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n\t\t\t\tthis.enablePan = !value;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoKeys: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n\t\t\t\treturn !this.enableKeys;\n\t\t\t},\n\t\n\t\t\tset: function set(value) {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n\t\t\t\tthis.enableKeys = !value;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tstaticMoving: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n\t\t\t\treturn !this.enableDamping;\n\t\t\t},\n\t\n\t\t\tset: function set(value) {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n\t\t\t\tthis.enableDamping = !value;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tdynamicDampingFactor: {\n\t\n\t\t\tget: function get() {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n\t\t\t\treturn this.dampingFactor;\n\t\t\t},\n\t\n\t\t\tset: function set(value) {\n\t\n\t\t\t\tconsole.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n\t\t\t\tthis.dampingFactor = value;\n\t\t\t}\n\t\n\t\t}\n\t\n\t});\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.EffectComposer = function (renderer, renderTarget) {\n\t\n\t\tthis.renderer = renderer;\n\t\n\t\tif (renderTarget === undefined) {\n\t\n\t\t\tvar pixelRatio = renderer.getPixelRatio();\n\t\n\t\t\tvar width = Math.floor(renderer.context.canvas.width / pixelRatio) || 1;\n\t\t\tvar height = Math.floor(renderer.context.canvas.height / pixelRatio) || 1;\n\t\t\tvar parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\n\t\n\t\t\trenderTarget = new THREE.WebGLRenderTarget(width, height, parameters);\n\t\t}\n\t\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\t\n\t\tthis.passes = [];\n\t\n\t\tif (THREE.CopyShader === undefined) console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n\t\n\t\tthis.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n\t};\n\t\n\tTHREE.EffectComposer.prototype = {\n\t\n\t\tswapBuffers: function swapBuffers() {\n\t\n\t\t\tvar tmp = this.readBuffer;\n\t\t\tthis.readBuffer = this.writeBuffer;\n\t\t\tthis.writeBuffer = tmp;\n\t\t},\n\t\n\t\taddPass: function addPass(pass) {\n\t\n\t\t\tthis.passes.push(pass);\n\t\t},\n\t\n\t\tinsertPass: function insertPass(pass, index) {\n\t\n\t\t\tthis.passes.splice(index, 0, pass);\n\t\t},\n\t\n\t\trender: function render(delta) {\n\t\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\t\n\t\t\tvar maskActive = false;\n\t\n\t\t\tvar pass,\n\t\t\t    i,\n\t\t\t    il = this.passes.length;\n\t\n\t\t\tfor (i = 0; i < il; i++) {\n\t\n\t\t\t\tpass = this.passes[i];\n\t\n\t\t\t\tif (!pass.enabled) continue;\n\t\n\t\t\t\tpass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);\n\t\n\t\t\t\tif (pass.needsSwap) {\n\t\n\t\t\t\t\tif (maskActive) {\n\t\n\t\t\t\t\t\tvar context = this.renderer.context;\n\t\n\t\t\t\t\t\tcontext.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n\t\n\t\t\t\t\t\tthis.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);\n\t\n\t\t\t\t\t\tcontext.stencilFunc(context.EQUAL, 1, 0xffffffff);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.swapBuffers();\n\t\t\t\t}\n\t\n\t\t\t\tif (pass instanceof THREE.MaskPass) {\n\t\n\t\t\t\t\tmaskActive = true;\n\t\t\t\t} else if (pass instanceof THREE.ClearMaskPass) {\n\t\n\t\t\t\t\tmaskActive = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\treset: function reset(renderTarget) {\n\t\n\t\t\tif (renderTarget === undefined) {\n\t\n\t\t\t\trenderTarget = this.renderTarget1.clone();\n\t\n\t\t\t\tvar pixelRatio = this.renderer.getPixelRatio();\n\t\n\t\t\t\trenderTarget.width = Math.floor(this.renderer.context.canvas.width / pixelRatio);\n\t\t\t\trenderTarget.height = Math.floor(this.renderer.context.canvas.height / pixelRatio);\n\t\t\t}\n\t\n\t\t\tthis.renderTarget1.dispose();\n\t\t\tthis.renderTarget1 = renderTarget;\n\t\t\tthis.renderTarget2.dispose();\n\t\t\tthis.renderTarget2 = renderTarget.clone();\n\t\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\t\t},\n\t\n\t\tsetSize: function setSize(width, height) {\n\t\n\t\t\tthis.renderTarget1.setSize(width, height);\n\t\t\tthis.renderTarget2.setSize(width, height);\n\t\t}\n\t\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 04a56999bc6abf12358a","var cats = require('./main.js');\n\n//console.log(cats);\n\n\n// WEBPACK FOOTER //\n// ./src/js/app.js","window.THREE = require('three');\nrequire('./libs/OrbitControls.js');\nrequire('./libs/EffectComposer.js');\n\n(function(){\n  var scene, camera, renderer;\n  var geometry, material, mesh;\n\n  init();\n  animate();\n\n  function init() {\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.z = 1000;\n\n    geometry = new THREE.BoxGeometry( 200, 200, 200 );\n    material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: false } );\n\n    mesh = new THREE.Mesh( geometry, material );\n    scene.add( mesh );\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n    document.body.appendChild( renderer.domElement );\n\n  }\n\n  function animate() {\n\n    requestAnimationFrame( animate );\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.02;\n\n    renderer.render( scene, camera );\n\n  }\n})();\n\n(function(){\n\n  var double = function(number) {\n    return new Promise(function(resolve) {\n      resolve(number * 2);\n    });\n  };\n\n  /* 3倍にする */\n\n  var treble = function(number) {\n    return new Promise(function(resolve) {\n      resolve(number * 3);\n    });\n  };\n\n  /* 表示する */\n\n  // var dump = function(number) {\n  //   console.log(number);\n  //   return number;\n  // };\n\n  var dump = function(number) {\n    if(number > 119 ){\n      console.log(number +':120以上です!');\n    }else if(number <= 119){\n      console.log(number +':120以下です!');\n    }\n    return number;\n  };\n\n  /* 実行 */\n\n  double(10)       // 10*2 -> 20\n      .then(dump)    // コンソールに表示: 20\n      .then(treble)  // 20*3 -> 60\n      .then(dump)    // コンソールに表示: 60\n      .then(double)  // 60*2 -> 120\n      .then(dump);   // コンソールに表示: 120\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/main.js","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( Function.prototype.name === undefined ) {\n\n\t\t// Missing in IE9-11.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\t'use strict';\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = [], i = 0;\n\t\t\t\tvar length = listenerArray.length;\n\n\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar REVISION = '82';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar BlendingMode = {\n\t\tNoBlending: NoBlending,\n\t\tNormalBlending: NormalBlending,\n\t\tAdditiveBlending: AdditiveBlending,\n\t\tSubtractiveBlending: SubtractiveBlending,\n\t\tMultiplyBlending: MultiplyBlending,\n\t\tCustomBlending: CustomBlending\n\t};\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar TextureMapping = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar TextureWrapping = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar NearestFilter = 1003;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar TextureFilter = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t};\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RGB_S3TC_DXT1_Format = 2001;\n\tvar RGBA_S3TC_DXT1_Format = 2002;\n\tvar RGBA_S3TC_DXT3_Format = 2003;\n\tvar RGBA_S3TC_DXT5_Format = 2004;\n\tvar RGB_PVRTC_4BPPV1_Format = 2100;\n\tvar RGB_PVRTC_2BPPV1_Format = 2101;\n\tvar RGBA_PVRTC_4BPPV1_Format = 2102;\n\tvar RGBA_PVRTC_2BPPV1_Format = 2103;\n\tvar RGB_ETC1_Format = 2151;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\tvar uuid = new Array( 36 );\n\t\t\tvar rnd = 0, r;\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn uuid.join( '' );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tvalue --;\n\t\t\tvalue |= value >> 1;\n\t\t\tvalue |= value >> 2;\n\t\t\tvalue |= value >> 4;\n\t\t\tvalue |= value >> 8;\n\t\t\tvalue |= value >> 16;\n\t\t\tvalue ++;\n\n\t\t\treturn value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tVector2.prototype = {\n\n\t\tconstructor: Vector2,\n\n\t\tisVector2: true,\n\n\t\tget width() {\n\n\t\t\treturn this.x;\n\n\t\t},\n\n\t\tset width( value ) {\n\n\t\t\tthis.x = value;\n\n\t\t},\n\n\t\tget height() {\n\n\t\t\treturn this.y;\n\n\t\t},\n\n\t\tset height( value ) {\n\n\t\t\tthis.y = value;\n\n\t\t},\n\n\t\t//\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tif ( isFinite( scalar ) ) {\n\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector2();\n\t\t\t\t\tmax = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tlengthManhattan: function() {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tindex = index * attribute.itemSize + offset;\n\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.sourceFile = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tfunction getDataURL( image ) {\n\n\t\t\t\tvar canvas;\n\n\t\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\t\tcanvas = image;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping )  return;\n\n\t\t\tuv.multiply( this.repeat );\n\t\t\tuv.add( this.offset );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tObject.assign( Texture.prototype, EventDispatcher.prototype );\n\n\tvar count = 0;\n\tfunction TextureIdCount() { return count++; }\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tVector4.prototype = {\n\n\t\tconstructor: Vector4,\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tif ( isFinite( scalar ) ) {\n\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\t\t\tthis.z *= scalar;\n\t\t\t\tthis.w *= scalar;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t\tthis.w = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\t this.x = 1;\n\t\t\t\t this.y = 0;\n\t\t\t\t this.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\t this.x = q.x / s;\n\t\t\t\t this.y = q.y / s;\n\t\t\t\t this.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\tmax = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tindex = index * attribute.itemSize + offset;\n\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\tthis.z = attribute.array[ index + 2 ];\n\t\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tObject.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tQuaternion.prototype = {\n\n\t\tconstructor: Quaternion,\n\n\t\tget x () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset x ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget y () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset y ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget z () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset z ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget w () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset w ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( (euler && euler.isEuler) === false ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\t\tvar order = euler.order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1, r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tinverse: function () {\n\n\t\t\treturn this.conjugate().normalize();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t};\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function(\n\t\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author *kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tVector3.prototype = {\n\n\t\tconstructor: Vector3,\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tif ( isFinite( scalar ) ) {\n\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\t\t\tthis.z *= scalar;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion;\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( (euler && euler.isEuler) === false ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion;\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyProjection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 projection matrix\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function () {\n\n\t\t\tvar matrix;\n\n\t\t\treturn function project( camera ) {\n\n\t\t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\treturn this.applyProjection( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix;\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\treturn this.applyProjection( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector3();\n\t\t\t\t\tmax = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\t\tthis.x = y * v.z - z * v.y;\n\t\t\tthis.y = z * v.x - x * v.z;\n\t\t\tthis.z = x * v.y - y * v.x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1;\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function( s ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\treturn this.setFromMatrixColumn( m, 3 );\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\tif ( typeof m === 'number' ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\t\tvar temp = m;\n\t\t\t\tm = index;\n\t\t\t\tindex = temp;\n\n\t\t\t}\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tindex = index * attribute.itemSize + offset;\n\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = new Float32Array( [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t] );\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tMatrix4.prototype = {\n\n\t\tconstructor: Matrix4,\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tthis.elements.set( m.elements );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0,       0,       0,       1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( (euler && euler.isEuler) === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\tte[ 4 ] = xy - wz;\n\t\t\tte[ 8 ] = xz + wy;\n\n\t\t\tte[ 1 ] = xy + wz;\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\tte[ 9 ] = yz - wx;\n\n\t\t\tte[ 2 ] = xz - wy;\n\t\t\tte[ 6 ] = yz + wx;\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function () {\n\n\t\t\tvar x, y, z;\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tif ( x === undefined ) {\n\n\t\t\t\t\tx = new Vector3();\n\t\t\t\t\ty = new Vector3();\n\t\t\t\t\tz = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\tz.z += 0.0001;\n\t\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\ty.crossVectors( z, x );\n\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyToArray: function ( a, b, r ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tthis.multiplyMatrices( a, b );\n\n\t\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToVector3Array: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\t\tv1.toArray( array, j );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyToBuffer: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tbuffer.setXYZ( j, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn buffer;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0,  0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s,  c, 0,\n\t\t\t\t0, 0,  0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts,  c, 0, 0,\n\t\t\t\t0,  0, 1, 0,\n\t\t\t\t0,  0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\tthis.scale( scale );\n\t\t\tthis.setPosition( position );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector, matrix;\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t\tmatrix = new Matrix4();\n\n\t\t\t\t}\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) {\n\n\t\t\t\t\tsx = - sx;\n\n\t\t\t\t}\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\n\t\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\t\tvar ymax = near * Math.tan( _Math.DEG2RAD * fov * 0.5 );\n\t\t\tvar ymin = - ymax;\n\t\t\tvar xmin = ymin * aspect;\n\t\t\tvar xmax = ymax * aspect;\n\n\t\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tfunction UniformContainer() {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( renderer, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\tfunction setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValue2fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t}\n\n\tfunction setValue3fv( gl, v ) {\n\n\t\tif ( v.x !== undefined )\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\telse if ( v.r !== undefined )\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\telse\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t}\n\n\tfunction setValue4fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValue2fm( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t}\n\n\tfunction setValue3fm( gl, v ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n\t}\n\n\tfunction setValue4fm( gl, v ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\tfunction setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\tfunction setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\n\tfunction setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\tfunction setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2a( gl, v ) {\n\n\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t}\n\n\tfunction setValueV3a( gl, v ) {\n\n\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t}\n\n\tfunction setValueV4a( gl, v ) {\n\n\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2a( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t}\n\n\tfunction setValueM3a( gl, v ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t}\n\n\tfunction setValueM4a( gl, v ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tUniformContainer.call( this ); // mix-in\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\tfor (; ;) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\tif ( subscript === undefined ||\n\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map,\n\t\t\t\t\tnext = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program, renderer ) {\n\n\t\tUniformContainer.call( this );\n\n\t\tthis.renderer = renderer;\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\tpath = info.name,\n\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tvar UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\tvar bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\tvar defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\tvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\tvar logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n\tvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\tvar project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n\tvar distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n\tvar normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n\tvar shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars: lights_pars,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_template: lights_template,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_flip: normal_flip,\n\t\tnormal_fragment: normal_fragment,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tColor.prototype = {\n\n\t\tconstructor: Color,\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( (value && value.isColor) ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function () {\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tthis.r = r * r;\n\t\t\tthis.g = g * g;\n\t\t\tthis.b = b * b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function () {\n\n\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\tthis.b = Math.sqrt( this.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( optionalTarget ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\thsl.h = hue;\n\t\t\thsl.s = saturation;\n\t\t\thsl.l = lightness;\n\n\t\t\treturn hsl;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tvar hsl = this.getHSL();\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t};\n\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n\t\t\tspecularMap: { value: null },\n\t\t\talphaMap: { value: null },\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.fog\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\n\t\t\t\t{\n\t\t\t\t\temissive : { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\n\t\t\t\t{\n\t\t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular : { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\n\t\t\t\t{\n\t\t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0 },\n\t\t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\n\t\t\t\t{\n\t\t\t\t\tscale    : { value: 1 },\n\t\t\t\t\tdashSize : { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: {\n\n\t\t\t\topacity : { value: 1.0 }\n\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t\ttFlip: { value: - 1 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: {\n\n\t\t\t\tlightPos: { value: new Vector3() }\n\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: UniformsUtils.merge( [\n\n\t\t\tShaderLib.standard.uniforms,\n\n\t\t\t{\n\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tBox2.prototype = {\n\n\t\tconstructor: Box2,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlarePlugin( renderer, flares ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar shader, program, attributes, uniforms;\n\n\t\tvar tempTexture, occlusionTexture;\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 1, - 1,  0, 0,\n\t\t\t\t 1, - 1,  1, 0,\n\t\t\t\t 1,  1,  1, 1,\n\t\t\t\t- 1,  1,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\t// buffers\n\n\t\t\tvertexBuffer     = gl.createBuffer();\n\t\t\telementBuffer    = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\t// textures\n\n\t\t\ttempTexture      = gl.createTexture();\n\t\t\tocclusionTexture = gl.createTexture();\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t\tprogram = createProgram( shader );\n\n\t\t\tattributes = {\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t\t};\n\n\t\t}\n\n\t\t/*\n\t\t * Render lens flares\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t *         reads these back and calculates occlusion.\n\t\t */\n\n\t\tthis.render = function ( scene, camera, viewport ) {\n\n\t\t\tif ( flares.length === 0 ) return;\n\n\t\t\tvar tempPosition = new Vector3();\n\n\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\t\tvar size = 16 / viewport.w,\n\t\t\t\tscale = new Vector2( size * invAspect, size );\n\n\t\t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t\t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n\t\t\tvar validArea = new Box2();\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t// setup gl and common used attribs/uniforms\n\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.setDepthWrite( false );\n\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t\t// calc object screen position\n\n\t\t\t\tvar flare = flares[ i ];\n\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t\t// setup arrays for gl programs\n\n\t\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t\t// screen cull\n\n\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// render pink quad\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// restore graphics\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// update object positions\n\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// render flares\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\tstate.setDepthWrite( true );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram( shader ) {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\t\tgl.compileShader( fragmentShader );\n\t\t\tgl.compileShader( vertexShader );\n\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\tgl.attachShader( program, vertexShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpritePlugin( renderer, sprites ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar program, attributes, uniforms;\n\n\t\tvar texture;\n\n\t\t// decompose matrixWorld\n\n\t\tvar spritePosition = new Vector3();\n\t\tvar spriteRotation = new Quaternion();\n\t\tvar spriteScale = new Vector3();\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t\t- 0.5,   0.5,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\tvertexBuffer  = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\tprogram = createProgram();\n\n\t\t\tattributes = {\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t\t};\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = 8;\n\t\t\tcanvas.height = 8;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.fillStyle = 'white';\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\t\ttexture = new Texture( canvas );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( sprites.length === 0 ) return;\n\n\t\t\t// setup gl\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.BLEND );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\t\tvar oldFogType = 0;\n\t\t\tvar sceneFogType = 0;\n\t\t\tvar fog = scene.fog;\n\n\t\t\tif ( fog ) {\n\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\t\tif ( (fog && fog.isFog) ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\toldFogType = 1;\n\t\t\t\t\tsceneFogType = 1;\n\n\t\t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\toldFogType = 2;\n\t\t\t\t\tsceneFogType = 2;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\toldFogType = 0;\n\t\t\t\tsceneFogType = 0;\n\n\t\t\t}\n\n\n\t\t\t// update positions and sort\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t\t}\n\n\t\t\tsprites.sort( painterSortStable );\n\n\t\t\t// render all sprites\n\n\t\t\tvar scale = [];\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\tvar material = sprite.material;\n\n\t\t\t\tif ( material.visible === false ) continue;\n\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\t\tvar fogType = 0;\n\n\t\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\t\tfogType = sceneFogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\toldFogType = fogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram() {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform float rotation;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'uniform vec3 color;',\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\n\t\t\t\t'uniform int fogType;',\n\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t'uniform float fogNear;',\n\t\t\t\t'uniform float fogFar;',\n\t\t\t\t'uniform float alphaTest;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t\t'}',\n\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.compileShader( vertexShader );\n\t\t\tgl.compileShader( fragmentShader );\n\n\t\t\tgl.attachShader( program, vertexShader );\n\t\t\tgl.attachShader( program, fragmentShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction painterSortStable( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn b.id - a.id;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis._needsUpdate = true;\n\n\t}\n\n\tMaterial.prototype = {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tget needsUpdate() {\n\n\t\t\treturn this._needsUpdate;\n\n\t\t},\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.update();\n\t\t\tthis._needsUpdate = value;\n\n\t\t},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( (currentValue && currentValue.isColor) ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = meta === undefined;\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n\t\t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\t\t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\t\t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\t\t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tdata.skinning = this.skinning;\n\t\t\tdata.morphTargets = this.morphTargets;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.shading = source.shading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t};\n\n\tObject.assign( Material.prototype, EventDispatcher.prototype );\n\n\tvar count$1 = 0;\n\tfunction MaterialIdCount() { return count$1++; }\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = source.defines;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = this.uniforms;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tBox3.prototype = {\n\n\t\tconstructor: Box3,\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromObject( object ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tthis.makeEmpty();\n\n\t\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n\t\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\t\tvar array, offset, stride;\n\n\t\t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\n\t\t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t\t\t\t\t\t\t\t\toffset = attribute.offset;\n\t\t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tarray = attribute.array;\n\t\t\t\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\t\t\t\tstride = 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n\t\t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint;\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Sphere();\n\n\t\t\t\tthis.getCenter( result.center );\n\n\t\t\t\tresult.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tSphere.prototype = {\n\n\t\tconstructor: Sphere,\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We use the following equation to compute the signed distance from\n\t\t\t// the center of the sphere to the plane.\n\t\t\t//\n\t\t\t// distance = q * n - d\n\t\t\t//\n\t\t\t// If this distance is greater than the radius of the sphere,\n\t\t\t// then there is no intersection.\n\n\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tresult.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\t\tvar box = optionalTarget || new Box3();\n\n\t\t\tbox.set( this.center, this.center );\n\t\t\tbox.expandByScalar( this.radius );\n\n\t\t\treturn box;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = new Float32Array( [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t] );\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tMatrix3.prototype = {\n\n\t\tconstructor: Matrix3,\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToVector3Array: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\t\tv1.toArray( array, j );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyToBuffer: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tbuffer.setXYZ( j, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn buffer;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( (matrix && matrix.isMatrix4) ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Plane( normal, constant ) {\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tPlane.prototype = {\n\n\t\tconstructor: Plane,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t\t},\n\n\t\torthoPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar m1 = new Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\t// transform normal based on theory here:\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tFrustum.prototype = {\n\n\t\tconstructor: Frustum,\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p1 = new Vector3(),\n\t\t\t\tp2 = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n\t\tvar _gl = _renderer.context,\n\t\t_state = _renderer.state,\n\t\t_frustum = new Frustum(),\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_lightShadows = _lights.shadows,\n\n\t\t_shadowMapSize = new Vector2(),\n\t\t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n\t\t_lookTarget = new Vector3(),\n\t\t_lightPositionWorld = new Vector3(),\n\n\t\t_renderList = [],\n\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t_materialCache = {};\n\n\t\tvar cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t\tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t\tdepthMaterialTemplate.clipping = true;\n\n\t\tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t\tvar distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\t\tdepthMaterial.morphTargets = useMorphing;\n\t\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\tvar distanceMaterial = new ShaderMaterial( {\n\t\t\t\tdefines: {\n\t\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t\t},\n\t\t\t\tuniforms: distanceUniforms,\n\t\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning,\n\t\t\t\tclipping: true\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.renderReverseSided = true;\n\t\tthis.renderSingleSided = true;\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.setDepthTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount, isPointLight;\n\n\t\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = _lightShadows[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( (light && light.isPointLight) ) {\n\n\t\t\t\t\tfaceCount = 6;\n\t\t\t\t\tisPointLight = true;\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\t\t\t\t\tisPointLight = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\t_renderList.length = 0;\n\n\t\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n\t\t\t\t\t// render shadow map\n\t\t\t\t\t// render regular objects\n\n\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Restore GL state.\n\t\t\tvar clearColor = _renderer.getClearColor(),\n\t\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t material.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tvar side = material.side;\n\n\t\t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n\t\t\t\tside = FrontSide;\n\n\t\t\t}\n\n\t\t\tif ( scope.renderReverseSided ) {\n\n\t\t\t\tif ( side === FrontSide ) side = BackSide;\n\t\t\t\telse if ( side === BackSide ) side = FrontSide;\n\n\t\t\t}\n\n\t\t\tresult.side = side;\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction projectObject( object, camera, shadowCamera ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n\t}\n\n\tRay.prototype = {\n\n\t\tconstructor: Ray,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\tresult.subVectors( point, this.origin );\n\t\t\tvar directionDistance = result.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn result.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new Vector3();\n\t\t\tvar segDir = new Vector3();\n\t\t\tvar diff = new Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t :  null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, optionalTarget );\n\n\t\t},\n\n\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, optionalTarget ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new Vector3();\n\t\t\tvar edge1 = new Vector3();\n\t\t\tvar edge2 = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.sub( this.origin );\n\t\t\tthis.direction.normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tEuler.prototype = {\n\n\t\tconstructor: Euler,\n\n\t\tisEuler: true,\n\n\t\tget x () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset x ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget y () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset y ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget z () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset z ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget order () {\n\n\t\t\treturn this._order;\n\n\t\t},\n\n\t\tset order ( value ) {\n\n\t\t\tthis._order = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix;\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1;\n\n\t}\n\n\tLayers.prototype = {\n\n\t\tconstructor: Layers,\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t\tthis.onBeforeRender = function(){}; \n\t\tthis.onAfterRender = function(){};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n\t\tisObject3D: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( (object && object.isObject3D) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar scale = new Vector3();\n\n\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Quaternion();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldRotation: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Euler();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is '' when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\t//\n\n\t\t\tif ( this.geometry !== undefined ) {\n\n\t\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = this.material.uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar count$2 = 0;\n\tfunction Object3DIdCount() { return count$2++; }\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tLine3.prototype = {\n\n\t\tconstructor: Line3,\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new Vector3();\n\t\t\tvar startEnd = new Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tTriangle.normal = function () {\n\n\t\tvar v0 = new Vector3();\n\n\t\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tresult.subVectors( c, b );\n\t\t\tv0.subVectors( a, b );\n\t\t\tresult.cross( v0 );\n\n\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn result.set( 0, 0, 0 );\n\n\t\t};\n\n\t}();\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tTriangle.barycoordFromPoint = function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\t\tv0.subVectors( c, a );\n\t\t\tv1.subVectors( b, a );\n\t\t\tv2.subVectors( point, a );\n\n\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn result.set( 1 - u - v, v, u );\n\n\t\t};\n\n\t}();\n\n\tTriangle.containsPoint = function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t\t};\n\n\t}();\n\n\tTriangle.prototype = {\n\n\t\tconstructor: Triangle,\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarea: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function area() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmidpoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tnormal: function ( optionalTarget ) {\n\n\t\t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tplane: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Plane();\n\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\t\tif ( plane === undefined ) {\n\n\t\t\t\t\tplane = new Plane();\n\t\t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\t\t\t\tprojectedPoint = new Vector3();\n\t\t\t\t\tclosestPoint = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\tvar minDistance = Infinity;\n\n\t\t\t\t// project the point onto the plane of the triangle\n\n\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t\t// check if the projection lies within the triangle\n\n\t\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t\t// if so, this is the closest point\n\n\t\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = (color && color.isColor) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tFace3.prototype = {\n\n\t\tconstructor: Face3,\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  shading: THREE.SmoothShading,\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tBufferAttribute.prototype = {\n\n\t\tconstructor: BufferAttribute,\n\n\t\tisBufferAttribute: true,\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t},\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyIndicesArray: function ( indices ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tvar index = indices[ i ];\n\n\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\n\t}\n\n\t// Deprecated\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj;\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tif ( obj === undefined ) obj = new Object3D();\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar d = 0;\n\t\t\tvar vertices = this.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tif ( i > 0 ) {\n\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( (geometry && geometry.isGeometry) === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\tcolors1 = this.colors,\n\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( (mesh && mesh.isMesh) === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\tvar dupIndex = - 1;\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tdupIndex = n;\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t// Handle primitives\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tif ( parameters !== undefined ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\treturn new this.constructor().copy( this );\n\t\t\t*/\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [ [] ];\n\t\t\tthis.colors = [];\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar count$3 = 0;\n\tfunction GeometryIdCount() { return count$3++; }\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'DirectGeometry';\n\n\t\tthis.indices = [];\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\n\t\tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n\t\tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t\t},\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t}\n\n\tObject.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tthis.index = index;\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj;\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tif ( obj === undefined ) obj = new Object3D();\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\n\t\t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( (object && object.isMesh) ) {\n\n\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( (object && object.isMesh) ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position.array;\n\n\t\t\tif ( positions !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromArray( positions );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new Box3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar positions = this.attributes.position;\n\n\t\t\t\tif ( positions ) {\n\n\t\t\t\t\tvar array = positions.array;\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromArray( array );\n\t\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC,\n\n\t\t\t\tpA = new Vector3(),\n\t\t\t\tpB = new Vector3(),\n\t\t\t\tpC = new Vector3(),\n\n\t\t\t\tcb = new Vector3(),\n\t\t\t\tab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\n\t\t\tvar x, y, z, n;\n\n\t\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\t\tx = normals[ i ];\n\t\t\t\ty = normals[ i + 1 ];\n\t\t\t\tz = normals[ i + 2 ];\n\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\t\tnormals[ i ] *= n;\n\t\t\t\tnormals[ i + 1 ] *= n;\n\t\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t// Handle primitives\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tif ( parameters !== undefined ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\treturn new this.constructor().copy( this );\n\t\t\t*/\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tBufferGeometry.MaxIndex = 65535;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar morphTargets = this.geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tvar tempA = new Vector3();\n\t\t\tvar tempB = new Vector3();\n\t\t\tvar tempC = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tvar barycoord = new Vector3();\n\n\t\t\tvar intersectionPoint = new Vector3();\n\t\t\tvar intersectionPointWorld = new Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar uvs, intersection;\n\n\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n\t\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\t// segments\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n\t\t// buffers\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t\t// offset variables\n\t\tvar vertexBufferOffset = 0;\n\t\tvar uvBufferOffset = 0;\n\t\tvar indexBufferOffset = 0;\n\t\tvar numberOfVertices = 0;\n\n\t\t// group variables\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n\t\t// helper functions\n\n\t\tfunction calculateVertexCount( w, h, d ) {\n\n\t\t\tvar vertices = 0;\n\n\t\t\t// calculate the amount of vertices for each side (plane)\n\t\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n\t\t\treturn vertices;\n\n\t\t}\n\n\t\tfunction calculateIndexCount( w, h, d ) {\n\n\t\t\tvar index = 0;\n\n\t\t\t// calculate the amount of squares for each side\n\t\t\tindex += w * h * 2; // xy\n\t\t\tindex += w * d * 2; // xz\n\t\t\tindex += d * h * 2; // zy\n\n\t\t\treturn index * 6; // two triangles per square => six vertices per square\n\n\t\t}\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth\t= width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\t\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t\t// uvs\n\t\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\t\t// update offsets and counters\n\t\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\t\tuvBufferOffset += 2;\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// face one\n\t\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t\t// face two\n\t\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t\t// update offsets and counters\n\t\t\t\t\tindexBufferOffset += 6;\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t */\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\t\tvar offset = 0;\n\t\tvar offset2 = 0;\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices[ offset ] = x;\n\t\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\toffset += 3;\n\t\t\t\toffset2 += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\toffset = 0;\n\n\t\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\t\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices[ offset ] = a;\n\t\t\t\tindices[ offset + 1 ] = b;\n\t\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\t\tindices[ offset + 3 ] = b;\n\t\t\t\tindices[ offset + 4 ] = c;\n\t\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\t\toffset += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.create( Object3D.prototype );\n\tCamera.prototype.constructor = Camera;\n\n\tCamera.prototype.isCamera = true;\n\n\tCamera.prototype.getWorldDirection = function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}();\n\n\tCamera.prototype.lookAt = function () {\n\n\t\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}();\n\n\tCamera.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tCamera.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCamera.prototype.copy.call( this, source );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function() {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( view !== null ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCamera.prototype.copy.call( this, source );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function() {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, size;\n\n\t\tfunction setIndex( index ) {\n\n\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t\tsize = 4;\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\tsize = 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * size );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tsetMode: setMode,\n\t\t\tsetIndex: setIndex,\n\t\t\trender: render,\n\t\t\trenderInstances: renderInstances\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\tvar count = 0;\n\n\t\t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\n\t\t\t\tcount = position.data.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\tcount = position.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t}\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetMode: setMode,\n\t\t\trender: render,\n\t\t\trenderInstances: renderInstances\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLLights() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction WebGLProgram( renderer, code, material, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\t\t\t'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( ! material.isShaderMaterial ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\n\t\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( (map && map.isTexture) ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = allocateBones( object );\n\t\t\tvar precision = renderer.getPrecision();\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: (fog && fog.isFogExp2),\n\n\t\t\t\tflatShading: material.shading === FlatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, properties, info ) {\n\n\t\tvar geometries = {};\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tdeleteAttribute( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\t// TODO\n\n\t\t\tvar property = properties.get( geometry );\n\n\t\t\tif ( property.wireframe ) {\n\n\t\t\t\tdeleteAttribute( property.wireframe );\n\n\t\t\t}\n\n\t\t\tproperties.delete( geometry );\n\n\t\t\tvar bufferproperty = properties.get( buffergeometry );\n\n\t\t\tif ( bufferproperty.wireframe ) {\n\n\t\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n\t\t\t}\n\n\t\t\tproperties.delete( buffergeometry );\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction getAttributeBuffer( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t\t}\n\n\t\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t\t}\n\n\t\tfunction deleteAttribute( attribute ) {\n\n\t\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\t\tif ( buffer !== undefined ) {\n\n\t\t\t\tgl.deleteBuffer( buffer );\n\t\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction deleteAttributes( attributes ) {\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction removeAttributeBuffer( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tproperties.delete( attribute.data );\n\n\t\t\t} else {\n\n\t\t\t\tproperties.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: function ( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\t\t\treturn geometries[ geometry.id ];\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\t\tvar buffergeometry;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t\t}\n\n\t\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\t\tinfo.memory.geometries ++;\n\n\t\t\t\treturn buffergeometry;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, properties, info ) {\n\n\t\tvar geometries = new WebGLGeometries( gl, properties, info );\n\n\t\t//\n\n\t\tfunction update( object ) {\n\n\t\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\t\tvar geometry = geometries.get( object );\n\n\t\t\tif ( object.geometry.isGeometry ) {\n\n\t\t\t\tgeometry.updateFromObject( object );\n\n\t\t\t}\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\t\tvar attributeProperties = properties.get( data );\n\n\t\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\t\tattributeProperties.version = data.version;\n\n\t\t}\n\n\t\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\t\tif ( data.dynamic === false ) {\n\n\t\t\t\tgl.bufferData( bufferType, data.array, gl.STATIC_DRAW );\n\n\t\t\t} else if ( data.updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t\t}\n\n\t\t\tattributeProperties.version = data.version;\n\n\t\t}\n\n\t\tfunction getAttributeBuffer( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t\t}\n\n\t\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar property = properties.get( geometry );\n\n\t\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\t\treturn property.wireframe;\n\n\t\t\t}\n\n\t\t\tvar indices = [];\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar position = attributes.position;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar edges = {};\n\t\t\t\tvar array = index.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = attributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\tproperty.wireframe = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetAttributeBuffer: getAttributeBuffer,\n\t\t\tgetWireframeAttribute: getWireframeAttribute,\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n\t\tvar _infoMemory = info.memory;\n\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t\t//\n\n\t\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = _Math.nearestPowerOfTwo( image.width );\n\t\t\t\tcanvas.height = _Math.nearestPowerOfTwo( image.height );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\t_infoMemory.textures --;\n\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\t_infoMemory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.delete( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.delete( renderTarget.texture );\n\t\t\tproperties.delete( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n\t\t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( (texture && texture.isDepthTexture) ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( (texture && texture.isDataTexture) ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error('Unknown depthTexture format')\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\t\ttexture.minFilter !== NearestFilter &&\n\t\t\t\t\ttexture.minFilter !== LinearFilter ) {\n\n\t\t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = {};\n\n\t\treturn {\n\n\t\t\tget: function ( object ) {\n\n\t\t\t\tvar uuid = object.uuid;\n\t\t\t\tvar map = properties[ uuid ];\n\n\t\t\t\tif ( map === undefined ) {\n\n\t\t\t\t\tmap = {};\n\t\t\t\t\tproperties[ uuid ] = map;\n\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\n\t\t\t},\n\n\t\t\tdelete: function ( object ) {\n\n\t\t\t\tdelete properties[ object.uuid ];\n\n\t\t\t},\n\n\t\t\tclear: function () {\n\n\t\t\t\tproperties = {};\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, paramThreeToGL ) {\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4();\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a ) {\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail  = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar capabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar currentScissorTest = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t//\n\n\t\tfunction init() {\n\n\t\t\tclearColor( 0, 0, 0, 1 );\n\t\t\tclearDepth( 1 );\n\t\t\tclearStencil( 0 );\n\n\t\t\tenable( gl.DEPTH_TEST );\n\t\t\tsetDepthFunc( LessEqualDepth );\n\n\t\t\tsetFlipSided( false );\n\t\t\tsetCullFace( CullFaceBack );\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tenable( gl.BLEND );\n\t\t\tsetBlending( NormalBlending );\n\n\t\t}\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tcapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tcapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getCompressedTextureFormats() {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t}\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending !== NoBlending ) {\n\n\t\t\t\tenable( gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.BLEND );\n\n\t\t\t}\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( blending === AdditiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === SubtractiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === MultiplyBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blending === CustomBlending ) {\n\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t\t}\n\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// TODO Deprecate\n\n\t\tfunction setColorWrite( colorWrite ) {\n\n\t\t\tcolorBuffer.setMask( colorWrite );\n\n\t\t}\n\n\t\tfunction setDepthTest( depthTest ) {\n\n\t\t\tdepthBuffer.setTest( depthTest );\n\n\t\t}\n\n\t\tfunction setDepthWrite( depthWrite ) {\n\n\t\t\tdepthBuffer.setMask( depthWrite );\n\n\t\t}\n\n\t\tfunction setDepthFunc( depthFunc ) {\n\n\t\t\tdepthBuffer.setFunc( depthFunc );\n\n\t\t}\n\n\t\tfunction setStencilTest( stencilTest ) {\n\n\t\t\tstencilBuffer.setTest( stencilTest );\n\n\t\t}\n\n\t\tfunction setStencilWrite( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( stencilWrite );\n\n\t\t}\n\n\t\tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t}\n\n\t\tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tgl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getScissorTest() {\n\n\t\t\treturn currentScissorTest;\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tcurrentScissorTest = scissorTest;\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// TODO Deprecate\n\n\t\tfunction clearColor( r, g, b, a ) {\n\n\t\t\tcolorBuffer.setClear( r, g, b, a );\n\n\t\t}\n\n\t\tfunction clearDepth( depth ) {\n\n\t\t\tdepthBuffer.setClear( depth );\n\n\t\t}\n\n\t\tfunction clearStencil( stencil ) {\n\n\t\t\tstencilBuffer.setClear( stencil );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinit: init,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\t\tsetBlending: setBlending,\n\n\t\t\tsetColorWrite: setColorWrite,\n\t\t\tsetDepthTest: setDepthTest,\n\t\t\tsetDepthWrite: setDepthWrite,\n\t\t\tsetDepthFunc: setDepthFunc,\n\t\t\tsetStencilTest: setStencilTest,\n\t\t\tsetStencilWrite: setStencilWrite,\n\t\t\tsetStencilFunc: setStencilFunc,\n\t\t\tsetStencilOp: setStencilOp,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tgetScissorTest: getScissorTest,\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\n\t\t\tclearColor: clearColor,\n\t\t\tclearDepth: clearDepth,\n\t\t\tclearStencil: clearStencil,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\treturn {\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function() {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function() {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled ||\n\t\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\t\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\t\tvar lights = [];\n\n\t\tvar opaqueObjects = [];\n\t\tvar opaqueObjectsLastIndex = - 1;\n\t\tvar transparentObjects = [];\n\t\tvar transparentObjectsLastIndex = - 1;\n\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar sprites = [];\n\t\tvar lensFlares = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t// internal state cache\n\n\t\t_currentProgram = null,\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\t\t_currentGeometryProgram = '',\n\t\t_currentCamera = null,\n\n\t\t_currentScissor = new Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t_currentViewport = new Vector4(),\n\n\t\t//\n\n\t\t_usedTextureUnits = 0,\n\n\t\t//\n\n\t\t_clearColor = new Color( 0x000000 ),\n\t\t_clearAlpha = 0,\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\n\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\n\t\t// frustum\n\n\t\t_frustum = new Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t_sphere = new Sphere(),\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_vector3 = new Vector3(),\n\n\t\t// light arrays cache\n\n\t\t_lights = {\n\n\t\t\thash: '',\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\n\t\t\tshadows: []\n\n\t\t},\n\n\t\t// info\n\n\t\t_infoRender = {\n\n\t\t\tcalls: 0,\n\t\t\tvertices: 0,\n\t\t\tfaces: 0,\n\t\t\tpoints: 0\n\n\t\t};\n\n\t\tthis.info = {\n\n\t\t\trender: _infoRender,\n\t\t\tmemory: {\n\n\t\t\t\tgeometries: 0,\n\t\t\t\ttextures: 0\n\n\t\t\t},\n\t\t\tprograms: null\n\n\t\t};\n\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar attributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t};\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t\t}\n\n\t\tvar extensions = new WebGLExtensions( _gl );\n\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\tBufferGeometry.MaxIndex = 4294967296;\n\n\t\t}\n\n\t\tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\t\tvar properties = new WebGLProperties();\n\t\tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t\tvar objects = new WebGLObjects( _gl, properties, this.info );\n\t\tvar programCache = new WebGLPrograms( this, capabilities );\n\t\tvar lightCache = new WebGLLights();\n\n\t\tthis.info.programs = programCache.programs;\n\n\t\tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t\t//\n\n\t\tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tvar backgroundCamera2 = new PerspectiveCamera();\n\t\tvar backgroundPlaneMesh = new Mesh(\n\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t);\n\t\tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n\t\tvar backgroundBoxMesh = new Mesh(\n\t\t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t\t\tnew ShaderMaterial( {\n\t\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tfog: false\n\t\t\t} )\n\t\t);\n\n\t\t//\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\tfunction glClearColor( r, g, b, a ) {\n\n\t\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t}\n\n\t\t\tstate.clearColor( r, g, b, a );\n\n\t\t}\n\n\t\tfunction setDefaultGLState() {\n\n\t\t\tstate.init();\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t}\n\n\t\tfunction resetGLState() {\n\n\t\t\t_currentProgram = null;\n\t\t\t_currentCamera = null;\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\n\t\t\tstate.reset();\n\n\t\t}\n\n\t\tsetDefaultGLState();\n\n\t\tthis.context = _gl;\n\t\tthis.capabilities = capabilities;\n\t\tthis.extensions = extensions;\n\t\tthis.properties = properties;\n\t\tthis.state = state;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n\t\tthis.shadowMap = shadowMap;\n\n\n\t\t// Plugins\n\n\t\tvar spritePlugin = new SpritePlugin( this, sprites );\n\t\tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t\t};\n\n\t\tthis.getMaxAnisotropy = function () {\n\n\t\t\treturn capabilities.getMaxAnisotropy();\n\n\t\t};\n\n\t\tthis.getPrecision = function () {\n\n\t\t\treturn capabilities.precision;\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn _clearColor;\n\n\t\t};\n\n\t\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t\t_clearColor.set( color );\n\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn _clearAlpha;\n\n\t\t};\n\n\t\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t\t_clearAlpha = alpha;\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t// Reset\n\n\t\tthis.resetGLState = resetGLState;\n\n\t\tthis.dispose = function() {\n\n\t\t\ttransparentObjects = [];\n\t\t\ttransparentObjectsLastIndex = -1;\n\t\t\topaqueObjects = [];\n\t\t\topaqueObjectsLastIndex = -1;\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tresetGLState();\n\t\t\tsetDefaultGLState();\n\n\t\t\tproperties.clear();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.delete( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar attributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t     ! material.isMeshStandardMaterial &&\n\t\t\t\t       material.shading === FlatShading ) {\n\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tsetMaterial( material );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\tvar updateBuffers = false;\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\t\tvar activeInfluences = [];\n\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t\t}\n\n\t\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t\t}\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n\t\t\t\t\tmorphInfluences[ i ] = 0.0;\n\n\t\t\t\t}\n\n\t\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = objects.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar renderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( index );\n\n\t\t\t} else {\n\n\t\t\t\trenderer = bufferRenderer;\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = 0;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) return;\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t}\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n\t\t\t\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.FLOAT;\n\n\t\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\n\t\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n\t\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.SHORT;\n\n\t\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n\t\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.INT;\n\n\t\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.BYTE;\n\n\t\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Sorting\n\n\t\tfunction absNumericalSort( a, b ) {\n\n\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t\t}\n\n\t\tfunction painterSortStable( a, b ) {\n\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n\t\t\t\treturn a.material.program.id - b.material.program.id;\n\n\t\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\t\treturn a.material.id - b.material.id;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn a.z - b.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reversePainterSortStable( a, b ) {\n\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t\t} if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\tlights.length = 0;\n\n\t\t\topaqueObjectsLastIndex = - 1;\n\t\t\ttransparentObjectsLastIndex = - 1;\n\n\t\t\tsprites.length = 0;\n\t\t\tlensFlares.length = 0;\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tprojectObject( scene, camera );\n\n\t\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tsetupShadows( lights );\n\n\t\t\tshadowMap.render( scene, camera );\n\n\t\t\tsetupLights( lights, camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\t_infoRender.calls = 0;\n\t\t\t_infoRender.vertices = 0;\n\t\t\t_infoRender.faces = 0;\n\t\t\t_infoRender.points = 0;\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n\t\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n\t\t\t\tobjects.update( backgroundBoxMesh );\n\n\t\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tbackgroundPlaneMesh.material.map = background;\n\n\t\t\t\tobjects.update( backgroundPlaneMesh );\n\n\t\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\trenderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\trenderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tstate.setBlending( NoBlending );\n\t\t\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\trenderObjects( transparentObjects, scene, camera );\n\n\t\t\t}\n\n\t\t\t// custom render plugins (post pass)\n\n\t\t\tspritePlugin.render( scene, camera );\n\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.setDepthTest( true );\n\t\t\tstate.setDepthWrite( true );\n\t\t\tstate.setColorWrite( true );\n\n\t\t\t// _gl.finish();\n\n\t\t};\n\n\t\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\t\tvar array, index;\n\n\t\t\t// allocate the next position in the appropriate array\n\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\tarray = transparentObjects;\n\t\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t\t} else {\n\n\t\t\t\tarray = opaqueObjects;\n\t\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t\t}\n\n\t\t\t// recycle existing render item or grow the array\n\n\t\t\tvar renderItem = array[ index ];\n\n\t\t\tif ( renderItem !== undefined ) {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.z = _vector3.z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tz: _vector3.z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\t// assert( index === array.length );\n\t\t\t\tarray.push( renderItem );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction projectObject( object, camera ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlights.push( object );\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n\t\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isLensFlare ) {\n\n\t\t\t\t\tlensFlares.push( object );\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tsetMaterial( material );\n\n\t\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t\t}\n\n\t\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar attributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t     ! material.isRawShaderMaterial ||\n\t\t\t       material.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setMaterial( material ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? state.disable( _gl.CULL_FACE )\n\t\t\t\t: state.enable( _gl.CULL_FACE );\n\n\t\t\tstate.setFlipSided( material.side === BackSide );\n\n\t\t\tmaterial.transparent === true\n\t\t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t\t: state.setBlending( NoBlending );\n\n\t\t\tstate.setDepthFunc( material.depthFunc );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\t\t\tstate.setColorWrite( material.colorWrite );\n\t\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate === false ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes || \n\t \t\t\t\t  materialProperties.numIntersection  !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t\t_gl.useProgram( program.program );\n\t\t\t\t_currentProgram = program.id;\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( camera !== _currentCamera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t     material.isMeshPhongMaterial ||\n\t\t\t\t     material.isMeshStandardMaterial ||\n\t\t\t\t     material.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t     material.isMeshLambertMaterial ||\n\t\t\t\t     material.isMeshBasicMaterial ||\n\t\t\t\t     material.isMeshStandardMaterial ||\n\t\t\t\t     material.isShaderMaterial ||\n\t\t\t\t     material.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ||\n\t\t\t\t     material.isMeshLambertMaterial ||\n\t\t\t\t     material.isMeshPhongMaterial ||\n\t\t\t\t     material.isMeshStandardMaterial ||\n\t\t\t\t     material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh single material specific uniforms\n\n\t\t\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\tWebGLUniforms.upload(\n\t\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tuniforms.map.value = material.map;\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// Lighting\n\n\t\tfunction setupShadows( lights ) {\n\n\t\t\tvar lightShadowsLength = 0;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.shadows.length = lightShadowsLength;\n\n\t\t}\n\n\t\tfunction setupLights( lights, camera ) {\n\n\t\t\tvar l, ll, light,\n\t\t\tr = 0, g = 0, b = 0,\n\t\t\tcolor,\n\t\t\tintensity,\n\t\t\tdistance,\n\t\t\tshadowMap,\n\n\t\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\t\tdirectionalLength = 0,\n\t\t\tpointLength = 0,\n\t\t\tspotLength = 0,\n\t\t\themiLength = 0;\n\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tlight = lights[ l ];\n\n\t\t\t\tcolor = light.color;\n\t\t\t\tintensity = light.intensity;\n\t\t\t\tdistance = light.distance;\n\n\t\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n\t\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n\t\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n\t\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.ambient[ 0 ] = r;\n\t\t\t_lights.ambient[ 1 ] = g;\n\t\t\t_lights.ambient[ 2 ] = b;\n\n\t\t\t_lights.directional.length = directionalLength;\n\t\t\t_lights.spot.length = spotLength;\n\t\t\t_lights.point.length = pointLength;\n\t\t\t_lights.hemi.length = hemiLength;\n\n\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t\t}\n\n\t\t// GL state setting\n\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\t\tstate.setCullFace( cullFace );\n\t\t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n\t\t};\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function() {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function() {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function() {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.getCurrentRenderTarget = function() {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tvar framebuffer;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = null;\n\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tstate.viewport( _currentViewport );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Map three.js constants to WebGL constants\n\n\t\tfunction paramThreeToGL( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t\t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t\t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t\t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === ByteType ) return _gl.BYTE;\n\t\t\tif ( p === ShortType ) return _gl.SHORT;\n\t\t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\t\tif ( p === IntType ) return _gl.INT;\n\t\t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\t\tif ( p === FloatType ) return _gl.FLOAT;\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t\t\tif ( p === RGBFormat ) return _gl.RGB;\n\t\t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t\t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t\t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t\t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n\t\t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t\t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t\t\tif ( p === OneFactor ) return _gl.ONE;\n\t\t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t\t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t\t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\t p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2 ( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tFogExp2.prototype.clone = function () {\n\n\t\treturn new FogExp2( this.color.getHex(), this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function ( meta ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog ( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tFog.prototype.clone = function () {\n\n\t\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function ( meta ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene () {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t}\n\n\tScene.prototype = Object.create( Object3D.prototype );\n\n\tScene.prototype.constructor = Scene;\n\n\tScene.prototype.copy = function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t};\n\n\tScene.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlare( texture, size, distance, blending, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.lensFlares = [];\n\n\t\tthis.positionScreen = new Vector3();\n\t\tthis.customUpdateCallback = undefined;\n\n\t\tif ( texture !== undefined ) {\n\n\t\t\tthis.add( texture, size, distance, blending, color );\n\n\t\t}\n\n\t}\n\n\tLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LensFlare,\n\n\t\tisLensFlare: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\t\tif ( size === undefined ) size = - 1;\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t\t\tif ( blending === undefined ) blending = NormalBlending;\n\n\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\t\tthis.lensFlares.push( {\n\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\tcolor: color,\t\t// color\n\t\t\t\tblending: blending\t// blending\n\t\t\t} );\n\n\t\t},\n\n\t\t/*\n\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t */\n\n\t\tupdateLensFlares: function () {\n\n\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\tvar flare;\n\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *\tuvOffset: new THREE.Vector2(),\n\t *\tuvScale: new THREE.Vector2()\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n\t\t\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\t\tpoint: this.position,\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t}\n\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps  = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Skeleton( bones, boneInverses, useVertexTexture ) {\n\n\t\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\t\tthis.identityMatrix = new Matrix4();\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\n\t\t// create a bone texture or an array of floats\n\n\t\tif ( this.useVertexTexture ) {\n\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\tsize = _Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\t\tsize = Math.max( size, 4 );\n\n\t\t\tthis.boneTextureWidth = size;\n\t\t\tthis.boneTextureHeight = size;\n\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\n\t\t} else {\n\n\t\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t\t}\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ b ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tbone = this.bones[ b ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tbone = this.bones[ b ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.useVertexTexture ) {\n\n\t\t\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone( skin ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t\tthis.skin = skin;\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.skin = source.skin;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material, useVertexTexture ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = \"attached\";\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\t// init bones\n\n\t\t// TODO: remove bone creation as there is no reason (other than\n\t\t// convenience) for THREE.SkinnedMesh to do this.\n\n\t\tvar bones = [];\n\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\tvar bone, gbone;\n\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\t\tbone = new Bone( this );\n\t\t\t\tbones.push( bone );\n\n\t\t\t\tbone.name = gbone.name;\n\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t}\n\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.normalizeSkinWeights();\n\n\t\tthis.updateMatrixWorld( true );\n\t\tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n\t}\n\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\n\t\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\n\t\t\t\tvar vec = new Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\n\t\t\tif ( this.bindMode === \"attached\" ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function() {\n\n\t\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\treturn new LineSegments( geometry, material );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new Vector3();\n\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\tvar interRay = new Vector3();\n\t\t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t\tvar scope = this;\n\n\t\tfunction update() {\n\n\t\t\trequestAnimationFrame( update );\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tscope.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tupdate();\n\n\t}\n\n\tVideoTexture.prototype = Object.create( Texture.prototype );\n\tVideoTexture.prototype.constructor = VideoTexture;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n\t\t}\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.type = type !== undefined ? type : UnsignedShortType;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tvar edge = [ 0, 0 ], hash = {};\n\n\t\tfunction sortFunction( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t}\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tif ( (geometry && geometry.isGeometry) ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar numEdges = 0;\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// Indexed BufferGeometry\n\n\t\t\t\tvar indices = geometry.index.array;\n\t\t\t\tvar vertices = geometry.attributes.position;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar numEdges = 0;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\t// allocate maximal size\n\t\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\t\tvar numEdges = vertices.length / 3;\n\t\t\t\tvar numTris = numEdges / 3;\n\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// generate vertices and uvs\n\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\tvar i, j, p;\n\t\tvar u, v;\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tv = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tu = j / slices;\n\n\t\t\t\tp = func( u, v );\n\t\t\t\tvertices.push( p.x, p.y, p.z );\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tvar indices = [];\n\t\tvar a, b, c, d;\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\ta = i * sliceCount + j;\n\t\t\t\tb = i * sliceCount + j + 1;\n\t\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t\tthis.addAttribute( 'position', Float32Attribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tappplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.addAttribute( 'position', Float32Attribute( vertexBuffer, 3 ) );\n\t\tthis.addAttribute( 'normal', Float32Attribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.addAttribute( 'uv', Float32Attribute( uvBuffer, 2 ) );\n\t\tthis.normalizeNormals();\n\n\t\tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0 ; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols ; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction appplyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth  ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] =  uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction OctahedronBufferGeometry( radius,detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t \tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t,     0, - r,  t,\n\t\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t,  0,    - r,  t,  0,\n\t\t\t r, - t,  0,     r,  t,  0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t,  0, - r,     t,  0, - r,\n\t\t\t- t,  0,  r,     t,  0,  r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t */\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Creates a tube which extrudes along a 3d spline.\n\t *\n\t */\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t\tthis.addAttribute( 'position', Float32Attribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', Float32Attribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tvar P = path.getPointAt( i / tubularSegments );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin =   Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t *\n\t * Creates a tube which extrudes along a 3d spline.\n\t */\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * see: http://www.blackpawn.com/texts/pqtorus/\n\t */\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// used to calculate buffer length\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// helper variables\n\t\tvar i, j, index = 0, indexOffset = 0;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\t// vertex\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t */\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// used to calculate buffer length\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t\t// offset variables\n\t\tvar vertexBufferOffset = 0;\n\t\tvar uvBufferOffset = 0;\n\t\tvar indexBufferOffset = 0;\n\n\t\t// helper variables\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n\t\t\t\t// this vector is used to calculate the normal\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\t\t// normal\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n\t\t\t\t// uv\n\t\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n\t\t\t\t// update offsets\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t// update offset\n\t\t\t\tindexBufferOffset += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\t\tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t */\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\ttriangulate: ( function () {\n\n\t\t\t/**\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t * See original code and more information here:\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t *\n\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t * www.actionsnippet.com\n\t\t\t *\n\t\t\t * ported to javascript by Joshua Koo\n\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t *\n\t\t\t */\n\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\t\tvar p;\n\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\tvar cx, cy, px, py;\n\n\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\t\tif ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;\n\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// takes in an contour array and returns\n\n\t\t\treturn function triangulate( contour, indices ) {\n\n\t\t\t\tvar n = contour.length;\n\n\t\t\t\tif ( n < 3 ) return null;\n\n\t\t\t\tvar result = [],\n\t\t\t\t\tverts = [],\n\t\t\t\t\tvertIndices = [];\n\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\t\tvar u, v, w;\n\n\t\t\t\tif ( ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t\t}\n\n\t\t\t\tvar nv = n;\n\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnv --;\n\n\t\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t} )(),\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tfunction removeDupEndPts(points) {\n\n\t\t\t\tvar l = points.length;\n\n\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\t\tpoints.pop();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\n\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t\t// return real intersection point\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t// both segments are points\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t\t// The order of legs is important\n\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t\t// angle != 180 deg.\n\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\tvar hole;\n\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar indepHoles = [];\n\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tindepHoles.push( h );\n\n\t\t\t\t}\n\n\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\t\tcounter --;\n\t\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t\t}\n\n\n\t\t\tvar i, il, f, face,\n\t\t\t\tkey, index,\n\t\t\t\tallPointsMap = {};\n\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\t\tvar allpoints = contour.concat();\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t\t}\n\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t\t// prepare all points map\n\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n\t\t\t\t}\n\n\t\t\t\tallPointsMap[ key ] = i;\n\n\t\t\t}\n\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\t\tvar triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t\t// check all face vertices against all points map\n\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\t\tface = triangles[ i ];\n\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangles.concat();\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\t// Bezier Curves formulas obtained from\n\t\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t\t// Quad Bezier Functions\n\n\t\tb2: ( function () {\n\n\t\t\tfunction b2p0( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn k * k * p;\n\n\t\t\t}\n\n\t\t\tfunction b2p1( t, p ) {\n\n\t\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t\t}\n\n\t\t\tfunction b2p2( t, p ) {\n\n\t\t\t\treturn t * t * p;\n\n\t\t\t}\n\n\t\t\treturn function b2( t, p0, p1, p2 ) {\n\n\t\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\t// Cubic Bezier Functions\n\n\t\tb3: ( function () {\n\n\t\t\tfunction b3p0( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn k * k * k * p;\n\n\t\t\t}\n\n\t\t\tfunction b3p1( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn 3 * k * k * t * p;\n\n\t\t\t}\n\n\t\t\tfunction b3p2( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn 3 * k * t * t * p;\n\n\t\t\t}\n\n\t\t\tfunction b3p3( t, p ) {\n\n\t\t\t\treturn t * t * t * p;\n\n\t\t\t}\n\n\t\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n\t\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t\t};\n\n\t\t} )()\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  amount: <int>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t *  frames: <Object> // containing arrays of tangents, normals, binormals\n\t *\n\t *  uvGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t **/\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\t\tshapes = [];\n\t\t\treturn;\n\n\t\t}\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeFaceNormals();\n\n\t\t// can't really use automatic vertex normals\n\t\t// as then front and back sides get smoothed too\n\t\t// should do separate smoothing just for sides\n\n\t\t//this.computeVertexNormals();\n\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tvar sl = shapes.length;\n\n\t\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\t\tvar shape = shapes[ s ];\n\t\t\tthis.addShape( shape, options );\n\n\t\t}\n\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\t\tvar extrudePath = options.extrudePath;\n\t\tvar extrudePts, extrudeByPath = false;\n\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n\t\tvar splineTube, binormal, normal, position2;\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new Vector3();\n\t\t\tnormal = new Vector3();\n\t\t\tposition2 = new Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\t\tvar scope = this;\n\n\t\tvar shapesOffset = this.vertices.length;\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t\t}\n\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tscope.vertices.push( new Vector3( x, y, z ) );\n\n\t\t}\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\ta += shapesOffset;\n\t\t\tb += shapesOffset;\n\t\t\tc += shapesOffset;\n\n\t\t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\n\t\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\t\ta += shapesOffset;\n\t\t\tb += shapesOffset;\n\t\t\tc += shapesOffset;\n\t\t\td += shapesOffset;\n\n\t\t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n\t\t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t\t}\n\n\t};\n\n\tExtrudeGeometry.WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tvar a = vertices[ indexA ];\n\t\t\tvar b = vertices[ indexB ];\n\t\t\tvar c = vertices[ indexC ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a.x, a.y ),\n\t\t\t\tnew Vector2( b.x, b.y ),\n\t\t\t\tnew Vector2( c.x, c.y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tvar a = vertices[ indexA ];\n\t\t\tvar b = vertices[ indexB ];\n\t\t\tvar c = vertices[ indexC ];\n\t\t\tvar d = vertices[ indexD ];\n\n\t\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a.x, 1 - a.z ),\n\t\t\t\t\tnew Vector2( b.x, 1 - b.z ),\n\t\t\t\t\tnew Vector2( c.x, 1 - c.z ),\n\t\t\t\t\tnew Vector2( d.x, 1 - d.z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a.y, 1 - a.z ),\n\t\t\t\t\tnew Vector2( b.y, 1 - b.z ),\n\t\t\t\t\tnew Vector2( c.y, 1 - c.z ),\n\t\t\t\t\tnew Vector2( d.y, 1 - d.z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( (font && font.isFont) === false ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tExtrudeGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n\tTextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * based on THREE.SphereGeometry\n\t */\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\t\tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\tvar index = 0, vertices = [], normal = new Vector3();\n\n\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\t\tvar u = x / widthSegments;\n\n\t\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\tverticesRow.push( index );\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\tvertices.push( verticesRow );\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t\tthis.addAttribute( 'position', positions );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 20;\n\t\touterRadius = outerRadius || 50;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// some helper variables\n\t\tvar index = 0, indexOffset = 0, segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\t// values are generate from the inside of the ring to the outside\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex++;\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\t// indices\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t */\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t */\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t // points - to create a closed torus, one must use a set of points\n\t //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t // segments - the number of circumference segments to create\n\t // phiStart - the starting radian\n\t // phiLength - the radian (0 to 2PI) range of the lathed section\n\t //    2PI is a closed lathe, less than 2PI is a portion.\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = ( segments + 1 ) * points.length;\n\t\tvar indexCount = segments * points.length * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// helper variables\n\t\tvar index = 0, indexOffset = 0, base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\t// indices\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t} // next row\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author astrodud / http://astrodud.isgreat.org/\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t */\n\n\t// points - to create a closed torus, one must use a set of points\n\t//    like so: [ a, b, c, d, a ], see first is the same as last.\n\t// segments - the number of circumference segments to create\n\t// phiStart - the starting radian\n\t// phiLength - the radian (0 to 2PI) range of the lathed section\n\t//    2PI is a closed lathe, less than 2PI is a portion.\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t *\n\t * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t * ExtrudeGeometry.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t *\n\t *\tmaterial: <int> // material index for front and back faces\n\t *\tuvGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t **/\n\n\tfunction ShapeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeFaceNormals();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\t/**\n\t * Add an array of shapes to THREE.ShapeGeometry.\n\t */\n\tShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tthis.addShape( shapes[ i ], options );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t */\n\tShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tif ( options === undefined ) options = {};\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar material = options.material;\n\t\tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t\t//\n\n\t\tvar i, l, hole;\n\n\t\tvar shapesOffset = this.vertices.length;\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\t\thole = holes[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treverse = false;\n\n\t\t}\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t// Vertices\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\t\t\tvertices = vertices.concat( hole );\n\n\t\t}\n\n\t\t//\n\n\t\tvar vert, vlen = vertices.length;\n\t\tvar face, flen = faces.length;\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = vertices[ i ];\n\n\t\t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\n\t\t}\n\n\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\tface = faces[ i ];\n\n\t\t\tvar a = face[ 0 ] + shapesOffset;\n\t\t\tvar b = face[ 1 ] + shapesOffset;\n\t\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\n\t\tvar edge = [ 0, 0 ], hash = {};\n\n\t\tfunction sortFunction( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t}\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tvar geometry2;\n\n\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar vertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = [];\n\n\t\tfor ( var key in hash ) {\n\n\t\t\tvar h = hash[ key ];\n\n\t\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\t\tcoords.push( vertex.x );\n\t\t\t\tcoords.push( vertex.y );\n\t\t\t\tcoords.push( vertex.z );\n\n\t\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\t\tcoords.push( vertex.x );\n\t\t\t\tcoords.push( vertex.y );\n\t\t\t\tcoords.push( vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t\theight = height !== undefined ? height : 100;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t\t// used to calculate buffer length\n\n\t\tvar nbCap = 0;\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\t\tif ( radiusBottom > 0 ) nbCap ++;\n\n\t\t}\n\n\t\tvar vertexCount = calculateVertexCount();\n\t\tvar indexCount = calculateIndexCount();\n\n\t\t// buffers\n\n\t\tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t\tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// helper variables\n\n\t\tvar index = 0,\n\t\t    indexOffset = 0,\n\t\t    indexArray = [],\n\t\t    halfHeight = height / 2;\n\n\t\t// group variables\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\t// helper functions\n\n\t\tfunction calculateVertexCount() {\n\n\t\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n\t\t\tif ( openEnded === false ) {\n\n\t\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n\t\t\t}\n\n\t\t\treturn count;\n\n\t\t}\n\n\t\tfunction calculateIndexCount() {\n\n\t\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n\t\t\tif ( openEnded === false ) {\n\n\t\t\t\tcount += radialSegments * nbCap * 3;\n\n\t\t\t}\n\n\t\t\treturn count;\n\n\t\t}\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\t\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\t\t\t\t\tindexRow.push( index );\n\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// face one\n\t\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t\t// face two\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t\t// update counters\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\t\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = 0.5;\n\t\t\t\tuv.y = 0.5;\n\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t\t}\n\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t/**\n\t * @author: abelnation / http://github.com/abelnation\n\t */\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tvar vertices = segments + 2;\n\n\t\tvar positions = new Float32Array( vertices * 3 );\n\t\tvar normals = new Float32Array( vertices * 3 );\n\t\tvar uvs = new Float32Array( vertices * 2 );\n\n\t\t// center data is already zero, but need to set a few extras\n\t\tnormals[ 2 ] = 1.0;\n\t\tuvs[ 0 ] = 0.5;\n\t\tuvs[ 1 ] = 0.5;\n\n\t\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n\t\tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\t/**\n\t * @author hughes\n\t */\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t */\n\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\n\n\tvar Geometries = Object.freeze({\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry,\n\t\tBoxGeometry: BoxGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ShadowMaterial() {\n\n\t\tShaderMaterial.call( this, {\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib[ \"lights\" ],\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\t\t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t\t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t\t} );\n\n\t\tthis.lights = true;\n\t\tthis.transparent = true;\n\n\t\tObject.defineProperties( this, {\n\t\t\topacity: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.type = 'MultiMaterial';\n\n\t\tthis.materials = materials instanceof Array ? materials : [];\n\n\t\tthis.visible = true;\n\n\t}\n\n\tMultiMaterial.prototype = {\n\n\t\tconstructor: MultiMaterial,\n\n\t\tisMultiMaterial: true,\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.2,\n\t\t\t\t\ttype: 'material',\n\t\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\ttype: this.type,\n\t\t\t\tmaterials: []\n\t\t\t};\n\n\t\t\tvar materials = this.materials;\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\t\tdelete material.metadata;\n\n\t\t\t\toutput.materials.push( material );\n\n\t\t\t}\n\n\t\t\toutput.visible = this.visible;\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar material = new this.constructor();\n\n\t\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tmaterial.visible = this.visible;\n\n\t\t\treturn material;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this, parameters );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( Material.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = Object.freeze({\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMultiMaterial: MultiMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction XHRLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( XHRLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\n\t\t\t\tdata = window.decodeURIComponent(data);\n\n\t\t\t\tif( isBase64 ) {\n\t\t\t\t\tdata = window.atob(data);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t \tresponse = new ArrayBuffer( data.length );\n\t\t\t\t\t\t\tvar view = new Uint8Array( response );\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ response ], { \"type\" : mimeType } );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\twindow.setTimeout( function() {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0);\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\twindow.setTimeout( function() {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}, 0);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = event.target.response;\n\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( onProgress !== undefined ) {\n\n\t\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\t\tonProgress( event );\n\n\t\t\t\t\t}, false );\n\n\t\t\t\t}\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tvar DataTextureLoader = BinaryTextureLoader;\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( BinaryTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( ImageLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\t\timage.onload = function () {\n\n\t\t\t\timage.onload = null;\n\n\t\t\t\tURL.revokeObjectURL( image.src );\n\n\t\t\t\tif ( onLoad ) onLoad( image );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t};\n\t\t\timage.onerror = onError;\n\n\t\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\timage.src = url;\n\n\t\t\t} else {\n\n\t\t\t\tvar loader = new XHRLoader();\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.setResponseType( 'blob' );\n\t\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\t\tloader.load( url, function ( blob ) {\n\n\t\t\t\t\timage.src = URL.createObjectURL( blob );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( CubeTextureLoader.prototype, {\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( TextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.image = image;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new Matrix4();\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || 500;\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow( light ) {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true,\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tInterpolant.prototype = {\n\n\t\tconstructor: Interpolant,\n\n\t\tevaluate: function( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[   i1   ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t//- See http://jsperf.com/comparison-to-undefined/3\n\t//- slower code:\n\t//-\n\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t//- slower code:\n\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function() {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tthrow new Error( \"call to abstract method\" );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t};\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\t\tInterpolant.prototype.copySampleValue_,\n\n\t\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\t\tInterpolant.prototype.copySampleValue_\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t}\n\n\tCubicInterpolant.prototype =\n\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype =\n\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype =\n\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\tvar KeyframeTrackPrototype;\n\n\tKeyframeTrackPrototype = {\n\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function( result ) {\n\n\t\t\treturn new DiscreteInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\t\treturn new LinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function( result ) {\n\n\t\t\treturn new CubicInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( message );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t},\n\n\t\tgetInterpolation: function() {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function() {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function( timeOffset ) {\n\n\t\t\tif( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function( timeScale ) {\n\n\t\t\tif( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.\n\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function() {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( \"track is empty\", this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function() {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else keep = true;\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\tfunction KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n\t\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\t\tif( times === undefined || times.length === 0 ) {\n\n\t\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t\t}\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t\tthis.validate();\n\t\tthis.optimize();\n\n\t}\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype =\n\t\t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0,\n\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number',\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.apply( this, arguments );\n\n\t}\n\n\tKeyframeTrack.prototype = KeyframeTrackPrototype;\n\tKeyframeTrackPrototype.constructor = KeyframeTrack;\n\n\t// Static methods:\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\tparse: function( json ) {\n\n\t\t\tif( json.type === undefined ) {\n\n\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t\t}\n\n\t\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\t\tif ( json.times === undefined ) {\n\n\t\t\t\tvar times = [], values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\t\tjson.times = times;\n\t\t\t\tjson.values = values;\n\n\t\t\t}\n\n\t\t\t// derived classes can define a static parse method\n\t\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\t\treturn trackType.parse( json );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\t\treturn new trackType(\n\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\t\tcase \"scalar\":\n\t\t\t\tcase \"double\":\n\t\t\t\tcase \"float\":\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"integer\":\n\n\t\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\t\tcase \"vector\":\n\t\t\t\tcase \"vector2\":\n\t\t\t\tcase \"vector3\":\n\t\t\t\tcase \"vector4\":\n\n\t\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\t\tcase \"color\":\n\n\t\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\t\tcase \"quaternion\":\n\n\t\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\t\tcase \"bool\":\n\t\t\t\tcase \"boolean\":\n\n\t\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\t\tcase \"string\":\n\n\t\t\t\t\treturn StringKeyframeTrack;\n\n\t\t\t}\n\n\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t\tthis.optimize();\n\n\t}\n\n\tAnimationClip.prototype = {\n\n\t\tconstructor: AnimationClip,\n\n\t\tresetDuration: function() {\n\n\t\t\tvar tracks = this.tracks,\n\t\t\t\tduration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max(\n\t\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t},\n\n\t\ttrim: function() {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\toptimize: function() {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// Static methods:\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\n\t\ttoJSON: function( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\n\t\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\t\ttimes, values\n\t\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, -1, tracks );\n\n\t\t},\n\n\t\tfindByName: function( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function(\n\t\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON(\n\t\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets in a way exactly compatible\n\t\t\t\t// with AnimationHandler.init( animation )\n\t\t\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n\t\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t}\n\n\tObject.assign( MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\t// MultiMaterial\n\n\t\t\tif ( json.materials !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tvar TYPED_ARRAYS = {\n\t\t\t\t'Int8Array': Int8Array,\n\t\t\t\t'Uint8Array': Uint8Array,\n\t\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t\t'Int16Array': Int16Array,\n\t\t\t\t'Uint16Array': Uint16Array,\n\t\t\t\t'Int32Array': Int32Array,\n\t\t\t\t'Uint32Array': Uint32Array,\n\t\t\t\t'Float32Array': Float32Array,\n\t\t\t\t'Float64Array': Float64Array\n\t\t\t};\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader() {\n\n\t\tthis.onLoadStart = function () {};\n\t\tthis.onLoadProgress = function () {};\n\t\tthis.onLoadComplete = function () {};\n\n\t}\n\n\tLoader.prototype = {\n\n\t\tconstructor: Loader,\n\n\t\tcrossOrigin: undefined,\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar parts = url.split( '/' );\n\n\t\t\tif ( parts.length === 1 ) return './';\n\n\t\t\tparts.pop();\n\n\t\t\treturn parts.join( '/' ) + '/';\n\n\t\t},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar color, textureLoader, materialLoader;\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\tif ( color === undefined ) color = new Color();\n\t\t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n\t\t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t};\n\n\tLoader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction JSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( JSONLoader.prototype, {\n\n\t\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tparse: function ( json, texturePath ) {\n\n\t\t\tvar geometry = new Geometry(),\n\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\t\tparseModel( scale );\n\n\t\t\tparseSkin();\n\t\t\tparseMorphing( scale );\n\t\t\tparseAnimations();\n\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tfunction parseModel( scale ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\toffset, zLength,\n\n\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\n\t\t\t\tnUvLayers = 0;\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin() {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( scale ) {\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations() {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\treturn { geometry: geometry };\n\n\t\t\t} else {\n\n\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseGeometries: function ( json ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\t\tvar object;\n\n\t\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn geometries[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn materials[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'Scene':\n\n\t\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LOD':\n\n\t\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Line':\n\n\t\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Group':\n\n\t\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tobject = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t\tobject.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\t\tif ( data.shadow ) {\n\n\t\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\t\tvar levels = data.levels;\n\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn object;\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of Curve methods\n\t * .getPoint(t), getTangent(t)\n\t * .getPointAt(u), getTangentAt(u)\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following classes subclasses THREE.Curve:\n\t *\n\t * -- 2d classes --\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.SplineCurve\n\t * THREE.ArcCurve\n\t * THREE.EllipseCurve\n\t *\n\t * -- 3d classes --\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.SplineCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {}\n\n\tCurve.prototype = {\n\n\t\tconstructor: Curve,\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\t\tif ( this.cacheArcLengths\n\t\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function() {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t//var time = Date.now();\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\tvar t = i / ( il - 1 );\n\t\t\t\treturn t;\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\t// TODO: Transformation for Curves?\n\n\t/**************************************************************\n\t *\t3D Curves\n\t **************************************************************/\n\n\t// A Factory method for creating new curve subclasses\n\n\tCurve.create = function ( constructor, getPointFunc ) {\n\n\t\tconstructor.prototype = Object.create( Curve.prototype );\n\t\tconstructor.prototype.constructor = constructor;\n\t\tconstructor.prototype.getPoint = getPointFunc;\n\n\t\treturn constructor;\n\n\t};\n\n\t/**************************************************************\n\t *\tLine\n\t **************************************************************/\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar point = this.v2.clone().sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u ) {\n\n\t\treturn this.getPoint( u );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function( t ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tthis.curves = [];\n\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t\t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t\t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t/**************************************************************\n\t\t *\tCreate Geometries Helpers\n\t\t **************************************************************/\n\n\t\t/// Generate geometry from path points (for Line or Points objects)\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\t// Generate geometry from equidistant sampling along the path\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t/**************************************************************\n\t *\tEllipse curve\n\t **************************************************************/\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function( t ) {\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn new Vector2( x, y );\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar CurveUtils = {\n\n\t\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t\t},\n\n\t\t// Puay Bing, thanks for helping with this derivative!\n\n\t\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t\t3 * t * t * p3;\n\n\t\t},\n\n\t\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t\t// To check if my formulas are correct\n\n\t\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\t\treturn h00 + h10 + h01 + h11;\n\n\t\t},\n\n\t\t// Catmull-Rom\n\n\t\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\t\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t};\n\n\t/**************************************************************\n\t *\tSpline curve\n\t **************************************************************/\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tthis.points = ( points === undefined ) ? [] : points;\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = CurveUtils.interpolate;\n\n\t\treturn new Vector2(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t\t);\n\n\t};\n\n\t/**************************************************************\n\t *\tCubic Bezier curve\n\t **************************************************************/\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar b3 = ShapeUtils.b3;\n\n\t\treturn new Vector2(\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t);\n\n\t};\n\n\tCubicBezierCurve.prototype.getTangent = function( t ) {\n\n\t\tvar tangentCubicBezier = CurveUtils.tangentCubicBezier;\n\n\t\treturn new Vector2(\n\t\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t).normalize();\n\n\t};\n\n\t/**************************************************************\n\t *\tQuadratic Bezier curve\n\t **************************************************************/\n\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar b2 = ShapeUtils.b2;\n\n\t\treturn new Vector2(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t);\n\n\t};\n\n\n\tQuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\t\tvar tangentQuadraticBezier = CurveUtils.tangentQuadraticBezier;\n\n\t\treturn new Vector2(\n\t\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t).normalize();\n\n\t};\n\n\tvar PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tfromPoints: function ( vectors ) {\n\n\t\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape() {\n\n\t\tPath.apply( this, arguments );\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn this.extractAllPoints( divisions );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t *\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.fromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = PathPrototype;\n\tPathPrototype.constructor = Path;\n\n\n\t// minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\tfunction ShapePath() {\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\n\tShapePath.prototype = {\n\t\tmoveTo: function ( x, y ) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo( x, y );\n\t\t},\n\t\tlineTo: function ( x, y ) {\n\t\t\tthis.currentPath.lineTo( x, y );\n\t\t},\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t\t},\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t\t},\n\t\tsplineThru: function ( pts ) {\n\t\t\tthis.currentPath.splineThru( pts );\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Font( data ) {\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\t\tfunction createPaths( text ) {\n\n\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\tvar offset = 0;\n\n\t\t\t\tvar paths = [];\n\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\t\toffset += ret.offset;\n\n\t\t\t\t\tpaths.push( ret.path );\n\n\t\t\t\t}\n\n\t\t\t\treturn paths;\n\n\t\t\t}\n\n\t\t\tfunction createPath( c, scale, offset ) {\n\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\t\tif ( ! glyph ) return;\n\n\t\t\t\tvar path = new ShapePath();\n\n\t\t\t\tvar pts = [], b2 = ShapeUtils.b2, b3 = ShapeUtils.b3;\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\t\tif ( glyph.o ) {\n\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { offset: glyph.ha * scale, path: path };\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( size === undefined ) size = 100;\n\t\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\t\tvar data = this.data;\n\n\t\t\tvar paths = createPaths( text );\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\tvar context;\n\n\tfunction getAudioContext() {\n\n\t\tif ( context === undefined ) {\n\n\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn context;\n\n\t}\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new XHRLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar context = getAudioContext();\n\n\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom;\n\n\t\t\tvar eyeRight = new Matrix4();\n\t\t\tvar eyeLeft = new Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\tvar eyeSep = this.eyeSep / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CubeCamera( near, far, cubeResolution ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = getAudioContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\t\tthis.source = this.context.createBufferSource();\n\t\tthis.source.onended = this.onEnded.bind( this );\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.startTime = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.source.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.source.buffer;\n\t\t\tsource.loop = this.source.loop;\n\t\t\tsource.onended = this.source.onended;\n\t\t\tsource.start( 0, this.startTime );\n\t\t\tsource.playbackRate.value = this.playbackRate;\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.source.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.loop = value;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\n\t\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n\t\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tPropertyMixer.prototype = {\n\n\t\tconstructor: PropertyMixer,\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function() {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function() {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath ||\n\t\t\t\tPropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode(\n\t\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tPropertyBinding.prototype = {\n\n\t\tconstructor: PropertyBinding,\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function() {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode(\n\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t \t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( nodeProperty.length !== undefined ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function() {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t};\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function() {},\n\t\t_setValue_unavailable: function() {},\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t]\n\n\t} );\n\n\tPropertyBinding.Composite =\n\t\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath ||\n\t\t\t\tPropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t};\n\n\tPropertyBinding.Composite.prototype = {\n\n\t\tconstructor: PropertyBinding.Composite,\n\n\t\tgetValue: function( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function() {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function() {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tPropertyBinding.create = function( root, path, parsedPath ) {\n\n\t\tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t};\n\n\tPropertyBinding.parseTrackName = function( trackName ) {\n\n\t\t// matches strings in the form of:\n\t\t//    nodeName.property\n\t\t//    nodeName.property[accessor]\n\t\t//    nodeName.material.property[accessor]\n\t\t//    uuid.property[accessor]\n\t\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t\t//    parentName/nodeName.property\n\t\t//    parentName/parentName/nodeName.property[index]\n\t\t//    .bone[Armature.DEF_cog].position\n\t\t//    scene:helium_balloon_model:helium_balloon_model.position\n\t\t// created and tested via https://regex101.com/#javascript\n\n\t\tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n\t\tvar matches = re.exec( trackName );\n\n\t\tif ( ! matches ) {\n\n\t\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n\t\t}\n\n\t\tvar results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ],\n\t\t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n\t\t};\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t};\n\n\tPropertyBinding.findNode = function( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tvar searchSkeleton = function( skeleton ) {\n\n\t\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\t\treturn bone;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\t\tif ( bone ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tvar searchNodeSubtree = function( children ) {\n\n\t\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t};\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup( var_args ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() { return scope._objects.length; },\n\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t\t},\n\n\t\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t\t};\n\n\t}\n\n\tAnimationObjectGroup.prototype = {\n\n\t\tconstructor: AnimationObjectGroup,\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\t\tnew PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tvar knownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject) {\n\n\t\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function( path, parsedPath ) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects,\n\t\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\n\t\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function( path ) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t}\n\n\tAnimationAction.prototype = {\n\n\t\tconstructor: AnimationAction,\n\n\t\t// State & Scheduling\n\n\t\tplay: function() {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function() {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function() {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = -1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function() {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function() {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function() {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function() {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the weight stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function() {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function() {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function() {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function() {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function() {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t\t// called by the mixer\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\n\t\t\tif ( deltaTime === 0 ) return time;\n\n\t\t\tvar duration = this._clip.duration,\n\n\t\t\t\tloop = this.loop,\n\t\t\t\tloopCount = this._loopCount;\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis.loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tObject.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function() {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\tif ( action.enabled ) {\n\n\t\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function() {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// Implementation details:\n\n\tObject.assign( AnimationMixer.prototype, {\n\n\t\t_bindAction: function( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function() {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function() {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tInstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tInstancedBufferGeometry.prototype.addGroup = function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t};\n\n\tInstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\n\tInterleavedBufferAttribute.prototype = {\n\n\t\tconstructor: InterleavedBufferAttribute,\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tget count() {\n\n\t\t\treturn this.data.count;\n\n\t\t},\n\n\t\tget array() {\n\n\t\t\treturn this.data.array;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tInterleavedBuffer.prototype = {\n\n\t\tconstructor: InterleavedBuffer,\n\n\t\tisInterleavedBuffer: true,\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t},\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n\tInstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tInstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\t\tBufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tInstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tRaycaster.prototype = {\n\n\t\tconstructor: Raycaster,\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tClock.prototype = {\n\n\t\tconstructor: Clock,\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( performance || Date ).now();\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( performance || Date ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Spline from Tween.js, slightly optimized (and trashed)\n\t * http://sole.github.com/tween.js/examples/05_spline.html\n\t *\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Spline( points ) {\n\n\t\tthis.points = points;\n\n\t\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t\tpoint, intPoint, weight, w2, w3,\n\t\tpa, pb, pc, pd;\n\n\t\tthis.initFromArray = function ( a ) {\n\n\t\t\tthis.points = [];\n\n\t\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getPoint = function ( k ) {\n\n\t\t\tpoint = ( this.points.length - 1 ) * k;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\t\tc[ 1 ] = intPoint;\n\t\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\t\tpa = this.points[ c[ 0 ] ];\n\t\t\tpb = this.points[ c[ 1 ] ];\n\t\t\tpc = this.points[ c[ 2 ] ];\n\t\t\tpd = this.points[ c[ 3 ] ];\n\n\t\t\tw2 = weight * weight;\n\t\t\tw3 = weight * w2;\n\n\t\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\t\treturn v3;\n\n\t\t};\n\n\t\tthis.getControlPointsArray = function () {\n\n\t\t\tvar i, p, l = this.points.length,\n\t\t\t\tcoords = [];\n\n\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\tp = this.points[ i ];\n\t\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t\t}\n\n\t\t\treturn coords;\n\n\t\t};\n\n\t\t// approximate length by summing linear segments\n\n\t\tthis.getLength = function ( nSubDivisions ) {\n\n\t\t\tvar i, index, nSamples, position,\n\t\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\t\toldPosition = new Vector3(),\n\t\t\t\ttmpVec = new Vector3(),\n\t\t\t\tchunkLengths = [],\n\t\t\t\ttotalLength = 0;\n\n\t\t\t// first point has 0 length\n\n\t\t\tchunkLengths[ 0 ] = 0;\n\n\t\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\t\tindex = i / nSamples;\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\ttmpVec.copy( position );\n\n\t\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\t\toldPosition.copy( position );\n\n\t\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\t\tintPoint = Math.floor( point );\n\n\t\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// last point ends with total length\n\n\t\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t\t};\n\n\t\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\t\tvar i, j,\n\t\t\t\tindex, indexCurrent, indexNext,\n\t\t\t\trealDistance,\n\t\t\t\tsampling, position,\n\t\t\t\tnewpoints = [],\n\t\t\t\ttmpVec = new Vector3(),\n\t\t\t\tsl = this.getLength();\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\t\tposition = this.getPoint( index );\n\t\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t\t}\n\n\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t\t}\n\n\t\t\tthis.points = newpoints;\n\n\t\t};\n\n\t\t// Catmull-Rom\n\n\t\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The poles (phi) are at the positive and negative y axis.\n\t * The equator starts at positive z.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\t\treturn this;\n\n\t}\n\n\tSpherical.prototype = {\n\n\t\tconstructor: Spherical,\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function() {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function( vec3 ) {\n\n\t\t\tthis.radius = vec3.length();\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t};\n\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction MorphBlendMesh( geometry, material ) {\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.animationsMap = {};\r\n\t\tthis.animationsList = [];\r\n\r\n\t\t// prepare default animation\r\n\t\t// (all frames played together in 1 second)\r\n\r\n\t\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\t\tvar name = \"__default\";\r\n\r\n\t\tvar startFrame = 0;\r\n\t\tvar endFrame = numFrames - 1;\r\n\r\n\t\tvar fps = numFrames / 1;\r\n\r\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t\tthis.setAnimationWeight( name, 1 );\r\n\r\n\t}\r\n\r\n\tMorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\tMorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n\tMorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\t\tvar animation = {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\r\n\t\t\tlength: end - start + 1,\r\n\r\n\t\t\tfps: fps,\r\n\t\t\tduration: ( end - start ) / fps,\r\n\r\n\t\t\tlastFrame: 0,\r\n\t\t\tcurrentFrame: 0,\r\n\r\n\t\t\tactive: false,\r\n\r\n\t\t\ttime: 0,\r\n\t\t\tdirection: 1,\r\n\t\t\tweight: 1,\r\n\r\n\t\t\tdirectionBackwards: false,\r\n\t\t\tmirroredLoop: false\r\n\r\n\t\t};\r\n\r\n\t\tthis.animationsMap[ name ] = animation;\r\n\t\tthis.animationsList.push( animation );\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n\t\tvar firstAnimation, frameRanges = {};\r\n\r\n\t\tvar geometry = this.geometry;\r\n\r\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in frameRanges ) {\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t\t}\r\n\r\n\t\tthis.firstAnimation = firstAnimation;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.direction = 1;\r\n\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.direction = - 1;\r\n\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.fps = fps;\r\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.duration = duration;\r\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.weight = weight;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.time = time;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\t\tvar time = 0;\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\ttime = animation.time;\r\n\r\n\t\t}\r\n\r\n\t\treturn time;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\t\tvar duration = - 1;\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tduration = animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.time = 0;\r\n\t\t\tanimation.active = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.active = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\t\tif ( ! animation.active ) continue;\r\n\r\n\t\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\t\tvar weight = animation.weight;\r\n\r\n\t\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( renderCallback ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction SpotLightHelper( light ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0,   0,   0,   1,\n\t\t\t0, 0, 0,   1,   0,   1,\n\t\t\t0, 0, 0, - 1,   0,   1,\n\t\t\t0, 0, 0,   0,   1,   1,\n\t\t\t0, 0, 0,   0, - 1,   1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar vector2 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tthis.bones = this.getBoneList( object );\n\n\t\tvar geometry = new Geometry();\n\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n\t\t\t\tgeometry.vertices.push( new Vector3() );\n\t\t\t\tgeometry.vertices.push( new Vector3() );\n\t\t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n\t\t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.dynamic = true;\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.getBoneList = function( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( (object && object.isBone) ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\n\t\tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\n\t\tvar boneMatrix = new Matrix4();\n\n\t\tvar j = 0;\n\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tgeometry.computeBoundingSphere();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction HemisphereLightHelper( light, sphereSize ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.colors = [ new Color(), new Color() ];\n\n\t\tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tgeometry.rotateX( - Math.PI / 2 );\n\n\t\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t\t}\n\n\t\tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\n\t\tthis.lightSphere = new Mesh( geometry, material );\n\t\tthis.add( this.lightSphere );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightSphere.geometry.dispose();\n\t\tthis.lightSphere.material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tdivisions = divisions || 1;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = ( size * 2 ) / divisions;\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - size, 0, k, size, 0, k );\n\t\t\tvertices.push( k, 0, - size, k, 0, size );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\tGridHelper.prototype.constructor = GridHelper;\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction DirectionalLightHelper( light, size ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32Attribute( [\n\t\t\t- size,   size, 0,\n\t\t\t  size,   size, 0,\n\t\t\t  size, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size,   size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.add( new Line( geometry, material ) );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.add( new Line( geometry, material ));\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.geometry.dispose();\n\t\tlightPlane.material.dispose();\n\t\ttargetLine.geometry.dispose();\n\t\ttargetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar v3 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\tvar targetLine = this.children[ 1 ];\n\n\t\t\tlightPlane.lookAt( v3 );\n\t\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t\ttargetLine.lookAt( v3 );\n\t\t\ttargetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new Geometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar hexFrustum = 0xffaa00;\n\t\tvar hexCone = 0xff0000;\n\t\tvar hexUp = 0x00aaff;\n\t\tvar hexTarget = 0xffffff;\n\t\tvar hexCross = 0x333333;\n\n\t\t// near\n\n\t\taddLine( \"n1\", \"n2\", hexFrustum );\n\t\taddLine( \"n2\", \"n4\", hexFrustum );\n\t\taddLine( \"n4\", \"n3\", hexFrustum );\n\t\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t\t// far\n\n\t\taddLine( \"f1\", \"f2\", hexFrustum );\n\t\taddLine( \"f2\", \"f4\", hexFrustum );\n\t\taddLine( \"f4\", \"f3\", hexFrustum );\n\t\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t\t// sides\n\n\t\taddLine( \"n1\", \"f1\", hexFrustum );\n\t\taddLine( \"n2\", \"f2\", hexFrustum );\n\t\taddLine( \"n3\", \"f3\", hexFrustum );\n\t\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t\t// cone\n\n\t\taddLine( \"p\", \"n1\", hexCone );\n\t\taddLine( \"p\", \"n2\", hexCone );\n\t\taddLine( \"p\", \"n3\", hexCone );\n\t\taddLine( \"p\", \"n4\", hexCone );\n\n\t\t// up\n\n\t\taddLine( \"u1\", \"u2\", hexUp );\n\t\taddLine( \"u2\", \"u3\", hexUp );\n\t\taddLine( \"u3\", \"u1\", hexUp );\n\n\t\t// target\n\n\t\taddLine( \"c\", \"t\", hexTarget );\n\t\taddLine( \"p\", \"c\", hexCross );\n\n\t\t// cross\n\n\t\taddLine( \"cn1\", \"cn2\", hexCross );\n\t\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\t\taddLine( \"cf1\", \"cf2\", hexCross );\n\t\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\t\tfunction addLine( a, b, hex ) {\n\n\t\t\taddPoint( a, hex );\n\t\t\taddPoint( b, hex );\n\n\t\t}\n\n\t\tfunction addPoint( id, hex ) {\n\n\t\t\tgeometry.vertices.push( new Vector3() );\n\t\t\tgeometry.colors.push( new Color( hex ) );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t\t}\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new Vector3();\n\t\tvar camera = new Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\t// a helper to show the world-axis-aligned bounding box for an object\n\n\tfunction BoundingBoxHelper( object, hex ) {\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\t\tthis.object = object;\n\n\t\tthis.box = new Box3();\n\n\t\tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n\t}\n\n\tBoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n\tBoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\n\tBoundingBoxHelper.prototype.update = function () {\n\n\t\tthis.box.setFromObject( this.object );\n\n\t\tthis.box.getSize( this.scale );\n\n\t\tthis.box.getCenter( this.position );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tthis.update( object );\n\n\t\t}\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( (object && object.isBox3) ) {\n\n\t\t\t\tbox.copy( object );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromObject( object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar lineGeometry = new BufferGeometry();\n\tlineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\tvar coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxisHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t0, 0, 0,  size, 0, 0,\n\t\t\t0, 0, 0,  0, size, 0,\n\t\t\t0, 0, 0,  0, 0, size\n\t\t] );\n\n\t\tvar colors = new Float32Array( [\n\t\t\t1, 0, 0,  1, 0.6, 0,\n\t\t\t0, 1, 0,  0.6, 1, 0,\n\t\t\t0, 0, 1,  0, 0.6, 1\n\t\t] );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxisHelper.prototype = Object.create( LineSegments.prototype );\n\tAxisHelper.prototype.constructor = AxisHelper;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\tvar CatmullRomCurve3 = ( function() {\n\n\t\tvar\n\t\t\ttmp = new Vector3(),\n\t\t\tpx = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\t\t/*\n\t\tBased on an optimized c++ solution in\n\t\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t\t - http://ideone.com/NoEbVM\n\n\t\tThis CubicPoly class could be used for reusing some variables and calculations,\n\t\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t\twhich can be placed in CurveUtils.\n\t\t*/\n\n\t\tfunction CubicPoly() {}\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\t\tthis.c0 = x0;\n\t\t\tthis.c1 = t0;\n\t\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t};\n\n\t\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\t// initCubicPoly\n\t\t\tthis.init( x1, x2, t1, t2 );\n\n\t\t};\n\n\t\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t};\n\n\t\tCubicPoly.prototype.calc = function( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t\t};\n\n\t\t// Subclass Three.js curve\n\t\treturn Curve.create(\n\n\t\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\t\tthis.points = p || [];\n\t\t\t\tthis.closed = false;\n\n\t\t\t},\n\n\t\t\tfunction ( t ) {\n\n\t\t\t\tvar points = this.points,\n\t\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\t\tl = points.length;\n\n\t\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\t\tintPoint = Math.floor( point );\n\t\t\t\tweight = point - intPoint;\n\n\t\t\t\tif ( this.closed ) {\n\n\t\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\t\tintPoint = l - 2;\n\t\t\t\t\tweight = 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\t\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// extrapolate first point\n\t\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\t\tp0 = tmp;\n\n\t\t\t\t}\n\n\t\t\t\tp1 = points[ intPoint % l ];\n\t\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// extrapolate last point\n\t\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\t\tp3 = tmp;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t\t// safety check for repeated points\n\t\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t\t}\n\n\t\t\t\tvar v = new Vector3(\n\t\t\t\t\tpx.calc( weight ),\n\t\t\t\t\tpy.calc( weight ),\n\t\t\t\t\tpz.calc( weight )\n\t\t\t\t);\n\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t);\n\n\t} )();\n\n\t/**************************************************************\n\t *\tClosed Spline 3D curve\n\t **************************************************************/\n\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t/**************************************************************\n\t *\tSpline 3D curve\n\t **************************************************************/\n\n\n\tvar SplineCurve3 = Curve.create(\n\n\t\tfunction ( points /* array of Vector3 */ ) {\n\n\t\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\t\tthis.points = ( points === undefined ) ? [] : points;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points;\n\t\t\tvar point = ( points.length - 1 ) * t;\n\n\t\t\tvar intPoint = Math.floor( point );\n\t\t\tvar weight = point - intPoint;\n\n\t\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\t\tvar point1 = points[ intPoint ];\n\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\t\tvar interpolate = CurveUtils.interpolate;\n\n\t\t\treturn new Vector3(\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t\t);\n\n\t\t}\n\n\t);\n\n\t/**************************************************************\n\t *\tCubic Bezier 3D curve\n\t **************************************************************/\n\n\tvar CubicBezierCurve3 = Curve.create(\n\n\t\tfunction ( v0, v1, v2, v3 ) {\n\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar b3 = ShapeUtils.b3;\n\n\t\t\treturn new Vector3(\n\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t\t);\n\n\t\t}\n\n\t);\n\n\t/**************************************************************\n\t *\tQuadratic Bezier 3D curve\n\t **************************************************************/\n\n\tvar QuadraticBezierCurve3 = Curve.create(\n\n\t\tfunction ( v0, v1, v2 ) {\n\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar b2 = ShapeUtils.b2;\n\n\t\t\treturn new Vector3(\n\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t\t);\n\n\t\t}\n\n\t);\n\n\t/**************************************************************\n\t *\tLine3D\n\t **************************************************************/\n\n\tvar LineCurve3 = Curve.create(\n\n\t\tfunction ( v1, v2 ) {\n\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tif ( t === 1 ) {\n\n\t\t\t\treturn this.v2.clone();\n\n\t\t\t}\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\t\tvector.multiplyScalar( t );\n\t\t\tvector.add( this.v1 );\n\n\t\t\treturn vector;\n\n\t\t}\n\n\t);\n\n\t/**************************************************************\n\t *\tArc curve\n\t **************************************************************/\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\t\tvar group = new Group();\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t},\n\n\t\tdetach: function ( child, parent, scene ) {\n\n\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\tparent.remove( child );\n\t\t\tscene.add( child );\n\n\t\t},\n\n\t\tattach: function ( child, scene, parent ) {\n\n\t\t\tvar matrixWorldInverse = new Matrix4();\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\t\tscene.remove( child );\n\t\t\tparent.add( child );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4 ( a, b, c, d, normal, color, materialIndex ) {\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction PointCloud ( geometry, material ) {\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\t}\n\n\tfunction ParticleSystem ( geometry, material ) {\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\t}\n\n\tfunction PointCloudMaterial ( parameters ) {\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\t}\n\n\tfunction ParticleBasicMaterial ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\t}\n\n\tfunction ParticleSystemMaterial ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\t}\n\n\tfunction Vertex ( x, y, z ) {\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\t}\n\n\t//\n\n\tfunction EdgesHelper( object, hex ) {\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t}\n\n\tfunction WireframeHelper( object, hex ) {\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t}\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\t\tcenter: function ( optionalTarget ) {\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\t\t},\n\t\tempty: function () {\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\t\tcenter: function ( optionalTarget ) {\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\t\t},\n\t\tempty: function () {\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\t\t}\n\t} );\n\n\tObject.assign( Line3.prototype, {\n\t\tcenter: function ( optionalTarget ) {\n\t\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\t\t}\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\treturn this.applyToVector3Array( a );\n\t\t}\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\t\textractPosition: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\t\treturn vector.applyProjection( this );\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\treturn this.applyToVector3Array( a );\n\t\t},\n\t\trotateAxis: function ( v ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\t\t},\n\t\ttranslate: function ( v ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t\t},\n\t\trotateX: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t\t},\n\t\trotateY: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t\t},\n\t\trotateZ: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t\t},\n\t\trotateByAxis: function ( axis, angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t\t}\n\t} );\n\n\tObject.assign( Plane.prototype, {\n\t\tisIntersectionLine: function ( line ) {\n\t\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\t\treturn this.intersectsLine( line );\n\t\t}\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\t\treturn vector.applyQuaternion( this );\n\t\t}\n\t} );\n\n\tObject.assign( Ray.prototype, {\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\t\t}\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\t\textrude: function ( options ) {\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\t\t}\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function () {\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( Object3D.prototype, {\n\t\tgetChildByName: function ( name ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\t\t},\n\t\trenderDepth: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\t\t}\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\t\taddIndex: function ( index ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\t\t\tif ( indexOffset !== undefined ) {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\t\t},\n\t\tclearDrawCalls: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeTangents: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t\t},\n\t\tcomputeOffsets: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t\t}\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tEventDispatcher.prototype = Object.assign( Object.create( {\n\n\t\t// Note: Extra base ensures these properties are not 'assign'ed.\n\n\t\tconstructor: EventDispatcher,\n\n\t\tapply: function ( target ) {\n\n\t\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n\t\t\tObject.assign( target, this );\n\n\t\t}\n\n\t} ), EventDispatcher.prototype );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\t\tsupportsFloatTextures: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\t\t},\n\t\tinitMaterial: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t\t},\n\t\taddPrePlugin: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t\t},\n\t\taddPostPlugin: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t\t},\n\t\tupdateShadowMap: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.cullFace;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tthis.shadowMap.cullFace = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\t\t\t},\n\t\t\tset: function ( cullFace ) {\n\t\t\t\tvar value = ( cullFace !== CullFaceBack );\n\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\tthis.renderReverseSided = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( Audio.prototype, {\n\t\tload: function ( file ) {\n\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\t\tvar scope = this;\n\t\t\tvar audioLoader = new AudioLoader();\n\t\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\t\tscope.setBuffer( buffer );\n\t\t\t} );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tObject.assign( AudioAnalyser.prototype, {\n\t\tgetData: function ( file ) {\n\t\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\t\treturn this.getFrequencyData();\n\t\t}\n\t} );\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tvar ImageUtils = {\n\n\t\tcrossOrigin: undefined,\n\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\t\tvar loader = new TextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\t\tvar loader = new CubeTextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadCompressedTexture: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t},\n\n\t\tloadCompressedTextureCube: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction Projector () {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function ( vector, camera ) {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t}\n\n\t//\n\n\tfunction CanvasRenderer () {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t}\n\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.ShaderLib = ShaderLib;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.FogExp2 = FogExp2;\n\texports.Fog = Fog;\n\texports.Scene = Scene;\n\texports.LensFlare = LensFlare;\n\texports.Sprite = Sprite;\n\texports.LOD = LOD;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.Skeleton = Skeleton;\n\texports.Bone = Bone;\n\texports.Mesh = Mesh;\n\texports.LineSegments = LineSegments;\n\texports.Line = Line;\n\texports.Points = Points;\n\texports.Group = Group;\n\texports.VideoTexture = VideoTexture;\n\texports.DataTexture = DataTexture;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CubeTexture = CubeTexture;\n\texports.CanvasTexture = CanvasTexture;\n\texports.DepthTexture = DepthTexture;\n\texports.TextureIdCount = TextureIdCount;\n\texports.Texture = Texture;\n\texports.MaterialIdCount = MaterialIdCount;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.TextureLoader = TextureLoader;\n\texports.ObjectLoader = ObjectLoader;\n\texports.MaterialLoader = MaterialLoader;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.LoadingManager = LoadingManager;\n\texports.JSONLoader = JSONLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.FontLoader = FontLoader;\n\texports.XHRLoader = XHRLoader;\n\texports.Loader = Loader;\n\texports.Cache = Cache;\n\texports.AudioLoader = AudioLoader;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.SpotLight = SpotLight;\n\texports.PointLight = PointLight;\n\texports.HemisphereLight = HemisphereLight;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DirectionalLight = DirectionalLight;\n\texports.AmbientLight = AmbientLight;\n\texports.LightShadow = LightShadow;\n\texports.Light = Light;\n\texports.StereoCamera = StereoCamera;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.CubeCamera = CubeCamera;\n\texports.Camera = Camera;\n\texports.AudioListener = AudioListener;\n\texports.PositionalAudio = PositionalAudio;\n\texports.getAudioContext = getAudioContext;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.Audio = Audio;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.PropertyMixer = PropertyMixer;\n\texports.PropertyBinding = PropertyBinding;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.AnimationUtils = AnimationUtils;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationClip = AnimationClip;\n\texports.Uniform = Uniform;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.BufferGeometry = BufferGeometry;\n\texports.GeometryIdCount = GeometryIdCount;\n\texports.Geometry = Geometry;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.BufferAttribute = BufferAttribute;\n\texports.Face3 = Face3;\n\texports.Object3DIdCount = Object3DIdCount;\n\texports.Object3D = Object3D;\n\texports.Raycaster = Raycaster;\n\texports.Layers = Layers;\n\texports.EventDispatcher = EventDispatcher;\n\texports.Clock = Clock;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.Interpolant = Interpolant;\n\texports.Triangle = Triangle;\n\texports.Spline = Spline;\n\texports.Math = _Math;\n\texports.Spherical = Spherical;\n\texports.Plane = Plane;\n\texports.Frustum = Frustum;\n\texports.Sphere = Sphere;\n\texports.Ray = Ray;\n\texports.Matrix4 = Matrix4;\n\texports.Matrix3 = Matrix3;\n\texports.Box3 = Box3;\n\texports.Box2 = Box2;\n\texports.Line3 = Line3;\n\texports.Euler = Euler;\n\texports.Vector4 = Vector4;\n\texports.Vector3 = Vector3;\n\texports.Vector2 = Vector2;\n\texports.Quaternion = Quaternion;\n\texports.ColorKeywords = ColorKeywords;\n\texports.Color = Color;\n\texports.MorphBlendMesh = MorphBlendMesh;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.PointLightHelper = PointLightHelper;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.GridHelper = GridHelper;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.CameraHelper = CameraHelper;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.BoxHelper = BoxHelper;\n\texports.ArrowHelper = ArrowHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.LineCurve3 = LineCurve3;\n\texports.ArcCurve = ArcCurve;\n\texports.EllipseCurve = EllipseCurve;\n\texports.SplineCurve = SplineCurve;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.LineCurve = LineCurve;\n\texports.Shape = Shape;\n\texports.ShapePath = ShapePath;\n\texports.Path = Path;\n\texports.Font = Font;\n\texports.CurvePath = CurvePath;\n\texports.Curve = Curve;\n\texports.ShapeUtils = ShapeUtils;\n\texports.SceneUtils = SceneUtils;\n\texports.CurveUtils = CurveUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.PointsMaterial = PointsMaterial;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.Material = Material;\n\texports.REVISION = REVISION;\n\texports.MOUSE = MOUSE;\n\texports.CullFaceNone = CullFaceNone;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.FrontSide = FrontSide;\n\texports.BackSide = BackSide;\n\texports.DoubleSide = DoubleSide;\n\texports.FlatShading = FlatShading;\n\texports.SmoothShading = SmoothShading;\n\texports.NoColors = NoColors;\n\texports.FaceColors = FaceColors;\n\texports.VertexColors = VertexColors;\n\texports.NoBlending = NoBlending;\n\texports.NormalBlending = NormalBlending;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.CustomBlending = CustomBlending;\n\texports.BlendingMode = BlendingMode;\n\texports.AddEquation = AddEquation;\n\texports.SubtractEquation = SubtractEquation;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.MinEquation = MinEquation;\n\texports.MaxEquation = MaxEquation;\n\texports.ZeroFactor = ZeroFactor;\n\texports.OneFactor = OneFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.NeverDepth = NeverDepth;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.EqualDepth = EqualDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterDepth = GreaterDepth;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.MixOperation = MixOperation;\n\texports.AddOperation = AddOperation;\n\texports.NoToneMapping = NoToneMapping;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.UVMapping = UVMapping;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.TextureMapping = TextureMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.TextureWrapping = TextureWrapping;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.TextureFilter = TextureFilter;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.ByteType = ByteType;\n\texports.ShortType = ShortType;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.IntType = IntType;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.FloatType = FloatType;\n\texports.HalfFloatType = HalfFloatType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.AlphaFormat = AlphaFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBAFormat = RGBAFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.RGBEFormat = RGBEFormat;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LoopPingPong = LoopPingPong;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.LinearEncoding = LinearEncoding;\n\texports.sRGBEncoding = sRGBEncoding;\n\texports.GammaEncoding = GammaEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.CubeGeometry = BoxGeometry;\n\texports.Face4 = Face4;\n\texports.LineStrip = LineStrip;\n\texports.LinePieces = LinePieces;\n\texports.MeshFaceMaterial = MultiMaterial;\n\texports.PointCloud = PointCloud;\n\texports.Particle = Sprite;\n\texports.ParticleSystem = ParticleSystem;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Vertex = Vertex;\n\texports.EdgesHelper = EdgesHelper;\n\texports.WireframeHelper = WireframeHelper;\n\texports.GeometryUtils = GeometryUtils;\n\texports.ImageUtils = ImageUtils;\n\texports.Projector = Projector;\n\texports.CanvasRenderer = CanvasRenderer;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n\tObject.defineProperty( exports, 'AudioContext', {\n\t\tget: function () {\n\t\t\treturn exports.getAudioContext();\n\t\t}\n\t});\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/three/build/three.js\n// module id = 2\n// module chunks = 0","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update () {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function() {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t//console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t//console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\t//console.log( 'handleTouchStartPan' );\n\n\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\t//console.log( 'handleTouchMovePan' );\n\n\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseDownRotate( event );\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseDownDolly( event );\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseDownPan( event );\n\n\t\t\tstate = STATE.PAN;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseMoveRotate( event );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseMoveDolly( event );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseMovePan( event );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\nObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/libs/OrbitControls.js","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar pixelRatio = renderer.getPixelRatio();\n\n\t\tvar width  = Math.floor( renderer.context.canvas.width  / pixelRatio ) || 1;\n\t\tvar height = Math.floor( renderer.context.canvas.height / pixelRatio ) || 1;\n\t\tvar parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\n\n\t\trenderTarget = new THREE.WebGLRenderTarget( width, height, parameters );\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.passes = [];\n\n\tif ( THREE.CopyShader === undefined )\n\t\tconsole.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\n\n\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\n\n};\n\nTHREE.EffectComposer.prototype = {\n\n\tswapBuffers: function() {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\trender: function ( delta ) {\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( ! pass.enabled ) continue;\n\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.context;\n\n\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\n\n\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( pass instanceof THREE.MaskPass ) {\n\n\t\t\t\tmaskActive = true;\n\n\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\n\n\t\t\t\tmaskActive = false;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\n\t\t\tvar pixelRatio = this.renderer.getPixelRatio();\n\n\t\t\trenderTarget.width  = Math.floor( this.renderer.context.canvas.width  / pixelRatio );\n\t\t\trenderTarget.height = Math.floor( this.renderer.context.canvas.height / pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.renderTarget1.setSize( width, height );\n\t\tthis.renderTarget2.setSize( width, height );\n\n\t}\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/libs/EffectComposer.js"],"sourceRoot":""}